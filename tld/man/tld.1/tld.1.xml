<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [
	<!ENTITY shape.arg "<replaceable>shape</replaceable>">
	<!ENTITY from.arg  "<replaceable>from</replaceable>">
	<!ENTITY to.arg    "<replaceable>to</replaceable>">

	<!ENTITY s1.opt "<option>-s</option>">
	<!ENTITY s2.opt "<option>-s</option>&nbsp;&shape.arg;&nbsp;&name.arg;">

	<!ENTITY i.opt  "<option>-i</option>&nbsp;&file.arg;">
	<!ENTITY i2.opt "<option>-i</option>">

	<!ENTITY a.opt "<option>-a</option>">
	<!ENTITY b.opt "<option>-b</option>">
	<!ENTITY d.opt "<option>-d</option>&nbsp;&file.arg;">
	<!ENTITY h.opt "<option>-h</option>&nbsp;&shape.arg;&nbsp;&name.arg;">
	<!ENTITY k.opt "<option>-k</option>&nbsp;&shape.arg;&nbsp;&name.arg;">
	<!ENTITY l.opt "<option>-l</option>&file.arg;">
	<!ENTITY m.opt "<option>-m</option>">
	<!ENTITY o.opt "<option>-o</option>&nbsp;&file.arg;">
	<!ENTITY r.opt "<option>-r</option>&nbsp;&shape.arg;&nbsp;&from.arg;&nbsp;&to.arg;">
	<!ENTITY u.opt "<option>-u</option>&nbsp;&file.arg;">
	<!ENTITY v.opt "<option>-v</option>">
	<!ENTITY w.opt "<option>-w</option>">

	<!ENTITY H.opt "<option>-H</option>&nbsp;&shape.arg;">
	<!ENTITY K.opt "<option>-K</option>&nbsp;&shape.arg;">
	<!ENTITY L.opt "<option>-L</option>&dir.arg;">
	<!ENTITY M.opt "<option>-M</option>">
	<!ENTITY R.opt "<option>-R</option>&nbsp;&file.arg;">
	<!ENTITY S.opt "<option>-S</option>&nbsp;&shape.arg;">

	<!ENTITY ml.opt "<option>-ml</option>">
	<!ENTITY mc.opt "<option>-mc</option>">
	<!ENTITY mt.opt "<option>-mt</option>">
	<!ENTITY mx.opt "<option>-mx</option>">

	<!ENTITY all.opt       "<option>--all</option>">
	<!ENTITY help.opt      "<option>--help</option>">
	<!ENTITY hide.opt      "<option>--hide</option>&nbsp;&shape.arg;&nbsp;&name.arg;">
	<!ENTITY index.opt     "<option>--index</option>">
	<!ENTITY info.opt      "<option>--info</option>">
	<!ENTITY keep.opt      "<option>--keep</option>&nbsp;&shape.arg;&nbsp;&name.arg;">
	<!ENTITY path.opt      "<option>--path</option>&nbsp;&dir.arg;">
	<!ENTITY keep-all.opt  "<option>--keep-all</option>&nbsp;&shape.arg;">
	<!ENTITY library.opt   "<option>--library</option>&nbsp;&file.arg;">
	<!ENTITY qmark.opt     "<option>-?</option>">
	<!ENTITY size.opt      "<option>--size</option>">
	<!ENTITY rename.opt    "<option>--rename</option>&nbsp;&shape.arg;&nbsp;&from.arg;&nbsp;&to.arg;">
	<!ENTITY suppress.opt  "<option>--suppress</option>&nbsp;&shape.arg;&nbsp;&name.arg;">
	<!ENTITY unit-file.opt "<option>--unit-file</option>&nbsp;&file.arg;">
	<!ENTITY version.opt   "<option>--version</option>">
	<!ENTITY warnings.opt  "<option>--warnings</option>">
	<!ENTITY basename.opt  "<option>--basename</option>">

	<!ENTITY include-library.opt     "<option>--include-library</option>&nbsp;&file.arg;">
	<!ENTITY all-hide-defined.opt    "<option>--all-hide-defined</option>">
	<!ENTITY match-basename.opt      "<option>--match-basename</option>">
	<!ENTITY hide-defined.opt        "<option>--hide-defined</option>&nbsp;&shape.arg;">
	<!ENTITY missing-definitions.opt "<option>--missing-definitions</option>">
	<!ENTITY rename-file.opt         "<option>--rename-file</option>&nbsp;&file.arg;">
	<!ENTITY debug-file.opt          "<option>--debug-file</option>&nbsp;&file.arg;">
	<!ENTITY output-file.opt         "<option>--output-file</option>&nbsp;&file.arg;">
	<!ENTITY suppress-all.opt        "<option>--suppress-all</option>&nbsp;&shape.arg;">
	<!ENTITY suppress-mult.opt       "<option>--suppress-mult</option>">
]>

<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<refentryinfo>
		<productname>tld</productname>
	</refentryinfo>

	<refmeta>
		<refentrytitle>tld</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv id='name'>
		<refname>tld</refname>
		<refpurpose>TDF linking and library manipulation utility</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<cmdsynopsis>
			<command>tld</command>

			<arg choice="opt">&ml.opt;</arg>

			<!-- Common options -->
			<group choice="opt">
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&debug-file.opt;</arg>
			</group>

			<!-- TDF options -->
			<group choice="opt">
				<arg choice="plain">&M.opt;</arg>
				<arg choice="plain">&suppress-mult.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&u.opt;</arg>
				<arg choice="plain">&unit-file.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&s2.opt;</arg>
				<arg choice="plain">&suppress.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&S.opt;</arg>
				<arg choice="plain">&suppress-all.opt;</arg>
			</group>
			<sbr/>

			<group choice="opt">
				<arg choice="plain">&o.opt;</arg>
				<arg choice="plain">&output-file.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&i2.opt;</arg>
				<arg choice="plain">&missing-definitions.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&a.opt;</arg>
				<arg choice="plain">&all-hide-defined.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&h.opt;</arg>
				<arg choice="plain">&hide.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&H.opt;</arg>
				<arg choice="plain">&hide-defined.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&k.opt;</arg>
				<arg choice="plain">&keep.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&K.opt;</arg>
				<arg choice="plain">&keep-all.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&r.opt;</arg>
				<arg choice="plain">&rename.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&R.opt;</arg>
				<arg choice="plain">&rename-file.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&w.opt;</arg>
				<arg choice="plain">&warnings.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&l.opt;</arg>
				<arg choice="plain">&library.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&L.opt;</arg>
				<arg choice="plain">&path.opt;</arg>
			</group>

			<sbr/>

			<arg rep="repeat" choice="plain">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tld</command>

			<arg choice="plain">&mc.opt;</arg>

			<!-- Common options -->
			<group choice="opt">
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&debug-file.opt;</arg>
			</group>

			<!-- TDF options -->
			<group choice="opt">
				<arg choice="plain">&M.opt;</arg>
				<arg choice="plain">&suppress-mult.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&u.opt;</arg>
				<arg choice="plain">&unit-file.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&s2.opt;</arg>
				<arg choice="plain">&suppress.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&S.opt;</arg>
				<arg choice="plain">&suppress-all.opt;</arg>
			</group>
			<sbr/>

			<group choice="opt">
				<arg choice="plain">&o.opt;</arg>
				<arg choice="plain">&output-file.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&include-library.opt;</arg>
			</group>

			<sbr/>

			<arg rep="repeat" choice="plain">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tld</command>

			<arg choice="plain">&mt.opt;</arg>

			<!-- Common options -->
			<group choice="opt">
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&debug-file.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&index.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&s1.opt;</arg>
				<arg choice="plain">&size.opt;</arg>
			</group>

			<sbr/>

			<arg rep="repeat" choice="plain">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tld</command>

			<arg choice="plain">&mx.opt;</arg>

			<!-- Common options -->
			<group choice="opt">
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&debug-file.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&a.opt;</arg>
				<arg choice="plain">&all.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&b.opt;</arg>
				<arg choice="plain">&basename.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&info.opt;</arg>
			</group>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&m.opt;</arg>
				<arg choice="plain">&match-basename.opt;</arg>
			</group>

			<sbr/>

			<arg rep="repeat" choice="plain">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tld</command>

			<group choice="opt">
				<arg choice="plain">&ml.opt;</arg>
				<arg choice="plain">&mc.opt;</arg>
				<arg choice="plain">&mt.opt;</arg>
				<arg choice="plain">&mx.opt;</arg>
			</group>
			<group choice="req">
					<arg choice="plain">&qmark.opt;</arg>
					<arg choice="plain">&help.opt;</arg>
					<arg choice="plain">&v.opt;</arg>
					<arg choice="plain">&version.opt;</arg>
			</group>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>The &tld; command is used to create and manipulate &tdf;
			libraries, and to link together &tdf; capsules.
			It has four modes:</para>

			<table>
				<col align="center"/>
				<col align="left"/>

				<thead>
					<tr>
						<th>Switch</th>
						<th>Mode</th>
					</tr>
				</thead>

				<tbody>
					<tr>
						<td>&ml.opt;</td>
						<td>Link &tdf; capsules (default)</td>
					</tr>
					<tr>
						<td>&mc.opt;</td>
						<td>Create &tdf; library</td>
					</tr>
					<tr>
						<td>&mt.opt;</td>
						<td>List &tdf; library contents</td>
					</tr>
					<tr>
						<td>&mx.opt;</td>
						<td>Extract capsules from &tdf; library</td>
					</tr>
				</tbody>
			</table>

		<para>If provided, the switch must be the first on the command line.
			If one is not provided, the &ml.opt; switch is assumed.</para>

		<para>The different modes are described below.
			In the description, external name definitions are referred to as
			unique and multiple.
			A unique definition is a definition where the defined attribute is
			set; a multiple definition is one where the multiple attribute is
			set (i.e. more than one definition is allowed).
			A definition may be both multiple and unique (if both bits are
			set - this means that there is more than definition, but one of them is
			unique).
			It is an error for there to be more than one unique definition of
			any given name.
			It is an error for token external names to have the multiple
			attribute set.</para>
	</refsection>

	<refsection>
		<title>Switches</title>

		<para>This version of &tld; accepts both short form and long form
			command line switches.</para>

		<para>Short form switches are single characters, and begin with a
			&hyphen.lit; or &plus.lit; character.
			They can be concatenated into a single command line word, e.g.:</para>

		<screen><option>-vor</option> &out-file.arg; &shape.arg; &from.arg; &to.arg;</screen>

		<para>which contains three different switches (<option>-v</option>, which takes no
			arguments; <option>-o</option>, which takes one argument: &out-file.arg;; and
			<option>-r</option>, which takes three arguments: &shape.arg;,
			&from.arg;, and &to.arg;).</para>

		<para>Long form switches are strings, and begin with
			<literal>--</literal> or <literal>++</literal>.
			With long form switches, only the shortest unique prefix need be entered.
			The long form of the above example would be:</para>

		<screen>&version.opt; <option>--output-file</option> &out-file.arg; <option>--rename</option> &shape.arg; &from.arg; &to.arg;</screen>

		<para>In most cases the arguments to the switch should follow the switch as a
			separate word.  In the case of short form switches, the arguments to the
			short form switches in a single word should follow the word in the order of
			the switches (as in the first example).  For some options, the argument may
			be part of the same word as the switch (such options are shown without a
			space between the switch and the argument in the switch summaries below).
			In the case of short form switches, such a switch would terminate any
			concatenation of switches (either a character would follow it, which would
			be treated as its argument, or it would be the end of the word, and its
			argument would follow as normal).</para>

		<para>For binary switches, the &hyphen.lit; or <literal>--</literal>
			switch prefixes set (enable) the switch, and the &plus.lit; or
			<literal>++</literal> switch prefixes reset (disable) the switch.
			This is probably back to front, but is in keeping with other programs.
			The switches <literal>--</literal> or <literal>++</literal> by
			themselves terminate option parsing.</para>

		<para>The following options are common to all modes:</para>

		<variablelist>
			<varlistentry>
				<term>&qmark.opt;</term>
				<term>&help.opt;</term>

				<listitem>
					<para>Write an option summary to the standard error.
						The exact options written out are specific to the
						particular mode under which &tld; is running.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&v.opt;</term>
				<term>&version.opt;</term>

				<listitem>
					<para>Write the version number of the program to the
						standard error stream.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>External Names</title>

		<para>An external name may be either a string or a unique.
			A unique is written as</para>

		<screen>&open-s.lit;<replaceable>component<subscript>1</subscript></replaceable>&dot.lit;<replaceable>component<subscript>2</subscript></replaceable>&dot.lit;&ellipsis.lit;&dot.lit;<replaceable>component<subscript>n</subscript></replaceable>&close-s.lit;</screen>

		<para>Each component of a unique is a string.
			A string consists of any sequence of characters, although some
			special characters must be preceded by a backslash character to
			stop them being treated specially.
			These characters are:</para>

			<table>
				<col align="center"/>
				<col align="left"/>

				<thead>
					<tr>
						<th>Sequence</th>
						<th>Meaning</th>
					</tr>
				</thead>

				<tbody>
					<tr>
						<td><literal>\[</literal></td>
						<td>Literal <literal>[</literal></td>
					</tr>
					<tr>
						<td><literal>\]</literal></td>
						<td>Literal <literal>]</literal></td>
					</tr>
					<tr>
						<td><literal>\.</literal></td>
						<td>Literal <literal>.</literal></td>
					</tr>
					<tr>
						<td><literal>\n</literal></td>
						<td>Newline</td>
					</tr>
					<tr>
						<td><literal>\r</literal></td>
						<td>Carriage return</td>
					</tr>
					<tr>
						<td><literal>\t</literal></td>
						<td>Tab</td>
					</tr>
					<tr>
						<td><literal>\ </literal></td>
						<td>Space</td>
					</tr>
					<tr>
						<td><literal>\x</literal><replaceable>AB</replaceable></td>
						<td>&ascii; character <replaceable>AB</replaceable>
							(in hex)</td>
					</tr>
				</tbody>
			</table>
	</refsection>

	<refsection>
		<title>Linking</title>

		<para>In the default mode, &tld; tries to link together the &tdf;
			capsules specified on the command line.
			This consists of the following stages:</para>

		<orderedlist>
			<listitem>
				<para>All of the external names specified for renaming on the
					command line are added to the name tables as indirections to
					their new names.</para>
			</listitem>

			<listitem>
				<para>All of the capsules specified on the command line are
					loaded, and their identifiers are mapped into a per shape
					namespace. In these namespaces, all external names of the
					same shape and with the same name will be mapped to the
					same identifier. &tld; will report errors about any attempt
					to link together more than one capsule providing a unique
					definition for any external name.</para>
			</listitem>

			<listitem>
				<para>If any libraries were specified on the command line, then the libraries are
					loaded to see what definitions they provide.  After loading the libraries,
					the external names specified for link suppression on the command line are
					removed from the library index (so that the linker will not attempt to
					define those names).  Link suppression does not prevent a name from being
					defined, it just stops the linker trying to define it; a definition for it
					may still be found from a capsule that is loaded to define another name.</para>

				<para>Any capsules that provide necessary definitions are loaded.  There must only
					be one definition for each external name in all of the libraries (in the
					case of all non-token shapes, this may be either one non-unique definition,
					or one unique definition with zero or more non-unique definitions; if a
					unique definition exists, then the non-unique definitions are ignored).</para>
			</listitem>

			<listitem>
				<para>If any external names require hiding or keeping (specified by command line
					switches), then they are hidden at this point.  Hiding means removing the
					external name from the external name list.  It is illegal to hide undefined
					external names.  Keeping means keeping an external name in the external name
					tables.  Keeping a name overrides any attempt to hide that name.</para>
			</listitem>

			<listitem>
				<para>A new &tdf; capsule is created, consisting of all of the
					input capsules and the necessary library capsules.
					Unless specified with the <option>--output-file</option>
					switch, the output file will be called
					<filename>capsule.j</filename>.</para>
			</listitem>
		</orderedlist>

		<para>&tld; accepts the following switches in link mode:</para>

		<variablelist>
			<varlistentry>
				<term>&a.opt;</term>
				<term>&all-hide-defined.opt;</term>

				<listitem>
					<para>Hide all external names (of any shape) that are defined.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&d.opt;</term>
				<term>&debug-file.opt;</term>

				<listitem>
					<para>Produce a diagnostic trace of the linking process in
						&file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&h.opt;</term>
				<term>&hide.opt;</term>

				<listitem>
					<para>Cause the external &shape.arg; name &name.arg; to be
						hidden.
						An error is reported if the name is not defined.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&H.opt;</term>
				<term>&hide-defined.opt;</term>

				<listitem>
					<para>Cause the all external &shape.arg; names that are
						defined to be hidden.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&i2.opt;</term>
				<term>&missing-definitions.opt;</term>

				<listitem>
					<para>Warn about undefined external linker names. These warnings are
						disabled by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&k.opt;</term>
				<term>&keep.opt;</term>

				<listitem>
					<para>Cause the external &shape.arg; name &name.arg; to be
						kept.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&K.opt;</term>
				<term>&keep-all.opt;</term>

				<listitem>
					<para>Cause the all external &shape.arg;
						names to be kept.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&l.opt;</term>
				<term>&library.opt;</term>

				<listitem>
					<para>Use the file &file.arg; as a &tdf; library.
						If the file name contains a '/', then it is used as specified;
						if not, the library search path is searched for a file named
						'&file.arg;.tl'.
						Duplicate entries for the same library are ignored.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&o.opt;</term>
				<term>&output-file.opt;</term>

				<listitem>
					<para>Write the output capsule to the file &file.arg;.
						If this switch is not specified, then the output is written
						to the file 'capsule.j' instead.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&L.opt;</term>
				<term>&path.opt;</term>

				<listitem>
					<para>Append the directory &dir.arg; to the library search
						path.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&r.opt;</term>
				<term>&rename.opt;</term>

				<listitem>
					<para>Rename the external &shape.arg; name &from.arg;
						to &to.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&R.opt;</term>
				<term>&rename-file.opt;</term>

				<listitem>
					<para>Read the contents of the file &file.arg; as a series
						of renaming specifications.
						The format of the file is described above.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s2.opt;</term>
				<term>&suppress.opt;</term>

				<listitem>
					<para>Do not try to find a definition for the external
						&shape.arg; name &name.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S.opt;</term>
				<term>&suppress-all.opt;</term>

				<listitem>
					<para>Do not try to find a definition for any external
						&shape.arg; name.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&M.opt;</term>
				<term>&suppress-mult.opt;</term>

				<listitem>
					<para>Do not use non-unique definitions in libraries as
						definitions for external names.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&u.opt;</term>
				<term>&unit-file.opt;</term>

				<listitem>
					<para>Parse &file.arg; to get a new unit set name list.
						By default, all of the standard (as specified in the
						version 4.0 &tdf-spec.doc;) unit set names are
						known.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&w.opt;</term>
				<term>&warnings.opt;</term>

				<listitem>
					<para>Enable/disable the printing of warning messages.
					Warnings are generated for things like obsolete linker
					information units, and undefined external names when $i2.opt;
					is enabled.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Library Construction</title>

		<para>A &tdf; library is a sequence of named capsules, with an index.  The index
			indicates which external names are defined by the capsules in the library,
			and which capsules provide the definitions.
			When invoked with the &mc.opt; switch, &tld; produces a library
			consisting of the &tdf; capsules specified on the command line.
			The library is written to the file <filename>library.tl</filename>,
			unless the <option>--output-file</option> switch is used.</para>

		<para>&tld; accepts the following switches in library construction mode:</para>

		<variablelist>
			<varlistentry>
				<term>&d.opt;</term>
				<term>&debug-file.opt;</term>

				<listitem>
					<para>Produce a diagnostic trace of the library construction
						process in &file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&i.opt;</term>
				<term>&include-library.opt;</term>

				<listitem>
					<para>Include all of the capsules in the &tdf; library
						&file.arg; in the library being constructed.
						The library name should be a proper file name, not a library
						abbreviation like the <option>--library</option> switch used
						by the linking mode.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&o.opt;</term>
				<term>&output-file.opt;</term>

				<listitem>
					<para>Write the output library to the file &file.arg;.
						If this switch is not specified, then the output is written
						to the file <filename>library.tl</filename> instead.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s2.opt;</term>
				<term>&suppress.opt;</term>

				<listitem>
					<para>Do not try to find a definition for the external
						&shape.arg; name &name.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S.opt;</term>
				<term>&suppress-all.opt;</term>

				<listitem>
					<para>Do not try to find a definition for any external
						&shape.arg; name.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&M.opt;</term>
				<term>&suppress-mult.opt;</term>

				<listitem>
					<para>Do not use non-unique definitions in libraries as
						definitions for external names.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&u.opt;</term>
				<term>&unit-file.opt;</term>

				<listitem>
					<para>Parse &file.arg; to get a new unit set name list.
						By default, all of the standard (as specified in the
						version 4.0 &tdf-spec.doc;) unit set names are
						known.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Library Contents</title>

		<para>When invoked with the <option>-mt</option> switch,
			&tld; produces a listing of the contents of the &tdf;
			library specified on the command line.</para>

		<para>&tld; accepts the following switches in library contents mode:</para>

		<variablelist>
			<varlistentry>
				<term>&d.opt;</term>
				<term>&debug-file.opt;</term>

				<listitem>
					<para>Produce a diagnostic trace of the library contents
						process in &file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&i.opt;</term>
				<term>&index.opt;</term>

				<listitem>
					<para>Enable/disable the printing of the index of the library.
						If printing of the index is enabled, the index of the library
						will be printed.  The order of the shapes and external names
						in the printed index is not necessarily the same as the order
						of the index in the library itself.
						If the order is important, use the
						<option>--debug-file</option> option and
						look at the output that is produced.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s1.opt;</term>
				<term>&size.opt;</term>

				<listitem>
					<para>Enable/disable the printing of the size of each
						capsule in the library.
						If enabled, the size of each capsule in bytes is printed
						after its name.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Library Extraction</title>

		<para>When invoked with the <option>-mx</option> switch, &tld;
			extracts capsules from the &tdf; library specified as the first
			file on the command line.
			The names of the capsules to extract should follow the library name.
			If capsule names are specified, they must match exactly the names
			of the capsules in the library (use the <option>-mt</option> mode
			switch to find out what the exact names are).
			The capsules are normally extracted relative to the current
			directory, using the name of the capsule as the output file name.
			The linker will try to create any directories on the extracted
			capsule's path name (in some implementations of the linker this may
			not be supported, in which case the directories will need to be
			created manually before extraction).
			The extracted capsules will overwrite existing files of
			the same name.</para>

		<para>&tld; accepts the following switches in library extraction
			mode:</para>

		<variablelist>
			<varlistentry>
				<term>&a.opt;</term>
				<term>&all.opt;</term>

				<listitem>
					<para>Enable/disable the extraction of all capsules.
						If all capsules are to be extracted, no capsule names
						should be specified on the command line.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&b.opt;</term>
				<term>&basename.opt;</term>

				<listitem>
					<para>Enable/disable the use of the basename of each capsule
						when extracting.  If this is enabled, then extracted capsules
						are extracted into the current directory, using just their
						basename.  This may cause some of the capsules to be written
						on top of each other.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&d.opt;</term>
				<term>&debug-file.opt;</term>

				<listitem>
					<para>Produce a diagnostic trace of the library extraction
						process in &file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&i.opt;</term>
				<term>&info.opt;</term>

				<listitem>
					<para>Enable/disable informational messages.
						These say which capsules are being extracted.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&m.opt;</term>
				<term>&match-basename.opt;</term>

				<listitem>
					<para>Enable/disable matching of capsule names by basename.
						If enabled, then the basename of each library capsule is
						also matched against the file names specified.
						This may result in more than one capsule being extracted
						for one file name.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&tcc;, &tld.5;.</para>

		<para>&tdf-spec.doc;.</para>
	</refsection>
</refentry>

