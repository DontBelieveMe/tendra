# TenDRA make build infrastructure
#
# $Id$

.if !defined(_TENDRA_WORK_API_MK_)
_TENDRA_WORK_API_MK_=1

.include <tendra.base.mk>
.include <tendra.functions.mk>

.if !defined(API)
.BEGIN:
	@${ECHO} '$${API} must be set'
	@${EXIT} 1;
.endif

# XXX: assert on APILIB and APIOBJS for target(makeapi)



#
# External dependencies
#

${OBJ_DIR}/${TOKENS_COMMON}/c_toks.j:
	@cd ${BASE_DIR}/${TOKENS_MACH} && ${MAKE} ${.TARGET}

${OBJ_DIR}/${TOKENS_MACH}/sys.j:
	@cd ${BASE_DIR}/${TOKENS_MACH} && ${MAKE} ${.TARGET}



#
# Rules proper
#

_objdir=	${OBJ_DIR}/${APIS}

${_objdir}:
	${MKDIR} -p ${.TARGET}

JOPTS= -Y32bit -I${BASE_DIR}/src/lib/machines/${OSFAM}/${BLDARCH}/include \
	-I/usr/include -f${BASE_DIR}/${STARTUP_MACH}/${API}.h -D__BUILDING_LIBS

# Include Makefile generated by tspec during api-depend.
.if exists(${_objdir}/building/${API}.api/Makefile)
. include "${_objdir}/building/${API}.api/Makefile"
.endif

# Make tspec-generated paths relative to objdir
.if "${APIOBJS}" != ""
APIOBJS:=	${APIOBJS:C/^/${_objdir}\//g}
APILIB:= 	${APILIB:C/^/${_objdir}\//g}
.endif


.for obj in ${APIOBJS}
${obj}: ${obj:R}.c
	@${ECHO} "==> Compiling ${API}/${obj:T:R}.c"
	${TCC} ${TCCOPTS} ${CCOPTS} ${JOPTS} -o ${.TARGET} ${.ALLSRC} -Ymakelib
.endfor


# TODO: For the moment, I'm linking sys.j in with each ${API}.tl (per API).
# However, since sys.j is not specific to each API (rather, it is specific to
# each producer's language), I think it makes more sense to install this as a
# separate .tl library, and to have tld explicitly link against it, along with
# linking against an API. I think this is what was done historically, since
# lib/machines/README from the 4.1.2 release mentions "This gives a capsule
# sys.j which defines the producer interface. This capsule is linked into the
# C producer TDF library, c.tl." Careful to avoid name clashes with APIs;
# perhaps we should have a directory just for "producer interface" libraries.
# Is this also used by C++?
APIOBJS+=	${OBJ_DIR}/${TOKENS_MACH}/sys.j


makeapi: ${APILIB}

# built from ${API}.api/Makefile
${APILIB}: ${APIOBJS}
	@${ECHO} "==> Linking ${API} API"
	${TLD} -mc -o ${APILIB} ${APIOBJS}



#
# User-facing targets
#

all:: ${_objdir}
	@${ECHO} "==> Creating API source for ${API}"
	@cd ${_objdir} && ${TSPEC} -v -I${BASE_DIR}/${APIS} -O. -S./building ${API}
	@cd ${BASE_DIR}/${APIS}/${API}/ && ${.MAKE} makeapi ${.MAKEFLAGS}


clean::
	@cd ${BASE_DIR}/${TOKENS_MACH} && ${MAKE} clean
	${REMOVE} ${_objdir}/building/${API}.api/Makefile ${APILIB} \
		${APIOBJS} ${APIOBJS:S/.j/.c/}


# Relative to .OBJDIR.
CAPIDIR=${_objdir}/building
SAPIDIR=${_objdir}/shared
HAPIDIR=${_objdir}

# Absolute target dirs.
SINSTDIR=${INSTALL_DIR}/lib/include/shared
HINSTDIR=${INSTALL_DIR}/lib/include
CINSTDIR=${INSTALL_DIR}/lib/building
LINSTDIR=${INSTALL_DIR}/lib

install::
	@${ECHO} "==> Installing ${API} API"
	${CONDCREATE} "${HINSTDIR}" "${CINSTDIR}" "${LINSTDIR}"
.if exists(${SAPIDIR}/${API}.api)
	${CONDCREATE} "${SINSTDIR}"
.endif
	${INSTALL} -m 644 ${_objdir}/${API}.tl ${LINSTDIR}
	@cd ${HAPIDIR} && ${FIND} ${API}.api -name '.*' -prune -o -print |      \
	while read file; do                                                     \
		if ${TEST} -d $${file}; then                                        \
			${ECHO} ${INSTALL} -m 755 -d ${HINSTDIR}/$${file};              \
			${INSTALL} -m 755 -d ${HINSTDIR}/$${file} || ${EXIT} $$?;       \
		else                                                                \
			${ECHO} ${INSTALL} -m 644 $${file} ${HINSTDIR}/$${file};        \
			${INSTALL} -m 644 $${file} ${HINSTDIR}/$${file} || ${EXIT} $$?; \
		fi;                                                                 \
	done



.endif	# !defined(_TENDRA_WORK_API_MK_)
