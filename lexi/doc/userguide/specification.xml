<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd" [
	<!ENTITY lexi.app "<application>Lexi</application>">
]>

<!--
  $Id$
-->

<chapter id="specification">
	<title>The Lexi Specification</title>	<!-- TODO: term -->

	<para>There are several concepts common to multiple commands.
		<!---TODO: blah blah --></para>

	<section id="lexicalconventions">
		<title>Lexical Conventions</title>

		<!-- <para>TODO: explain our BNF here. Standardise across
			all documents. we can centralise this to some shared
			document. Is there and RFC perhaps which defines a
			BNF dialect we can use? RFC 2234 looks to be it</para> -->

		<para>The following productions are used throughout this
			document:</para>

		<programlisting language="bnf">either-identifier   := sid-identifier | function-identifier | literal-identifier;
sid-identifier      := "$" + identifier ;
literal-identifier  := identifier ;
function-identifier := identifier + "(" + ")" ;</programlisting>
		<!-- TODO: rename either-identifier! -->

		<para>And for brevity , the following groups are defined:</para>

		<programlisting language="lxi">GROUP alpha    = {A-Z} + {a-z} + "_" ;
GROUP digit    = {0-9} ;</programlisting>
	</section>

	<section id="comments">
		<title>Comments</title>

		<para>&lexi.app; permits comments in lexical analyser
			specifications. These are C style comments, opening
			<code>/*</code> and closing <code>*/</code>. They may not
			nest, and they must close. 
			Since version 2.0, &lexi.app; supports
		        <code>//</code> style comments.specifications. These are C++ style comments, opening
			<code>//</code> and extending to the end of the line. For example:</para>

		<!-- TODO: did i add the // patch already? I don't think so -->
		<programlisting language="lxi">/* This is a comment */
/*
 * And so is this.
 */
// And this is a C++ style comment too</programlisting>

	<!-- OBSOLETE	<para>The first comment, intended for a copyright notice, is
			written out at the beginning of the generated code.</para> -->
	</section>

	<section id="identifiers">
		<title>Identifiers</title>

		<para><!-- TODO: explain what identifiers are used for --></para>

		<para>An identifier is a sequence of alphanumeric characters
			including the underscore beginning by an underscore or
			an alphabetic character. A $sid; identifier may also contain
			(but not begin with) a hyphen.</para>

		<para><!-- TODO: somewhere we need a section to explain
			identifiers and namespaces (i.e. where one may
			conflict). List namespaces here.--></para>

		<para>Literal identifiers have no prefix symbol; their
			names are used verbatim. They may be used for defining
			groups, keywords and tokens. They may also be
			used for conditional statements and for the names
			of functions to be called.</para>

<!-- TODO: i think literal identifiers are gone, now
		<note>
			<para>It is likely that literal identifiers
				used for keywords and tokens will be
				disallowed in future versions of
				&lexi.app;; they appear to serve
				no purpose over Sid identifiers in those cases.</para>
				TODO: wherein we mention that -l '' is valid
				However, we keep literal identifiers for other uses
		</note>
-->

		<para>Sid identifiers are prefixed <literal>$</literal>.
			They may contain a hyphen. Since hyphens are not
			valid preprocessor or variable identifiers for
			C<!-- XXX assuming generated code is C -->, the
			hyphens are substituted with <literal>_H</literal>.
			So for example the identifier <literal>$a-b</literal>
			would become <literal>a_Hb</literal> in the generated
			code, prefixed with <option>-t</option> to become
			<literal>lex_a_Hb</literal>.<!-- reading the code to
			figure that out is simpler than understanding my
			writing style :( --></para>

		<para>Sid identifiers may be used for defining
			keywords and tokens only.</para>
	</section>

	<section id="functioncalls">
		<title>Function Calls</title>

		<para>The parameters specified to functions are stated as empty
			(that is, an open bracket immediately followed by a close
			bracket).</para>

		<para>Do not confuse function names with <application>Sid</application>
			Identifiers.
			<!-- TODO: when we define sid identifiers, share text with the sid guide -->
			For instance, <literal>$get-comment()</literal> is not
			a legal function.</para>

		<para>It is rare that the character values read by a token
			would need to be identified by a function reading
			these characters. However, they are passed as arguments
			so that the characters are available. This is a convenience
			so that two similar tokens may share  the same function:</para>

		<programlisting language="lxi">TOKEN "/*" -> get_comment () ;
TOKEN "//"  -> get_comment () ;</programlisting>

		<para>In the above example the function is called as
			either <code>get_comment('/', '*')</code> or as
			<code>get_comment('/', '/')</code>, depending on which
			token was matched. In this way, <code>get_comment()</code>
			can decide which type of comment it is expected to
			retrieve, and therefore handle the differences appropiately.</para>

		<para>The parameters passed to the function are the characters
			read to match the token, as separate <code>int</code> variables.
			So for the above example, <code>get_comment()</code> would be
			declared as:</para>

		<programlisting language="c">void get_comment(int c0, int c1);</programlisting>

		<para>Calling a function from two tokens of different lengths
			is undefined behaviour.</para>

		<!--
		TODO: when releasing Check history; maybe sid can keep the same version number.
		-->
	</section>

	<section id="charactersetssequences">
		<title>Character Sets and Sequences</title>

		<para>Sets and sequences of characters are used by
			<!-- TODO: right? --> all &lexi.app; commands. <!--
			TODO: and possibly also pre-pass replacements? --> They share
			the same syntax, but have different meanings: a set is an
			unordered intersection of all characters specified, whereas
			a sequence is a sequence which must be entirely present in
			the order given, as per a string comparison. The syntax
			is:</para>

		<programlisting language="bnf">chars       := item + { "+" item } * ;
item        := string | range ;
range       := "{0-9}" | "{a-z}" | "{A-Z}" ;
string      := &lt;"&gt; + { CHAR | escapedchar | group } * + &lt;"&gt; ;
escapedchar := "\" + ( "n" | "t" <!-- | "TODO etc" --> ) ;
group       := "[" + GROUPNAME + "]" ;</programlisting>
<!-- TODO: standardised BNF -->

<!--
		<bridgehead>Ranges</bridgehead>
-->

		<para>There are three available pre-defined ranges.
			Note that these ranges are fixed, and that start points
			or end points other than those given are invalid.
			These ranges are:</para>

		<table>
			<title>Predefined Character Ranges</title>

			<col align="center"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Range</th>
					<th>Contents</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>{0-9}</code></td>
					<td>The digits 0 to 9.</td>
				</tr>
				<tr>
					<td><code>{a-z}</code></td>
					<td>The lower case characters a to z.</td>
				</tr>
				<tr>
					<td><code>{A-Z}</code></td>
					<td>The upper case characters a to z.</td>
				</tr>
			</tbody>
		</table>

		<para>Ranges are inclusive. The numeric values of the
			characters includes in ranges are of the
			character set of the C implementation used to compile
			&lexi.app; (it is reasonable to assume this is <acronym>ASCII</acronym>).
			Note that the <code>range</code> production always
			represents a set (as opposed to a sequence), even when used as
			part of a <code>TOKEN</code>
			command.<!-- TODO: unclear and true? --></para>

		<para>Strings are sequences of <acronym>ASCII</acronym> <!-- TODO: right? -->
			characters delimited by double-quotes (<code>"</code>).</para>

<!--
		<bridgehead>Escaping special characters in strings</bridgehead>
-->
		<!-- TODO: strings or sequences and sets? -->

		<para>The following special characters may be written by
			backslash escapes:</para>

		<table>
			<title>Escaped Characters</title>
			<!-- TODO: really ASCII, or is it the execution character set? -->

			<col align="center"/>
			<col align="center"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Escape</th>
					<th><acronym>ASCII</acronym> Value</th>
					<th>Name</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>\t</code></td>
					<td>0x09</td>
					<td>Horizontal tab</td>
				</tr>

				<tr>
					<td><code>\n</code></td>
					<td>0x0A</td>
					<td>New line</td>
				</tr>

				<tr>
					<td><code>\v</code></td>
					<td>0x0B</td>
					<td>Vertical tab</td>
				</tr>

				<tr>
					<td><code>\f</code></td>
					<td>0x0C</td>
					<td>New page (form feed)</td>
				</tr>

				<tr>
					<td><code>\r</code></td>
					<td>0x0D</td>
					<td>Carriage return</td>
				</tr>

				<tr>
					<td><code>\"</code></td>
					<td>0x22</td>
					<td>Double quote</td>
				</tr>

				<tr>
					<td><code>\[</code></td>
					<td>0x5B</td>
					<td>Left bracket<!-- TODO: right? --></td>
				</tr>

				<tr>
					<td><code>\\</code></td>
					<td>0x5C</td>
					<td>Backslash</td>
				</tr>

				<tr>
					<td><code>\e</code></td>
					<td role="na" align="center">&ndash;<!-- TODO: applicable here? --></td>
					<td>End of file (EOF)</td>
				</tr>
			</tbody>
		</table>

		<para>For example, a string specifying the character
			<quote>a</quote>, a newline, the character
			<quote>b</quote>, a backslash, a horizontal
			tab, and the character <quote>c</quote> is:</para>

		<programlisting language="lxi">"a\nb\\\tc"</programlisting>

		<para>Strings must contain at least one character, or
			one character coded for by an escape sequence.
			Empty strings are not permitted.</para>
		<!-- TODO: adjust grammar to error for empty strings -->
		<!-- TODO: NEW UNDEFINED BEHAVIOUR -->

		<para>These escape sequence may be used in any string.
			Note that "[" requires escaping to distinguish from
			the delimiter for a group name (see below).</para>

<!--
		<bridgehead id="groupinclusion">Group inclusions in
			strings</bridgehead>
-->
		<!-- TODO: strings or sequences and sets? -->

		<para>A set of characters defined by a <literal>GROUP</literal>
		 	command may be included into a character set
			by specifying the group name between <code>[</code>
			and <code>]</code> within a string.  For example:</para>

		<programlisting language="lxi">"[xyz]"
"abc[def]hij[klm]nmo"</programlisting>

		<para>These include the characters defined by the
			<quote>xyz</quote> group to the first string, and
			from the <quote>def</quote> and <quote>klm</quote>
			groups to the second string. It makes no difference
			if the string is a set or a sequence; the groups included
			are always treated as a set, even though the rest
			of the string may be a sequence.</para>

		<para>The group to be included must
			already have been defined at the point where it is
			referenced. Note that this does not permit circular
			references.</para>

		<para>See <!-- TODO: link --> the commands below for
			further examples of character sets and
			sequences<!-- TODO: terminology: sets and sequences? --></para>

<!--
		<bridgehead id="concatenation">String concatenation</bridgehead>
-->
		<!-- TODO: we can't call it concatenation really. why would you need concatenation
			for sequences? perhaps disallow it there and call it "set union" instead. -->

		<para>Strings and ranges may be concatenated by the
			plus operator.  For example:</para>

		<programlisting language="lxi">"abc" + "d" + "efg" + {0-9}</programlisting>

		<para>is equivalent to the sequence:</para>

		<programlisting language="lxi">"abcdefg[digit]"</programlisting>

		<para>(where the group <quote>digit</quote> is suitably
			defined), and to the set:</para>

		<programlisting language="lxi">"abcdefg0123456789"</programlisting>
	</section>
</chapter>

