/*
 * Copyright (c) 2002-2005 The TenDRA Project <http://www.tendra.org/>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of The TenDRA Project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific, prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 */

HEADERS = @{

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <shared/error.h>
#include <shared/xalloc.h>

#include "lexer.h"
#include "syntax.h"
/*
	THE CURRENT LEXER STATE
*/
struct lexi_state lexer_state;

/*
    TOKEN BUFFER

    This buffer is used by read_token to hold the values of identifiers
    and strings.
*/
char token_buff [2000];
char *token_end = token_buff + sizeof(token_buff);
static char* token_current;
unsigned int number_buffer;

/*
    CURRENT TOKEN

    These variables are used by the parser to hold the current and former
    lexical tokens.
*/

int crt_lex_token;
int saved_lex_token;

#define lexi_unknown_token	lex_unknown

/*
    GET THE NEXT CHARACTER

    This routine reads the next character, either from the pending buffer
    or from the input file.
*/

static int
lexi_getchar(struct lexi_state* state)
{
    int c;
    c = fgetc(state->input);
    if (c == '\n')crt_line_no++;
    if (c == EOF) return LEXI_EOF;
    c &= 0xff;
    return c;
}

@} , @{
#include <stdio.h> /*TODO This is necessary because lexi automatically prepend #include "lexer.h" to the header. Maybe we should remove this unecessary feature*/

extern char token_buff [];
extern char *token_end;
extern int crt_lex_token;
extern int saved_lex_token;
extern unsigned int number_buffer;
extern struct lexi_state lexer_state;

typedef FILE* FILE_P ;

/*
     PARSER MACROS
*/

#define CURRENT_LXI_TERMINAL	crt_lex_token
#define ADVANCE_LXI_LEXER		crt_lex_token = lexi_read_token(&lexer_state)
#define SAVE_LXI_LEXER(T)       (saved_lex_token = crt_lex_token,\
                                  crt_lex_token = (T))
#define RESTORE_LXI_LEXER          (crt_lex_token = saved_lex_token)
@};

TRAILERS = @{
@},@{
@} ;

ARGUMENT input:FILE_P ;

MAP TERMINAL -> int;

ACTION init_token_buffer = @{
	token_current=token_buff;
@};

ACTION push_token_buffer : (c:CHARACTER) -> () = @{
       	if(token_current==token_end-1)
		error(ERROR_FATAL, "Buffer overflow");
	else 
	       *token_current++ = @c;
@};

ACTION finalize_token_buffer = @{
       	if(token_current==token_end) {
		error(ERROR_FATAL, "Buffer overflow: trailing 0");
	       *(token_end-1) = 0;		
	} else {
	       *token_current++ = 0;	
	}
@};

ACTION token_keyword_match : (ti:TERMINAL) -> (to:TERMINAL) = @{
	@to = lexi_keyword(token_buff, @ti);
@};

ACTION E_eof_in_string = @{
	error(ERROR_SERIOUS, "Unexpected eof in string");
@};

ACTION E_newline_in_string = @{
	error(ERROR_SERIOUS, "Unexpected newline in string");
@};


ACTION number_buffer_init : () -> () = @{
	number_buffer = 0;
@};

ACTION number_buffer_push_digit : (c:CHARACTER) -> () = @{
	number_buffer *= 10;
	number_buffer += @c - '0';
@};
