/*
 * Copyright (c) 2002-2005 The TenDRA Project <http://www.tendra.org/>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of The TenDRA Project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific, prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 */

HEADERS = @{
/* Cfile lct header */
@} , @{
/* Hfile lct header */
@};

TRAILERS = @{
/* Cfile lct trailer */
@},@{
/* Hfile lct trailer */
@} ;

MAP TERMINAL -> int;


ACTION get_string : () -> (a:TERMINAL) = @{
	int c;
	int escaped = 0;
	char *t = token_buff;
	while (c = lexi_readchar(&lexer_state), (c != '"' || escaped)) {
		if (c == '\n' || c == LEXI_EOF) {
			error(ERROR_SERIOUS, "Unexpected end of string");
			break;
		}
		*(t++) = (char)c;
		if (t == token_end) error(ERROR_FATAL, "Buffer overflow");
		if (escaped) {
			escaped = 0;
		} else {
			if (c == '\\') escaped = 1;
		}
	}
	*t = 0;
	@a = lex_string; 
@};

ACTION get_sid_identifier : (c:CHARACTER) -> (a:TERMINAL) = @{
       @a = read_identifier(@c, 1);
@};

ACTION get_identifier : (c:CHARACTER) -> (a:TERMINAL) = @{
       @a = read_identifier(@c, 0);
@};

ACTION read_arg_char_nb : (c:CHARACTER) -> (a:TERMINAL) = @{
	int c;
	number_buffer = @c - '0'; /*TODO do this in a safe way that does not assume ASCII or a coding where digits are contiguous*/
	while(isdigit(c=lexi_readchar(&lexer_state))){
		number_buffer*=10;
		number_buffer += c - '0'; /*TODO do this in a safe way that does not assume ASCII or a coding where digits are contiguous*/
	}
	lexi_push(&lexer_state, c);
	@a=lex_arg_Hchar_Hnb;
@};
