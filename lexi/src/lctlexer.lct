/*
 * Copyright (c) 2002-2005 The TenDRA Project <http://www.tendra.org/>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of The TenDRA Project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific, prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 */

HEADERS = @{
#include "lctlexer.h"
#include "lctsyntax.h"
#include "error/error.h"

int crt_lct_token ;
int saved_lct_token ;

char lct_token_buff [2000];
static char *lct_token_end = lct_token_buff + sizeof(lct_token_buff);
static char* lct_token_current;

NStringT lct_token_nstring;

struct lexi_lct_state lct_lexer_state;

static int 
lexi_lct_getchar(struct lexi_lct_state* state) 
{
	int c =fgetc(state->input);
	if(c == '\n') 
		crt_line_no++;
	if(c == EOF) 
		return LEXI_EOF;
	return c;
}

@} , @{
#include <stdio.h>
#include "lctsyntax.h"

typedef FILE* FILE_P_lct ;

extern char lct_token_buff [];
extern int crt_lct_token ;
extern int saved_lct_token ;
extern lct_parse_tree global_lct_parse_tree ;

extern struct lexi_lct_state lct_lexer_state;
extern NStringT lct_token_nstring;


/*
     PARSER MACROS
*/

#define CURRENT_LCT_TERMINAL	crt_lct_token
#define ADVANCE_LCT_LEXER		crt_lct_token = lexi_lct_read_token(&lct_lexer_state)
#define SAVE_LCT_LEXER(T)       (saved_lct_token = crt_lct_token,\
                                  crt_lct_token = (T))
#define RESTORE_LCT_LEXER          (crt_lct_token = saved_lct_token)
@};

TRAILERS = @{
@},@{
@} ;

MAP TERMINAL -> int;

ARGUMENT input:FILE_P_lct ;

ACTION init_token_buffer = @{
	lct_token_current=lct_token_buff;
@};

ACTION push_token_buffer : (c:CHARACTER) -> () = @{
       	if(lct_token_current==lct_token_end-1)
		error(ERROR_FATAL, "Buffer overflow");
	else 
	       *lct_token_current++ = @c;
@};

ACTION finalize_token_buffer = @{
       	if(lct_token_current==lct_token_end) {
		error(ERROR_FATAL, "Buffer overflow: trailing 0");
	       *(lct_token_end-1) = 0;		
	} else {
	       *lct_token_current++ = 0;	
	}
@};

ACTION token_keyword_match : (ti:TERMINAL) -> (to:TERMINAL) = @{
	@to = lexi_lct_keyword(lct_token_buff, @ti);
@};

ACTION get_code_lct_string : (c:CHARACTER) -> (a:TERMINAL) = 
@{
	int c = @c;
	DStringT dstring;
	dstring_init(&dstring);
	do {
		dstring_append_char(&dstring, c) ;
		c = lexi_lct_readchar(&lct_lexer_state);
        } while(c!='@@' && c!=LEXI_EOF) ;

	lexi_lct_push(&lct_lexer_state, c);
	
	dstring_to_nstring(&dstring,&lct_token_nstring);
	dstring_destroy(&dstring);
	@a = lct_lex_code_Hstring;
@} ;