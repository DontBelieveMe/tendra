# $Id$

INSTALL=install
LEXI=lexi
REMOVE=rm -f
MOVE=mv
SID=sid

CFLAGS+=-Ishared -I.
LDFLAGS+=-Lshared/error -Lshared/xalloc -L. 
LEXIFLAGS+=-lC99 -a
SIDFLAGS+=-s no-line

PREFIX?=/usr/local
BINDIR?=${PREFIX}/bin

TARGETS=syntax.o lexer.o main.o options.o output.o lctlexer.o lctsyntax.o adt.o ccode.o localnames.o

all: lexi

lexi: depend ${TARGETS} output-c/output-c.a output-dot/output-dot.a adt/adt.a
	${CC} ${LDFLAGS} -o $@ ${TARGETS} \
		-lerror -lxalloc -lexds output-c/output-c.a output-dot/output-dot.a adt/adt.a

# TODO should this be under depend: instead?
output-c/output-c.a:
	cd output-c && ${MAKE} all

adt/adt.a:
	cd adt && ${MAKE} all

output-dot/output-dot.a:
	cd output-dot && ${MAKE} all

depend:
	cd shared && ${MAKE} -f makefile.standalone

# Remove only what's generated by a normal build except for configurations
clean:
	${REMOVE} ${TARGETS} lexi
	cd shared && ${MAKE} -f makefile.standalone clean
	cd output-c && ${MAKE} clean
	cd output-dot && ${MAKE} clean
	cd adt && ${MAKE} clean

# Remove everything not in the distribution
distclean:

# Remove generated files that are in the distribution
maintainer-clean:
	${REMOVE} lexer.c lexer.h syntax.h syntax.c lctsyntax.c lctsyntax.h lctlexer.c lctlexer.h

install: lexi
	${INSTALL} -m 755 -d ${BINDIR}
	${INSTALL} -m 755 lexi ${BINDIR}/

lexer.o: lexer.h
syntax.o: lexer.h

lexer.o main.o syntax.o : syntax.h
main.o : output-c/c-output.h output-dot/dot-output.h lctlexer.h lexer.h lctsyntax.h
main.o options.o : options.h
lctlexer.o : lctsyntax.h lctlexer.h

lexer.c lexer.h: lexer.lxi lexer.lct COPYING
	-${MOVE} lexer.c sav.lexer.c 
	-${MOVE} lexer.h sav.lexer.h
	${LEXI} ${LEXIFLAGS} lexer.lxi lexer.lct lexer.c lexer.h \
		|| ( ${MOVE} sav.lexer.c lexer.c ; ${MOVE} sav.lexer.h lexer.h ; exit 1 )

lctlexer.c lctlexer.h: lctlexer.lxi lctlexer.lct COPYING
	-${MOVE} lctlexer.c sav.lctlexer.c
	-${MOVE} lctlexer.h sav.lctlexer.h
	${LEXI} ${LEXIFLAGS} -t lct_lex_ -p lexi_lct_ lctlexer.lxi lctlexer.lct lctlexer.c lctlexer.h \
		|| ( ${MOVE} sav.lctlexer.c lctlexer.c ; ${MOVE} sav.lctlexer.h lctlexer.h ; exit 1 )



syntax.h: syntax.c

syntax.c: syntax.sid syntax.act
	@${REMOVE} syntax.h syntax.c
	${SID} ${SIDFLAGS} syntax.sid syntax.act tmp.syntax.c tmp.syntax.h \
		|| ( ${REMOVE} tmp.syntax.{c,h} ; exit 1 )
	${MOVE} tmp.syntax.c syntax.c
	${MOVE} tmp.syntax.h syntax.h


lctsyntax.c lctsyntax.h : lctsyntax.sid lctsyntax.act
	sid -l ansi-c lctsyntax.sid lctsyntax.act lctsyntax.c lctsyntax.h
