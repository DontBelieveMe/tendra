/* $Id$ */

/*
 * Copyright 2002-2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

%types%

	BOOL;
	ENTRYP;
	IDENT;
	BIGSTRING;
	TYPETUPLE;
	CODE;

%terminals%

	colon;     // :
	arrow;     // ->
	ref;       // &
	define;    // =
	semicolon; //;
	comma;     // ,
	open;      // (
	close;     // )

	code-start;	// @{
	code-end;	// @}
	lone-code-at;
	code-at;
	code-eof;

	eof;
	ident:       () -> (:IDENT);
	code-ident:  () -> (:IDENT);
	code-ref:    () -> (:IDENT);
	code-string: () -> (:BIGSTRING);
	!unknown;

	kw-header;
	kw-trailer;
	kw-map;
	kw-action;
	kw-argument;

%productions%

	<true>:  () -> (:BOOL);
	<false>: () -> (:BOOL);

	<empty-ident>: () -> ( : IDENT);

	<set-headers>:  (:CODE, :CODE) -> ();
	<set-trailers>: (:CODE, :CODE) -> ();

	<init-tuple>:   () -> (:TYPETUPLE);
	<append-tuple>: (:TYPETUPLE &, :IDENT, :IDENT, :BOOL) -> ();

	<make-map>: (:IDENT, :IDENT) -> ();

	<define-action>:       (:ENTRYP, :CODE) -> ();
	<check-action-tuples>: (:ENTRYP, :TYPETUPLE &, :TYPETUPLE &) -> ();
	<get-entry-action>:    (:IDENT) -> (:ENTRYP);
	<null-entry>:          () -> (:ENTRYP);

	<init-code>:          () -> (:CODE);
	<append-code-string>: (:CODE &, :BIGSTRING &) -> ();
	<append-code-ident>:  (:CODE &, :IDENT, :ENTRYP, :BOOL) -> ();
	<append-code-at>:     (:CODE &) -> ();

	<define-additional-argument>: (:IDENT, :IDENT) -> ();

	<E-syntax-error>;
	<E_expected_code_end>;
	<E_expected_code_start>;
	<E_expected_comma>;
	<E_expected_define>;
	<E_expected_arrow>;
	<E_expected_colon>;
	<E_expected_semicolon>;
	<E_expected_ident>;

	<E_unexpected_eof>;
	<E_lone_at_in_code_block>;

	code-block: (e :ENTRYP) -> (c :CODE) [

		code-element: (c :CODE &, e :ENTRYP) -> () = {
			s = code-string;
			<append-code-string>(&c, &s);
		||
			i = code-ident;
			b = <false>;
			<append-code-ident>(&c, i, e, b);
		||
			i = code-ref;
			b = <true>;
			<append-code-ident>(&c, i, e, b);
		||
			lone-code-at;
			<E_lone_at_in_code_block>;
		||
			code-at;
			<append-code-at>(&c);
		};

		code-body: (c :CODE &, e :ENTRYP) -> () = {
			$;
		||
			code-element(&c, e);
			code-body(&c, e);
		};

	] = {
		{
			code-start;
		##
			<E_expected_code_start>;
		};

		c = <init-code>;
		code-body(&c, e);

		{
			$;
		||
			code-eof;
			<E_unexpected_eof>;
		};

		{
			code-end;
		##
			<E_expected_code_end>;
		};
	};

	header-stmnt: () -> () = {
		kw-header;
		{
			define;
		##
			<E_expected_define>;
		};

		e = <null-entry>;

		sc = code-block(e);
		{
			comma;
		##
			<E_expected_comma>;
		};
		sh = code-block(e);

		<set-headers>(sc, sh);

		{
			semicolon;
		##
			<E_expected_semicolon>;
		};
	};

	trailer-stmnt: () -> () = {
		kw-trailer;
		{
			define;
		##
			<E_expected_define>;
		};

		e = <null-entry>;
		sc = code-block(e);

		{
			comma;
		##
			<E_expected_comma>;
		};

		sh = code-block(e);
		<set-trailers>(sc, sh);

		{
			semicolon;
		##
			<E_expected_semicolon>;
		};
	};

	map-stmnt: () -> () = {
		kw-map;
		lexitype = ident;
		{
			arrow;
		##
			<E_expected_arrow>;
		};

		ctype = ident;
		<make-map>(lexitype, ctype);

		{
			semicolon;
		##
			<E_expected_semicolon>;
		};
	};

	action-definition: () -> () [

		type-tuple: ( ) -> (a :TYPETUPLE) [

			type-name: (a :TYPETUPLE &) -> () = {
				{
					n = ident;
				||
					n = <empty-ident>;
				};

				colon;
				t = ident;

				{
					isref = <false>;
				||
					ref;
					isref = <true>;
				};

				<append-tuple>(&a, n, t, isref);
			};

			type-tuple1: (a :TYPETUPLE &) -> () = {
				type-name(&a);
			||
				type-name(&a);
				comma;
				type-tuple1(&a);
			};

		] = {
			open;
			a = <init-tuple>;
			close;
		||
			open;
			a = <init-tuple>;
			type-tuple1(&a);
			close;
		};

		function-type-defn: () -> (in :TYPETUPLE, out :TYPETUPLE) = {
			in  = <init-tuple>;
			out = <init-tuple>;
		||
			colon;
			in = type-tuple;
			{
				arrow;
			##
				<E_expected_arrow>;
			};
			out = type-tuple;
		};
	] = {

		kw-action;
		{
			n = ident;
		##
			n = <empty-ident>;
			<E_expected_ident>;
		};

		(in, out) = function-type-defn;

		{
			define;
		##
			<E_expected_define>;
		};

		ea = <get-entry-action>(n);
		<check-action-tuples>(ea, &in, &out);
		c = code-block(ea);
		<define-action>(ea, c);

		{
			semicolon;
		##
			<E_expected_semicolon>;
		};
	};

	argument-stmnt: () -> () = {
		kw-argument;
		{
			name = ident;
		##
			name = <empty-ident>;
			<E_expected_ident>;
		};

		{
			colon;
		##
			<E_expected_colon>;
		};

		{
			ctype = ident;
		##
			ctype = <empty-ident>;
			<E_expected_ident>;
		};

		<define-additional-argument>(name, ctype);
		{
			semicolon;
		##
			<E_expected_semicolon>;
		};
	};


	statement: () -> () = {
		header-stmnt;
	||
		trailer-stmnt;
	||
		action-definition;
	||
		map-stmnt;
	||
		argument-stmnt;
	};

	statement-list: () -> () = {
		$;
	||
		statement; statement-list;
	};

	lct-unit: () -> () = {
		statement-list;
		eof;
	##
		<E-syntax-error>;
	};

%entry%

	lct-unit;

