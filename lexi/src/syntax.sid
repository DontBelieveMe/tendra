/* $Id$ */

/*
 * Copyright 2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */

%types%

	BOOL;
	IDENT;
	ZONE;
	STRING;

	CMD;
	CMD_LIST;

	PARAM_LIST;

	ARG;
	ARG_LIST;

%terminals%

	ident:     () -> (:IDENT);
	sid-ident: () -> (:IDENT);
	string:    () -> (:STRING);

	upper: () -> (:STRING);
	lower: () -> (:STRING);
	digit: () -> (:STRING);

	open;
	close;
	open-brace;
	close-brace;

	arrow;
	eof;
	equal;
	plus;
	semicolon;
	colon;
	ref;
	range;
	range-closed-closed;
	range-closed-open;
	comma;
	nothing-marker;
	!unknown;

	arg-char-string: () -> (:ARG);
	arg-char-num:    () -> (:ARG);
	arg-char-count:  () -> (:ARG);
	arg-return:      () -> (:ARG);
	arg-ignore:      () -> (:ARG);

	begin-action; // <
	end-action;   // >

	kw-type;
	kw-group;
	kw-action;
	kw-keyword;
	kw-mapping;
	kw-token;
	kw-zone;

	default;
	white;

%productions%

	<string-concat>: (:STRING, :STRING ) -> (:STRING);
	<make-white>:    (:ZONE, :STRING) -> ();
	<make-group>:    (:ZONE, :IDENT, :STRING ) -> ();
	<make-trigraph>: (:ZONE, :STRING, :STRING ) -> ();
	<make-token>:   (:ZONE, :STRING, :CMD_LIST) -> ();
	<make-default>: (:ZONE, :CMD_LIST) -> ();
	<make-keyword>: (:ZONE, :STRING, :CMD) -> ();

	<make-terminal-cmd>:  (:IDENT) -> (:CMD);
	<make-action-cmd>:    (:ZONE, :IDENT, :ARG_LIST, :ARG_LIST) -> (:CMD);
	<make-donothing-cmd>: () -> (:CMD);

	<true>:  () -> (:BOOL);
	<false>: () -> (:BOOL);

	<empty-ident>: () -> ( :IDENT);

	<is-global-zone>: (:ZONE ) -> ( :BOOL );

	<empty-args-list>: () -> ( :ARG_LIST);
	<check-args-list>: (:ARG_LIST) -> ();
	<args-list-push-front>: (:ARG , :ARG_LIST) -> ();
	<append-arg-args-list>: (:ARG_LIST, :ARG ) -> ();
	<make_arg_terminal>:   (:IDENT) -> (:ARG);
	<make_arg_from_ident>: (:IDENT) -> (:ARG);
	<make_arg_from_ref>:   (:IDENT) -> (:ARG);
	<make_arg_none>: () -> (:ARG);

	<empty-cmd-list>:  () -> (:CMD_LIST);
	<add-cmd-to-list>: (:ZONE, :CMD, :CMD_LIST) -> ();
	<check-cmd-list>:  (:CMD_LIST) -> ();

	<E_expected_ident>:        () -> (:IDENT);
	<E_expected_begin_action>: () -> ();
	<E_expected_end_action>:   () -> ();
	<E_expected_range>:        () -> ();
	<E_expected_open>:         () -> ();
	<E_expected_close>:        () -> ();
	<E_expected_chars>:        () -> (:STRING);

	<E_nonglobalzonekeyword>: () -> ();
	<E_nonglobalzonetype>:    (:IDENT) -> ();
	<E_expected_colon>:       () -> ();
	<E_expected_semicolon>:   () -> ();
	<E_expected_arrow>:       () -> ();
	<E_expected_equal>:       () -> ();

	<E_sharp_arg_in_lhs>:     () -> ();
	<E_string_arg_in_lhs>:    () -> ();
	<E_terminal_in_lhs>:      () -> ();
	<E_return_in_rhs>:        () -> ();
	<E_string_in_action_rhs>: () -> ();

	<is-non-empty>: (:STRING) -> (:BOOL);
	<E_empty_character_string>: () -> ();
	<E_ignore_in_rhs>: () -> ();

	<syntax-error>: () -> ();

	<make-zone>: (:ZONE, :IDENT, :STRING, :CMD_LIST, :STRING, :CMD_LIST, :BOOL) -> (:ZONE);
	<update-zone-type>: (:ZONE, :ZONE) -> ();

	<make-type>:    (:ZONE, :IDENT) -> ();
	<init-param>:   () -> (:PARAM_LIST);
	<append-param>: (:ZONE, :PARAM_LIST &, :IDENT, :IDENT, :BOOL) -> ();
	<make-action>:  (:ZONE, :IDENT, :PARAM_LIST, :PARAM_LIST) -> ();

	string-plus : () -> (s :STRING) = {
		{
			a = string;
			||	a = upper;
			||	a = lower;
			||	a = digit;
		};

		{
			s = a;
		||
			plus;
			b = string-plus;
			s = <string-concat>(a, b);
		};
	};

	non-empty-chars : () -> (s: STRING) ={
		s = string-plus;
		{
			? = <is-non-empty>(s);
			##
			<E_empty_character_string>;
		};
	};

	white-defn : (z :ZONE) -> () = {
		kw-group;
		white;
		{
			equal;
		##
			<E_expected_equal>;
		};
		s = string-plus; <make-white> ( z, s );
	};

	group-defn: (z :ZONE) -> () = {
		kw-group;
		i = ident;
		{
			equal;
		##
			<E_expected_equal>;
		};
		s = non-empty-chars;
		<make-group>( z, i, s );
	};

	trigraph-defn: (z :ZONE) -> () = {
		kw-mapping;
		s = string-plus;
		{
			arrow;
		##
			<E_expected_arrow>;
		};
		t = string-plus;
		<make-trigraph>(z, s, t);
	};

	type-defn: (z :ZONE) -> () = {
		kw-type;
		s = ident;
		{
			? = <is-global-zone>(z);
			<make-type>(z, s);
		##
			<E_nonglobalzonetype>(s);
		};
	};

	param-list: (z :ZONE ) -> (a :PARAM_LIST) [

		param: (z :ZONE, a :PARAM_LIST &) -> () = {
			{
				name = ident;
			||
				name = <empty-ident>;
			};

			colon;
			type=ident;

			{
				isref = <false>;
			||
				ref;
				isref = <true>;
			};

			<append-param>(z, &a, name, type, isref);
		};

		param-list1: (z :ZONE, a :PARAM_LIST &) -> () = {
			param(z, &a);
		||
			param(z, &a);
			comma;
			param-list1(z, &a);
		};

	] = {
		a = <init-param>;
	||
		a = <init-param>;
		param-list1(z, &a);
	};

	action-decl: (z :ZONE) -> () = {
		kw-action;

		{
			begin-action;
		##
			<E_expected_begin_action>;
		};

		i = ident;
		{
			end-action;
		##
			<E_expected_end_action>;
		};

		{
			it = <init-param>;
			ot = <init-param>;
		||
			colon;
			{
				open;
			##
				<E_expected_open>;
			};

			it = param-list(z);
			{
				close;
			##
				<E_expected_close>;
			};

			{
				arrow;
			##
				<E_expected_arrow>;
			};
			{
				open;
			##
				<E_expected_open>;
			};

			ot = param-list(z);
			{
				close;
			##
				<E_expected_close>;
			};
		};

		<make-action>(z, i, it, ot);
	};

	action-call: (z :ZONE) -> (c :CMD) [
		lhs-arg: (l :ARG_LIST) -> () = {
			{
					b = arg-char-string; a = <make_arg_none>; <E_sharp_arg_in_lhs>;
				||  b = arg-char-num;    a = <make_arg_none>; <E_sharp_arg_in_lhs>;
				||  b = arg-char-count;  a = <make_arg_none>; <E_sharp_arg_in_lhs>;
				||  b = string;          a = <make_arg_none>; <E_string_arg_in_lhs>;
				||  i = ident;           a = <make_arg_from_ident>(i);
				||  ref; i = ident;      a = <make_arg_from_ref>(i);
				||  b = sid-ident;       a = <make_arg_none>; <E_terminal_in_lhs>;
				||  a = arg-return;
				||  a = arg-ignore;
			 };

			<append-arg-args-list>(l, a);
		};

		lhs-tuple1: (l :ARG_LIST) -> () = {
			lhs-arg(l);
		||
			lhs-arg(l);
			comma;
			lhs-tuple1(l);
		};

		lhs-tuple: (l:ARG_LIST) -> () = {
			lhs-arg(l);
		||
			open;
			lhs-tuple1(l);
			close;
		};

		rhs-arg: () -> (a :ARG) = {
				a = arg-char-string;
			||  a = arg-char-num;
			||  a = arg-char-count;
			||  b =  sid-ident;  a = <make_arg_terminal>(b);
			||  b =  arg-return; a = <make_arg_none>; <E_return_in_rhs>;
			||  b =  arg-ignore; a = <make_arg_none>; <E_ignore_in_rhs>;
			||  b =  string;     a = <make_arg_none>; <E_string_in_action_rhs>;
			||  ref; i =  ident; a = <make_arg_from_ref>(i);
			||	i =  ident;      a = <make_arg_from_ident>(i);
		};

		rhs-tuple1: () -> (r :ARG_LIST) = {
			a = rhs-arg;        r = <empty-args-list>; <args-list-push-front>(a, r);
		||
			a = rhs-arg; comma; r = rhs-tuple1;        <args-list-push-front>(a, r);
		};

		rhs-tuple : () -> (r: ARG_LIST) = {
			open;
			{
				r = <empty-args-list>;
			||
				r = rhs-tuple1;
			};
			close;
		};
	] = {
		l = <empty-args-list>;

		{
			$;
		||
			lhs-tuple(l);
			equal;
		};

		begin-action;
		i = ident;
		<check-args-list>(l);
		end-action;

		{
			r = <empty-args-list>;
		||
			r = rhs-tuple;
		};

		c = <make-action-cmd>(z, i, l, r);
	};

	cmd: (z :ZONE) -> (c :CMD) = {
		l = <empty-args-list>;
		i = sid-ident;
		c = <make-terminal-cmd>(i);
	||
		l = <empty-args-list>;
		nothing-marker;
		c = <make-donothing-cmd>;
	||
		c = action-call(z);
	};

	cmd-list: (z :ZONE) -> (l :CMD_LIST) = {
		c = cmd(z);
		l = <empty-cmd-list>;
		<add-cmd-to-list>(z, c, l);
	||
		l = cmd-list(z);
		comma;
		c = cmd(z);
		<add-cmd-to-list>(z, c, l);
	};

	token-defn: (z :ZONE) -> () = {
		kw-token;
		s = non-empty-chars;
		arrow;
		l = cmd-list(z);
		<check-cmd-list>(l);
		<make-token>(z, s, l);
	};

	default-defn: (z :ZONE ) -> () = {
		kw-token;
		default;
		arrow;
		l = cmd-list(z);
		<make-default>(z, l);
	};

	keyword-defn: (z :ZONE) -> () = {
		kw-keyword;
		s = string;
		arrow;
		c = cmd(z);
		{
			? = <is-global-zone>(z);
			<make-keyword>(z, s, c);
		##
			<E_nonglobalzonekeyword>;
		};
	};

	command: (:ZONE) -> ();

	command-list: (z :ZONE) -> () = {
		$;
	||
		command(z);
		command-list(z);
	##
		<syntax-error>;
	};

	zone-defn: (z :ZONE) -> ()  = {
		kw-zone;

		{
			zid = ident;
		##
			zid = <E_expected_ident>;
		};

		{
			colon;
		##
			<E_expected_colon>;
		};

		{
			b = non-empty-chars;
		##
			b = <E_expected_chars>;
		};

		{
			arrow;
			entry-cmds = cmd-list(z);
		||
			entry-cmds = <empty-cmd-list>;
		};

		{
			range; lendclosed = <true>;
		||
			range-closed-closed; lendclosed = <true>;
		||
			range-closed-open;   lendclosed = <false>;
		##
			<E_expected_range>; lendclosed = <false>;
		};

		{
			e = non-empty-chars;
		##
			e = <E_expected_chars>;
		};

		{
			arrow;
			exit-cmds = cmd-list(z);
		||
			exit-cmds = <empty-cmd-list>;
		};

		new-zone = <make-zone>(z, zid, b, entry-cmds, e, exit-cmds, lendclosed);

		open-brace;
		command-list(new-zone);
		close-brace;

		<update-zone-type>(z, new-zone);
	};

	expected_semicolon: () -> () = {
		semicolon;
	##
		<E_expected_semicolon>;
	};

	command: (z :ZONE) -> () = {
		   semicolon;
		|| white-defn(z);    expected_semicolon;
		|| group-defn(z);    expected_semicolon;
		|| trigraph-defn(z); expected_semicolon;
		|| token-defn(z);    expected_semicolon;
		|| keyword-defn(z);  expected_semicolon;
		|| default-defn(z);  expected_semicolon;
		|| type-defn(z);     expected_semicolon;
		|| action-decl(z);   expected_semicolon;
		|| open-brace; command-list(z); close-brace;
		|| zone-defn(z);
	};

	unit: (z :ZONE) -> () = {
		command-list(z);
		{
			eof;
		##
			<syntax-error>;
		};
	};

%entry%

	unit;

