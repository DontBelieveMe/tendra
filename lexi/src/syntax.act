/* $Id$ */

/*
 * Copyright 2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */

%prefixes%

	terminal = lex_;

%maps%

	unit -> read_lex;

	BOOL       -> int;
	IDENT      -> SID_STRING;
	ZONE       -> zoneP;
	STRING     -> SID_STRING;

	CMD        -> cmdP;
	CMD_LIST   -> cmd_listP;

	ARG        -> argP;

	PARAM_LIST -> paramP;

%header% @{

	#include <string.h>
	#include <stdio.h>

	#include <exds/common.h>
	#include <exds/exception.h>
	#include <exds/dalloc.h>
	#include <exds/dstring.h>

	#include <shared/error.h>
	#include <shared/xalloc.h>
	#include <shared/check.h>
	#include <shared/string.h>

	#include <adt/action.h>
	#include <adt/entry.h>
	#include <adt/arg.h>
	#include <adt/cmd.h>
	#include <adt/param.h>
	#include <adt/keyword.h>
	#include <adt/local.h>
	#include <adt/zone.h>

	#include "ast.h"
	#include "lexer.h"
	#include "syntax.h"
	#include "options.h"

	#define ADVANCE_LEXER    ADVANCE_LXI_LEXER
	#define CURRENT_TERMINAL CURRENT_LXI_TERMINAL
	#define SAVE_LEXER       SAVE_LXI_LEXER
	#define RESTORE_LEXER    RESTORE_LXI_LEXER

	typedef char *SID_STRING;
	typedef char *SID_CHARS;
	typedef struct cmd* cmdP;
	typedef struct cmd_list* cmd_listP;
	typedef struct arg* argP;
	typedef struct param * paramP;

	/*
	 * This string is added to the start of each sid identifier.
	 */
	char *token_prefix = "lex_";

	/*
	 * COMPILATION MODE
	 *
	 * We allow unreached code in the automatically generated sections.
	 */
	#ifdef __TenDRA__
	#pragma TenDRA begin
	#pragma TenDRA unreachable code allow
	#endif

@}, @{

	#ifndef SYNTAX_H
	#define SYNTAX_H

	#include <adt/zone.h>

	extern char *token_prefix;
	typedef struct zone * zoneP;

@};

%assignments%

%parameter-assignments%

%result-assignments%

%terminals%

	ident: () -> (i : IDENT) = @{
		@i = xstrdup (tokbuf);
	@};

	sid-ident: () -> (i : IDENT) = @{
		int n;
		char *s;
		char buf[1000];
		strcpy (buf, token_prefix);
		n = (int) strlen (buf);
		for (s = tokbuf; *s; s++) {
			if (*s == '-') {
				buf[n++] = '_';
				buf[n++] = 'H';
			} else if (*s == '_') {
				buf[n++] = '_';
				buf[n++] = '_';
			} else {
				buf[n++] = *s;
			}
			if (n >= 900) {
				error (ERROR_SERIOUS, "Identifier too long");
				break;
			}
		}
		buf[n] = 0;
		@i = xstrdup(buf);
	@};

	string: () -> (s : STRING) = @{
		@s = xstrdup (tokbuf);
	@};

	upper: () -> (s :STRING) = @{ @s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; @};
	lower: () -> (s :STRING) = @{ @s = "abcdefghijklmnopqrstuvwxyz"; @};
	digit: () -> (s :STRING) = @{ @s = "0123456789";                 @};

	arg-char-string: () ->(a :ARG) = @{
		@a = add_arg(ARG_CHARP, 0);
	@};

	arg-char-num: () ->(a :ARG) = @{
		@a = add_arg(ARG_CHAR_NUM, numbuf);
	@};

	arg-char-count: () ->(a :ARG) = @{
		@a = add_arg(ARG_CHAR_COUNT, 0);
	@};

	arg-return: () -> (a :ARG) = @{
		@a = add_arg(ARG_RETURN, 0);
	@};

	arg-ignore : () -> (a :ARG) = @{
		@a = add_arg(ARG_IGNORE ,0);
	@};

%actions%

	<string-concat>: (a : STRING, b : STRING) -> (s : STRING) = @{
		@s = xstrcat (@a, @b);
	@};

	<empty-ident>: () -> (i : IDENT) = @{
		@i = xstrdup("");
	@};

	<make-white>: (z : ZONE, s : STRING) -> () = @{
		if (@z->white) {
			error(ERROR_SERIOUS, "White space group already defined");
		}

		@z->white = make_group(@z, "white", @s);
	@};

	<make-group>: (z :ZONE, i :IDENT, s :STRING) -> () = @{
		make_group (@z, @i, @s);
	@};

	<make-trigraph>: (z :ZONE, s :STRING, t :STRING) -> () = @{
		assert(@z != NULL);
		assert(@s != NULL);
		assert(@t != NULL);

		add_prepass(@z, @s, @t);
	@};

	<make-terminal-cmd>: (i :IDENT) -> (c :CMD) = @{
			@c = add_cmd_return(@i);
	@};

	<make-donothing-cmd>: () -> (c :CMD) = @{
		@c = add_cmd_donothing();
	@};

	<make-action-cmd>: (z: ZONE, i :IDENT, l :ARG, r :ARG) -> (c :CMD)  = @{
		NStringT key;
		struct entry *ea;

		nstring_copy_cstring(&key, @i);

		ea = table_get_entry(&@z->ast->table, &key);
		if (ea == NULL) {
			@c = NULL;
			error(ERROR_SERIOUS, "Unknown action %s", @i);
		} else if (ea->kind != ENTRY_ACTION) {
			@c = NULL;
			error(ERROR_SERIOUS, "Name %s is not an action", @i);
		} else {
			char *dup;

			dup = arg_first_duplicate_ident(@l);
			if (dup != NULL) {
				char *s = nstring_to_cstring(&ea->key);
				error(ERROR_SERIOUS, "In call to action %s, the left hand side contain multiple reference to %s",
					s, dup);
			}

			@c = add_cmd_action(ea, @l, @r);
		}

		xfree(@i);
	@};

	<arg-append>: (l :ARG &, a :ARG) -> () = @{
		if (@a != NULL) {
			struct arg **p;

			for (p = &@=l; *p != NULL; p = &(*p)->next)
				;

			*p = @a;
		}
	@};

	<arg-prepend>: (l :ARG &, a :ARG) -> () = @{
		if (@a != NULL) {
			assert(@a->next == NULL);

			@a->next = @l;
			@=l = @a;
		}
	@};

	<check-args-list>: (l :ARG) -> () = @{
		if (arg_return_count(@l) > 1) {
			error(ERROR_SERIOUS, "There can only be one return terminal argument per action lhs");
		}
	@};

	<empty-args-list>: () -> (l :ARG) = @{
		@l = NULL;
	@};

	<add-cmd-to-list>: (z :ZONE, c :CMD, l :CMD_LIST) -> () = @{
		if (@c != NULL) { /* if @c == NULL, an error has already been issued.*/
			unsigned return_count;

			return_count = cmd_return_count(@l->cmds);

			if (return_count > 0 && @c->kind != CMD_NOOP) {
				error(ERROR_SERIOUS, "No cmd may follow an cmd that returns a terminal");
			}

			if (@c->kind == CMD_RETURN) {
				return_count++;
			}

			if (@c->kind == CMD_ACTION) {
				struct arg *lhs, *rhs;
				struct action *act;
				struct entry *ea;
				struct arg *p;
				struct param *q;

				return_count += arg_return_count(@c->u.act.lhs);
				if (return_count > 1) {
					error(ERROR_SERIOUS, "Only one terminal may be returned per token");
				}

				ea  = @c->u.act.ea;
				act = ea->u.act;
				rhs = @c->u.act.rhs;
				lhs = @c->u.act.lhs;

				/* CHECKING RHS COMPATIBILITY */
				for (p = rhs, q = act->in; p != NULL && q != NULL; p = p->next, q = q->next) {
					struct entry *et = NULL;
					NStringT str;

					switch (p->kind) {
					case ARG_IDENT:
						nstring_copy_cstring(&str, p->u.literal);
						et = local_find(@l->locals, &str);
						nstring_destroy(&str);
						if (et == NULL) {
							struct entry *e = table_get_entry(&@z->ast->table, &str);
							if (!e) {
								error(ERROR_SERIOUS, "local name %s has not been defined yet", p->u.literal);
								et = NULL;
							} else {
								switch (e->kind) {
								case ENTRY_LOCAL:
									error(ERROR_SERIOUS, "local name %s has been defined but not in this scope", p->u.literal);
									et = NULL;
									break;

								case ENTRY_ACTION:
									error(ERROR_SERIOUS, "%s is not a local name but an action which is not allowed", p->u.literal);
									et = NULL;
									break;

								case ENTRY_TYPE:
									error(ERROR_SERIOUS, "%s is not a local name but a type which is not allowed", p->u.literal);
									et = NULL;
									break;

								default:
									UNREACHED;
								}
							}
						}
						break;

					case ARG_CHARP:
						/* TODO: assert(ast->lexi_string_type) */
						et = @z->ast->lexi_string_type;
						break;

					case ARG_CHAR_NUM:
						/* TODO: assert(ast->lexi_char_type) */
						et = @z->ast->lexi_char_type;
						break;

					case ARG_TERMINAL:
						/* TODO: assert(ast->lexi_terminal_type) */
						et = @z->ast->lexi_terminal_type;
						break;

					case ARG_CHAR_COUNT:
						/* TODO: assert(ast->lexi_int_type) */
						et = @z->ast->lexi_int_type;
						break;

					case ARG_NONE:
						break; /* Error already detected, do nothing and leave p->lexitype = NULL */

					case ARG_IGNORE:
					case ARG_RETURN:
						UNREACHED;
						break;

					default:
						UNREACHED;
						break;
					}

					if (et) {
						if (q->et!=et || p->is_ref !=q->is_ref) {
							char *s1 = nstring_to_cstring(&ea->key);
							char *s2 = nstring_to_cstring(&et->key);
							char *s3 = p->is_ref ? "&" : "";
							char *s4 = nstring_to_cstring(&q->et->key);
							char *s5 = q->is_ref ? "&" : "";
							char *s6 = "unknown";
							char *s7 = "unknown";

							switch (p->kind) {
							case ARG_TERMINAL:
								s6 = "$";
								s7 = p->u.literal;
								break;

							case ARG_IDENT:
								s7 = p->u.literal;
								break;

							case ARG_CHAR_COUNT:
								s6 = "#n";
								break;

							case ARG_CHAR_NUM:
								s6 = "#[number]";
								/* TODO: s7=p->u.digit */;
								break;

							case ARG_CHARP:
								s6 = "#*";
								break;
							}

							error(ERROR_SERIOUS, "In call to action %s, argument \'%s%s\' has type \'%s%s\' when it should have type %s",
								s1, s6, s7, s2, s3, s4, s5);

							xfree(s1);
							xfree(s2);
							xfree(s4);
						}
					}
				}

				if (p != NULL) {
					char *s = nstring_to_cstring(&ea->key);
					error(ERROR_SERIOUS, "In call to action %s, too many arguments", s);
					xfree(s);
				}

				if (q != NULL) {
					char *s = nstring_to_cstring(&ea->key);
					error(ERROR_SERIOUS, "In call to action %s, not enough arguments", s);
					xfree(s);
				}

				for (p = lhs, q = act->out; p != NULL && q != NULL; p = p->next, q = q->next) {
					struct entry *et;

					switch (p->kind) {
					case ARG_IDENT: {
						NStringT str;

						nstring_copy_cstring(&str, p->u.literal);
						et = local_find(@l->locals, &str);
						if (et == NULL) {
							struct entry *e= table_get_entry(&@z->ast->table, &str);
							/* TODO: error out if local name already exists? */
							local_add(&@l->locals, &str, q->et);
							if (e) {
								nstring_destroy(&str);
								switch (e->kind) {
								case ENTRY_ACTION:
									error(ERROR_SERIOUS, "In action lhs. Name %s is an action. Hiding globals by local names is not allowed", p->u.literal);
									break;

								case ENTRY_TYPE:
									error(ERROR_SERIOUS, "In action lhs. Name %s is a type. Hiding globals by local names is not allowed", p->u.literal);
									break;
								}
							} else {
								table_add_local_name(&@z->ast->table, &str);
							}
							if (p->is_ref) {
								char *s = nstring_to_cstring(&ea->key);
								error(ERROR_SERIOUS, "In action call %s, you can only use references %s for preexisting variables", s, p->u.literal);
								xfree(s);
							}
						} else {
							nstring_destroy(&str);
							if (!p->is_ref) {
								char *s;

								s = nstring_to_cstring(&ea->key);
								error(ERROR_SERIOUS, "In action call %s, name %s already declared. Use references to change the value of an already existing variable", s, p->u.literal);
								xfree(s);

								et = q->et; /* To avoid outputting that error more than once */
							}
						}
						break;
					}

					case ARG_RETURN:
						et = @z->ast->lexi_terminal_type;
						q->is_ref = false;
						/* TODO: assert(q->is_ref == false) */
						break;

					case ARG_IGNORE:
						/* always acceptable */
						et = q->et;
						p->is_ref = q->is_ref;
						break;

					case ARG_NONE:
						break;
						/* TODO: asserting errored is already set */
						/* Error has already been detected */

					case ARG_CHARP:
					case ARG_CHAR_NUM:
					case ARG_TERMINAL:
					case ARG_CHAR_COUNT:
						break; /* UNREACHABLE */

					default:
						break; /* UNREACHABLE */
					}

					if (p->is_ref != q->is_ref) {
						/* XXX: state which action */
						if (p->is_ref) {
							error(ERROR_SERIOUS, "In call to action, %s should not be a reference", p->u.literal);
						} else {
							error(ERROR_SERIOUS, "In call to action, %s should not be a reference", p->u.literal);
						}
					}
				}

				if (p != NULL) {
					char *s = nstring_to_cstring(&ea->key);
					error(ERROR_SERIOUS, "In call to action %s, too many results", s);
					xfree(s);
				}

				if (q != NULL) {
					char *s = nstring_to_cstring(&ea->key);
					error(ERROR_SERIOUS, "In call to action %s, not enough results", s);
					xfree(s);
				}
			}

			/* TODO: only append if no error */
			{
				struct cmd **p;

				for (p = &@l->cmds; *p != NULL; p = &(*p)->next)
					;

				assert(@c->next == NULL);
				@c->next = *p;
				*p = @c;
			}
		}
	@};

	<check-cmd-list>: (l: CMD_LIST) -> () = @{
		if (cmd_return_count(@l->cmds) > 1) {
			error(ERROR_SERIOUS, "At most one return terminal may be specified per command list");
		}
	@};

	<empty-cmd-list>: () -> (l :CMD_LIST) = @{
		@l = add_cmd_list();
	@};

	<make-token>: (z :ZONE, s :STRING, l :CMD_LIST) -> () = @{
		add_mainpass(@z, @s, @l);
		if (cmd_return_count(@l->cmds)) {
			@z->kind = ZONE_GENERAL;
		}
	@};

	<is-non-empty>: (s : STRING) -> (b : BOOL) = @{
		@b = strlen(@s) > 0;
	@};

	<E_empty_character_string>: () -> () = @{
		error(ERROR_SERIOUS, "Empty character string is not allowed here, try using DEFAULT instead");
	@};

	<make-default>: (z :ZONE, l :CMD_LIST) -> () = @{
		@z->local = @l;
		if (cmd_return_count(@l->cmds)) {
			@z->kind = ZONE_GENERAL;
		}
	@};

	<make-keyword>: (z: ZONE, s :STRING, c :CMD) -> () = @{
		switch (@c->kind) {
		case CMD_RETURN:
			/* Fallback is intentional */
			add_keyword(@z, @s, @c);
			break;

		default:
		  error(ERROR_SERIOUS, "Syntax error: only a function or a token might be returned for a keyword");
		}
	@};

	<true>:  () -> (b :BOOL) = @{ @b = 1; @};
	<false>: () -> (b :BOOL) = @{ @b = 0; @};

	<make-zone>: (z: ZONE , i :IDENT, b :STRING, enter :CMD_LIST, e :STRING, exit :CMD_LIST, endmarkerclosed :BOOL) -> (nz : ZONE) = @{
		struct cmd *c;
		struct cmd_list *l;

		@nz = add_zone(@z, @i, @e, @endmarkerclosed);

		@nz->exit = @exit;
		if (cmd_return_count(@nz->exit->cmds) != 0) {
			@nz->kind = ZONE_PSEUDO;
		}

		@nz->enter = @enter;
		if (cmd_return_count(@nz->enter->cmds) != 0) {
			@nz->kind = ZONE_GENERAL;
		}

		c = add_cmd_push_zone(@nz);
		l = add_cmd_list();
		l->cmds = c;

		add_mainpass(@z, @b, l);
	@};

	<update-zone-type>: (parent :ZONE, child :ZONE) -> () = @{
		switch (@child->kind) {
		case ZONE_PSEUDO:
		case ZONE_GENERAL:
			@parent->kind = ZONE_GENERAL;
			break;

		case ZONE_PURE:
			/* do nothing */
			break;
		}
	@};

	<make_arg_from_ident>: (i:IDENT) -> (a:ARG) = @{
		@a = add_ident(@i);
	@};

	<make_arg_from_ref>: (i:IDENT) -> (a:ARG) = @{
		@a = add_ref(@i);
	@};

	<make_arg_terminal>: (i:IDENT) -> (a:ARG) = @{
		@a = add_terminal(@i);
	@};

	<make_arg_none>: () -> (a:ARG) = @{
		@a = add_none();
	@};

	<is-global-zone>: (z : ZONE) -> (b : BOOL) = @{
	   @b = zone_isglobal(@z);
	@};

	<make-type>: (z:ZONE, i:IDENT) -> () = @{
		NStringT str;
		struct entry *e;

		nstring_copy_cstring(&str,@i);
		xfree(@i);

		e = table_get_entry(&@z->ast->table, &str);
		if (e != NULL) {
			nstring_destroy(&str);

			switch (e->kind) {
			case ENTRY_TYPE:
				error(ERROR_SERIOUS, "Type %s already exists",@i);
				break;

			case ENTRY_LOCAL:
				error(ERROR_SERIOUS, "Can't create type %s, %s has been previously used as a local name. We do not allow retroactive hiding.", @i, @i);
				break;

			case ENTRY_ACTION:
				error(ERROR_SERIOUS, "Can't create type %s, %s has already been declared as an action", @i, @i);
				break;

			default:
				UNREACHED;
			}
		} else {
			table_add_type(&@z->ast->table, &str);
		}
	@};

	<make-action>: (z :ZONE, i :IDENT, params :PARAM_LIST, results :PARAM_LIST) -> () = @{
		NStringT str;
		struct entry *e;

		nstring_copy_cstring(&str, @i);

		e = table_get_entry(&@z->ast->table, &str);
		if (e != NULL) {
			nstring_destroy(&str);

			switch (e->kind) {
			case ENTRY_ACTION:
				error(ERROR_SERIOUS, "Action %s already exists",@i);
				break;

			case ENTRY_LOCAL:
				error(ERROR_SERIOUS, "Can't create type %s, %s has been previously used as a local name. We do not allow retroactive hiding.", @i, @i);
				break;

			case ENTRY_TYPE:
				error(ERROR_SERIOUS, "Can't create action %s, %s has already been declared as a type", @i, @i);
				break;

			default:
				UNREACHED;
			}
		} else {
			table_add_action(&@z->ast->table, &str , @params, @results);
		}

		xfree(@i);
	@};

	<init-param>: () -> (a :PARAM_LIST) = @{
		@a = NULL;
	@};

	<append-param>: (z :ZONE, a :PARAM_LIST &, id :IDENT, type :IDENT, isref :BOOL) -> () =@{
		struct entry *et;
		NStringT tstr, istr;

		nstring_copy_cstring(&tstr,@type);
		nstring_copy_cstring(&istr,@id);

		et = table_get_entry(&@z->ast->table, &tstr);
		if (et == NULL) {
			 error(ERROR_SERIOUS, "Unknown type %s", @type);
			 nstring_destroy(&istr);
		} else if (et->kind != ENTRY_TYPE) {
			 error(ERROR_SERIOUS, "%s is not a type", @type);
			 nstring_destroy(&istr);
		} else {
			param_append(@&a, &istr, et, @isref);
		}

		nstring_destroy(&tstr);

		xfree(@type);
		xfree(@id);
	@};

	<E_nonglobalzonekeyword>: () -> () = @{
		error(ERROR_SERIOUS, "Keywords not yet implemented in a non global zone ");
	@};

	<E_nonglobalzonetype>: (i :IDENT) -> () = @{
		error(ERROR_SERIOUS, "Syntax error: type %s should not be declared inside a zone",@i);
	@};

	<E_expected_ident>: () -> (i :IDENT) = @{
		@i="";
		error(ERROR_SERIOUS, "Syntax error: expected identifier");
	@};

	<E_expected_range>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected range");
	@};

	<E_expected_open>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected open \'(\'");
	@};

	<E_expected_close>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected close \')\'");
	@};

	<E_expected_chars>: () -> (s :STRING) = @{
			@s = NULL;
		error(ERROR_SERIOUS, "Syntax error: expected characters");
	@};

	<E_expected_colon>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected colon \':\'");
	@};

	<E_expected_semicolon>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected semicolon \';\'");
	@};

	<E_expected_arrow>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected arrow \'->\'");
	@};

	<E_expected_equal>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected equal \'=\'");
	@};

	<E_expected_begin_action>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected begin action \'<\'");
	@};

	<E_expected_end_action>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error: expected end action \'>\'");
	@};

	<syntax-error>: () -> () = @{
		error(ERROR_SERIOUS, "Syntax error");
	@};

	<E_sharp_arg_in_lhs>: () -> () = @{
		error(ERROR_SERIOUS, "Argument of style # are rvalues and should not appear on a left handside");
	@};

	<E_string_arg_in_lhs>: () -> () = @{
		error(ERROR_SERIOUS, "Argument of type "" are rvalues and should not appear on a left handside");
	@};

	<E_return_in_rhs>: () -> () = @{
		error(ERROR_SERIOUS, "Return terminal argument in right handside");
	@};

	<E_string_in_action_rhs>: () -> () = @{
		error(ERROR_SERIOUS, "String argument in right handside of action call: purposefuly not implemented to avoid confusion."
			" Will be implemented with an alternate meaning once direct function calls are removed from lexi");
	@};

	<E_ignore_in_rhs>: () -> () = @{
		error(ERROR_SERIOUS, "Ignore argument in right handside");
	@};

	<E_terminal_in_lhs>: () -> () = @{
		error(ERROR_SERIOUS, "Terminal argument in left handside");
	@};

%trailer% @{
@}, @{

	#endif

@};

