%prefixes%

terminal = lex_ ;


%maps%


/*
    ENTRY POINT

    The main entry point for the grammar is given by unit.
*/

unit -> read_lex ;


/*
    TYPE MAPPINGS

    These mappings give the correspondences between syntax types and
    C types.
*/

BOOL -> int ;
CHARACTERS -> SID_CHARS ;
IDENTIFIER -> SID_STRING ;
ZONE -> zoneP ;
STRING -> SID_STRING ;
INSTRUCTION -> instructionP ;
INSTRUCTIONS_LIST -> instructions_listP ;
ARG -> argP;
ARGS_LIST -> args_listP;


%header% @{
/*
    		 Crown Copyright (c) 1997
    
    This TenDRA(r) Computer Program is subject to Copyright
    owned by the United Kingdom Secretary of State for Defence
    acting through the Defence Evaluation and Research Agency
    (DERA).  It is made available to Recipients with a
    royalty-free licence for its use, reproduction, transfer
    to other parties and amendment for any purpose not excluding
    product development provided that any such use et cetera
    shall be deemed to be acceptance of the following conditions:-
    
        (1) Its Recipients shall ensure that this Notice is
        reproduced upon any copies or amended versions of it;
    
        (2) Any amended version of it shall be clearly marked to
        show both the nature of and the organisation responsible
        for the relevant amendment or amendments;
    
        (3) Its onward transfer from a recipient to another
        party shall be deemed to be that party's acceptance of
        these conditions;
    
        (4) DERA gives no warranty or assurance as to its
        quality or suitability for any purpose and DERA accepts
        no liability whatsoever in relation to any use to which
        it may be put.
*/

#include <string.h>
#include <stdio.h>

#include "error.h"
#include "xalloc.h"

#include "char.h"
#include "lex.h"
#include "syntax.h"


/*
    PARSER TYPES

    These types give the implementation of the types used in the syntax.
*/

typedef letter *SID_CHARS ;
typedef char *SID_STRING ;
/*typedef zone* zoneP; Done in syntax.h */
typedef instruction* instructionP ;
typedef instructions_list* instructions_listP ;
typedef arg* argP;
typedef args_list* args_listP;

/*
    SID IDENTIFIER PREFIX

    This string is added to the start of each sid identifier.
*/

char *sid_prefix = "lex_" ;


/*
    CURRENT CONDITIONAL

    This variable is used to record the current conditional.
*/

static char *crt_cond = NULL ;


/*
    COMPILATION MODE

    We allow unreached code in the automatically generated sections.
*/

#if FS_TENDRA
#pragma TenDRA begin
#ifndef OLD_PRODUCER
#pragma TenDRA unreachable code allow
#endif
#endif


@}, @{
/*
    		 Crown Copyright (c) 1997
    
    This TenDRA(r) Computer Program is subject to Copyright
    owned by the United Kingdom Secretary of State for Defence
    acting through the Defence Evaluation and Research Agency
    (DERA).  It is made available to Recipients with a
    royalty-free licence for its use, reproduction, transfer
    to other parties and amendment for any purpose not excluding
    product development provided that any such use et cetera
    shall be deemed to be acceptance of the following conditions:-
    
        (1) Its Recipients shall ensure that this Notice is
        reproduced upon any copies or amended versions of it;
    
        (2) Any amended version of it shall be clearly marked to
        show both the nature of and the organisation responsible
        for the relevant amendment or amendments;
    
        (3) Its onward transfer from a recipient to another
        party shall be deemed to be that party's acceptance of
        these conditions;
    
        (4) DERA gives no warranty or assurance as to its
        quality or suitability for any purpose and DERA accepts
        no liability whatsoever in relation to any use to which
        it may be put.
*/


#ifndef SYNTAX_INCLUDED
#define SYNTAX_INCLUDED

#include "char.h"
extern char *sid_prefix ;
typedef zone* zoneP;

@};


%terminals%


/*
    IDENTIFIER TERMINAL

    This action gives the terminal for identifiers.  The identifier text
    is built up in token_buff by the lexical routines.
*/

identifier : () -> ( i : IDENTIFIER ) = @{
    @i = xstrcpy ( token_buff ) ;
@} ;


/*
    SID IDENTIFIER TERMINAL

    This action gives the terminal for sid-style identifiers.  The
    identifier text is built up in token_buff by the lexical routines.
*/

sid-identifier : () -> ( i : IDENTIFIER ) = @{
    int n ;
    char *s ;
    char buff [1000] ;
    strcpy ( buff, sid_prefix ) ;
    n = ( int ) strlen ( buff ) ;
    for ( s = token_buff ; *s ; s++ ) {
	if ( *s == '-' ) {
	    buff [ n++ ] = '_' ;
	    buff [ n++ ] = 'H' ;
	} else if ( *s == '_' ) {
	    buff [ n++ ] = '_' ;
	    buff [ n++ ] = '_' ;
	} else {
	    buff [ n++ ] = *s ;
	}
	if ( n >= 900 ) {
	    error ( ERROR_SERIOUS, "Identifier too long" ) ;
	    break ;
	}
    }
    buff [n] = 0 ;
    @i = xstrcpy ( buff ) ;
@} ;


/*
    STRING TERMINAL

    This action gives the terminal for strings.  The string text is built
    up in token_buff by the lexical routines.
*/

string : () -> ( s : STRING ) = @{
    @s = xstrcpy ( token_buff ) ;
@} ;


/*
    SPECIAL STRING TERMINALS

    These actions give a number of special strings.
*/

upper : () -> ( s : STRING ) =	@{ @s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ; @} ;
lower : () -> ( s : STRING ) =	@{ @s = "abcdefghijklmnopqrstuvwxyz" ; @} ;
digit : () -> ( s : STRING ) =	@{ @s = "0123456789" ; @} ;

/* 
   ARGS TERMINAL
*/
arg-char-list : () -> (a:ARG) = @{
      @a=add_arg(arg_chars_list,0);
@};

arg-char-string : () ->(a:ARG) = @{
      @a=add_arg(arg_charP,0);
@};

arg-char-nb : () ->(a:ARG) = @{
      @a=add_arg(arg_char_nb,number_buffer);
@};


%actions%


/*
    CONCATENATE TWO STRINGS

    This action concatenates two strings.
*/

<string-concat> : ( a : STRING, b : STRING ) -> ( s : STRING ) = @{
    @s = xstrcat ( @a, @b ) ;
@} ;

/*
    CREATE A NULL IDENTIFIER

    This action creates a NULL IDENTIFIER
*/

/*
<null-identifier> : () -> ( i : IDENTIFIER ) = @{
    @i = NULL;
@} ;
*/

/*
    CREATE A CHARACTER STRING

    This action maps an input string into its internal representation
    as an array of character codes.
*/

<make-chars> : ( z : ZONE, s : STRING ) -> ( c : CHARACTERS ) = @{
    @c = make_string ( @s, @z ) ;
@} ;


/*
    SET WHITE SPACE VARIABLE

    This action sets the white space variable to the given array of
    characters.  There is a check to make sure that it has not already
    been set.
*/

<make-white> : ( z : ZONE, s : CHARACTERS ) -> () = @{
    if ( @z->white_space) {
	error ( ERROR_SERIOUS, "White space group already defined" ) ;
    }
    @z->white_space= make_group(@z,"white",@s) ;
@} ;


/*
    CREATE A CHARACTER GROUP

    This action defines the character group i to be s.
*/

<make-group> : ( z : ZONE, i : IDENTIFIER, s : CHARACTERS ) -> () = @{
    make_group ( @z, @i, @s ) ;
@} ;


/*
    CREATE A PRE-PASS MAPPING

    This action creates a pre-pass mapping from s to t.
*/

<make-trigraph> : ( z : ZONE, s : CHARACTERS, t : STRING ) -> () = @{
    add_char ( @z, @z->zone_pre_pass, @s, crt_cond, NULL, @t) ;
@} ;



/* 
   CREATE AN INSTRUCTION 
*/
<make-inst>  :  ( i : IDENTIFIER, a : ARGS_LIST ) -> ( inst : INSTRUCTION ) = @{
    if(@a) {
        @inst=add_instruction_function(@i,@a);
    } 
    else {
        @inst=add_instruction_return_token(@i);
    }
@};

<make-donothing-inst> : () -> ( inst : INSTRUCTION ) = @{
	@inst=add_instruction_donothing();
@};


/*CREATE A CHAR LIST */
<arg-char-list-tmp> : () -> (a:ARG) = @{
      @a=add_arg(arg_chars_list,0);
@};

/*
    ADD ARGS to ARGS LIST
*/
<args-list-push-front> : ( a:ARG , l:ARGS_LIST ) -> () = @{
    @a->next=@l->head;
    @l->head=@a;
@};

/*
   CREATES AN EMPTY ARGS LIST
*/
<empty-args-list> : () -> ( l:ARGS_LIST) = @{
    @l=add_args_list();
@};

/* 
   CREATES A NULL ARG LIST
*/
<null-args-list> : () -> ( l:ARGS_LIST ) = @{
    @l = NULL ;
@};

/*
    ADD INSTRUCTION to INSTRUCTION LIST 
*/
<add-inst-to-list> : ( i : INSTRUCTION, il : INSTRUCTIONS_LIST ) ->() = @{
	@i->next=@il->head;
	@il->head=@i;
@};

/*
    EMPTY INSTRUCTION LIST
*/

<empty-inst-list> : () -> (i:INSTRUCTIONS_LIST) //: INSTRUCTIONS_LIST ) 
= @{
    @i=add_instructions_list();
@};


/*
    CREATE A MAIN-PASS MAPPING

    This action creates a main-pass mapping from s to the lexical token i.
*/

<make-token> : ( z : ZONE, s : CHARACTERS, il : INSTRUCTIONS_LIST) -> () = @{
        add_char ( @z, @z->zone_main_pass, @s, crt_cond, @il, NULL) ;
@} ;

<is-non-empty> : ( c : CHARACTERS, z :ZONE ) -> ( b : BOOL ) = @{
    @b=(@c[0]!=@z->top_level->last_letter_code);
@};

<E_empty_character_string> : () -> () = @{
        error(ERROR_SERIOUS, "Empty character string is not allowed here, try using DEFAULT instead");	
@};  

/*
    CREATE A MAIN-PASS MAPPING

    This action creates a main-pass default from s to the lexical token i.
*/
<make-default> : ( z : ZONE, i : INSTRUCTIONS_LIST ) -> () = @{
    @z->default_actions=@i;
    @z->default_cond=crt_cond;
@} ;


/*
    CREATE A KEYWORD

    This action creates a keyword called s.

*/

<make-keyword> : ( z: ZONE, s : STRING, i : INSTRUCTION ) -> () = @{
    switch(@i->type) {
    case apply_function:
      if(@i->fun->args->head==NULL) {
        error(ERROR_SERIOUS, "Syntax error: for keywords using "
	"user defined functions, "
	"the arglist must remain empty");
        break;
      }
    case return_token: 
    /* Fallback is intentional */
      add_keyword ( @z, @s, crt_cond, @i ) ;
    break;
    default:
      error(ERROR_SERIOUS, "Syntax error: only a function or a token might be returned for a keyword");
  }
@} ;


/*
    ADD A CONDITION

    This action adds i to the current condition.
*/

<add-condition> : ( i : IDENTIFIER ) -> () = @{
    if ( crt_cond ) {
	crt_cond = xstrcat ( crt_cond, xstrcat ( " && ", @i ) ) ;
    } else {
	crt_cond = @i ;
    }
@} ;


/*
    COMPLEMENT CONDITION

    This action complements the current condition.
*/

<compl-condition> : () -> () = @{
    if ( crt_cond ) {
	if ( strchr ( crt_cond, '&' ) ) {
	    crt_cond = xstrcat ( xstrcat ( "!( ", crt_cond ), " )" ) ;
	} else {
	    crt_cond = xstrcat ( "!", crt_cond ) ;
	}
    }
@} ;


/*
    GET CONDITION

    This action gets the current condition.
*/

<get-condition> : () -> ( i : IDENTIFIER ) = @{
    @i = crt_cond ;
@} ;


/*
    SET CONDITION

    This action sets the current condition.
*/

<set-condition> : ( i : IDENTIFIER ) -> () = @{
    crt_cond = @i ;
@} ;


/*
    BOOLEANS

    These actions give the booleans true and false.
*/
/*
<true> : () -> ( b : BOOL ) =	@{ @b = 1 ; @} ;
<false> : () -> ( b : BOOL ) =	@{ @b = 0 ; @} ;
*/

/* 
   ZONES 

*/

/* 
   GLOBAL ZONE

   This action gives the global zone 
<global-zone> : () -> ( z:ZONE ) = @{
   @z=lxi_parse_tree.global_zone;
@};
*/  

/* 
   ADDING A NEW ZONE

   This action adds a a new zone
*/
<make-zone> : ( z : ZONE , i : IDENTIFIER, b : CHARACTERS, 
	      	binst : INSTRUCTIONS_LIST, e : CHARACTERS, 
		einst : INSTRUCTIONS_LIST) -> ( nz : ZONE) = 
@{
    instruction* inst;
    instructions_list* inst_list;
    @nz=add_zone(@z,@i,@e);
    @nz->entering_instructions=@binst;
    @nz->leaving_instructions=@einst;
    inst=add_instruction_pushzone(@nz);
    inst_list=add_instructions_list();
    *(inst_list->tail)=inst;
    inst_list->tail=&(inst->next);
    add_char ( @z, @z->zone_main_pass, @b, crt_cond, inst_list, NULL ) ;
@};

/* 
   IS THE ZONE GLOBAL

   This action report if the zone z is the global zone 
*/
<is-global-zone> : ( z : ZONE ) -> ( b : BOOL ) = @{
   @b=(@z==@z->top_level->global_zone);
@};

/* 
   These actions reports errors if zones contains
   other things than DEFAULT and TOKENS.
*/

<E_nonglobalzonekeyword> : () -> () = @{
    error( ERROR_SERIOUS, "Keywords not yet implemented in a non global zone ") ;

@};

<E_nonglobalzonegroup> : () -> () = @{
    error( ERROR_SERIOUS, "Groups not yet implemented in a non global zone ") ;
@};

/*
    SYNTAX ERROR

    This action reports a syntax error.
*/

<E_expected_identifier> : () -> (i:IDENTIFIER) = @{
	@i="";
	error(ERROR_SERIOUS, "Syntax error: expected identifier");
@};

<E_expected_range> : () -> () = @{
	error(ERROR_SERIOUS, "Syntax error: expected range");
@};

<E_expected_chars> : () -> (c:CHARACTERS) = @{
        @c = NULL ;
	error(ERROR_SERIOUS, "Syntax error: expected characters");
@};

<E_expected_colon>	 : () -> () = @{
	error(ERROR_SERIOUS, "Syntax error: expected colon \':\'");
@};


<syntax-error> : () -> () = @{
    error ( ERROR_SERIOUS, "Syntax error" ) ;
@} ;


%trailer% @{
@}, @{
#endif
@} ;
