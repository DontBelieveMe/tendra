/*
 * Copyright 2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

%prefixes%

	terminal = lct_;

%maps%

	lct-unit -> read_lct_unit;

	BOOL       -> bool;
	CODE       -> codeP;
	STRING     -> charP;
	IDENT      -> charP;
	PARAM_LIST -> paramP;
	ENTRYP     -> entryP;

%header% @{

	#include <string.h>

	#include <shared/bool.h>
	#include <shared/check.h>
	#include <shared/xalloc.h>
	#include <shared/string.h>
	#include <shared/error.h>

	#include <adt/action.h>
	#include <adt/entry.h>
	#include <adt/param.h>

	#include "lctsyntax.h"
	#include "lctlexer.h"
	#include "code.h"
	#include "ast.h"

	#define ADVANCE_LEXER    ADVANCE_LCT_LEXER
	#define CURRENT_TERMINAL CURRENT_LCT_TERMINAL
	#define SAVE_LEXER       SAVE_LCT_LEXER
	#define RESTORE_LEXER    RESTORE_LCT_LEXER

	typedef char *         charP;
	typedef struct code *  codeP;
	typedef struct entry * entryP;
	typedef struct param * paramP;

	void
	init_lct_ast(struct lct_ast *a)
	{
		a->headersdefined  = 0;
		a->trailersdefined = 0;

		a->hfileheader  = NULL;
		a->cfileheader  = NULL;
		a->hfiletrailer = NULL;
		a->cfiletrailer = NULL;

		a->arg_head = NULL;
		a->arg_tail = &a->arg_head;
	}

	struct ast *lxi_ast;
	struct lct_ast lct_ast;

@}, @{

	#ifndef LCT_SYNTAX_H
	#define LCT_SYNTAX_H

	#include <shared/bool.h>

	#include "code.h"
	#include "ast.h"

	struct lxi_additional_argument {
		char *name;
		char *ctype;

		struct lxi_additional_argument *next;
	};

	struct lct_ast {
		bool headersdefined;
		bool trailersdefined;

		struct code *hfileheader;
		struct code *cfileheader;
		struct code *hfiletrailer;
		struct code *cfiletrailer;

		struct lxi_additional_argument* arg_head;
		struct lxi_additional_argument** arg_tail;
	};

	extern struct ast *lxi_ast;
	extern struct lct_ast lct_ast;

	extern void init_lct_ast(struct lct_ast*);

@};

%assignments%

%parameter-assignments%

%result-assignments%

%terminals%

	ident: () -> (i :IDENT) = @{
		@i = xstrdup(lct_tokbuf);
	@};

	code-ident: () -> (i :IDENT) = @{
		@i = xstrdup(lct_tokbuf);
	@};

	code-ref: () -> (i :IDENT) = @{
		@i = xstrdup(lct_tokbuf);
	@};

	code-string: () -> (s :STRING) = @{
		@s = lct_token_string;
	@};

%actions%

	<true>:  () -> ( b :BOOL ) = @{ @b = 1; @};
	<false>: () -> ( b :BOOL ) = @{ @b = 0; @};

	<empty-ident>: () -> (s :IDENT) = @{
		@s = NULL;
	@};

	<init-code>: () -> (c :CODE) = @{
		@c = NULL;
	@};

	<append-code-at>: (c :CODE &) -> () = @{
		/* XXX: this should become just: s = <code-at>; <append-code-string>(s); */
		code_append_string(@&c, "@@");
	@};

	<append-code-string>: (c :CODE &, s :STRING) -> () = @{
		code_append_string(@&c, @s);
	@};

	<append-code-ident>: (c :CODE &, i :IDENT, e :ENTRYP, b :BOOL) -> () = @{
		if (@e == NULL) {
			error(ERR_SERIOUS, "The @@ code identifiers are not allowed in headers or trailers");
		} else {
			struct param *p, *q;

			if ((p = param_name_is_in(@e->u.act->in, @i)) ||
					(q = param_name_is_in(@e->u.act->out, @i))) {
				if (!@b) {
					code_append_ident(@&c, @i);
				} else {
					if (p && p->is_ref) {
						code_append_ref(@&c, @i);
					} else {
						error(ERR_SERIOUS, "In code block the \'@@&\' can only be used for input parameters that are references");
					}
				}
			} else {
				error(ERR_SERIOUS, "Identifier @@%s is neither an input nor an output "
					"parameter of action %s", @i, @e->key);
			}
		}
	@};

	<define-additional-argument>: (name :IDENT, ctype :IDENT) -> () = @{
		if (strlen(@name) > 0 && strlen(@ctype) > 0) {
			struct lxi_additional_argument *p;

			p = xmalloc(sizeof *p);
			p->name  = @name;
			p->ctype = @ctype;
			p->next  = NULL;

			*lct_ast.arg_tail = p;
			lct_ast.arg_tail = &p->next;
		}
	@};

	<set-headers>: (sc :CODE, sh :CODE) -> () = @{
		if (!lct_ast.trailersdefined) {
			lct_ast.headersdefined = 1;
			lct_ast.hfileheader = @sh;
			lct_ast.cfileheader = @sc;
		} else {
			error(ERR_SERIOUS, "Headers may not be redefined");
			code_destroy(@sc);
			code_destroy(@sh);
		}
	@};

	<set-trailers>: (sc :CODE, sh :CODE) -> () = @{
		if (!lct_ast.trailersdefined) {
			lct_ast.trailersdefined = 1;
			lct_ast.hfiletrailer = @sh;
			lct_ast.cfiletrailer = @sc;
		} else {
			error(ERR_SERIOUS, "Trailers may not be redefined");
			code_destroy(@sc);
			code_destroy(@sh);
		}
	@};

	<init-param>: () -> (a :PARAM_LIST) = @{
		@a = NULL;
	@};

	<append-param>: (a :PARAM_LIST &, id :IDENT, type :IDENT, isref :BOOL) -> () =@{
		struct entry *et = table_get_entry(&lxi_ast->table, @type);
		if (et == NULL) {
			error(ERR_SERIOUS, "Unknown type %s", @type);
		} else if (et->kind != ENTRY_TYPE) {
			error(ERR_SERIOUS, "%s is not a type", @type);
		} else {
			param_append(@&a, @id, et, @isref);
		}
	@};

	<get-entry-action>: (i :IDENT) -> (ea :ENTRYP) = @{
		@ea = table_get_entry(&lxi_ast->table, @i);
		if (@ea == NULL) {
			error(ERR_SERIOUS, "Defining an undeclared action: %s", @i);
		} else if (@ea->kind != ENTRY_ACTION) {
			@ea = NULL; /* TODO: skip to end of action */
			error(ERR_SERIOUS, "%s is not an action", @i);
		}
	@};

	<null-entry>: () -> (e :ENTRYP) = @{
		@e = NULL;
	@};

	<check-action-params>: (ea :ENTRYP, in :PARAM_LIST, out :PARAM_LIST) -> () = @{
		if (@ea) {
			/* TODO: assert (@ea->kind == ENTRY_ACTION); */
			/* TODO: check that the same name does not appear twice in the input and output tuple */

			if (param_length(@ea->u.act->in) != param_length(@in)) {
				error(ERR_SERIOUS, "Action %s declared with an incompatible number of inputs", @ea->key);
			} else if (!param_match(@ea->u.act->in, @in)) {
				error(ERR_SERIOUS, "params do not match for action %s", @ea->key);
			} else {
				int allhavenames = param_assign_names(@ea->u.act->in, @in);
				if (!allhavenames) {
					error(ERR_SERIOUS, "outputs tuples in action definition should have names");
				}
			}

			if (param_length(@ea->u.act->out) != param_length(@out)) {
				error(ERR_SERIOUS, "Action %s declared with an incompatible number of outputs", @ea->key);
			} else if (!param_match(@ea->u.act->out, @out)) {
				error(ERR_SERIOUS, "results do not match for action %s", @ea->key);
			} else {
				int allhavenames = param_assign_names(@ea->u.act->out, @out);
				if (!allhavenames) {
					error(ERR_SERIOUS, "outputs tuples in the definition of action %s should have names", @ea->key);
				}
			}
		}

		param_destroy(@in);
		param_destroy(@out);
	@};

	<define-action>: (ea :ENTRYP, c :CODE) -> () = @{
		if (@ea == NULL) {
			code_destroy(@c);
		} else {
			/* TODO: assert @ea->kind == ENTRY_ACTION */
			if (!@ea->u.act->defined) {
				@ea->u.act->defined = 1;
				@ea->u.act->code    = @c;
			} else {
				error(ERR_SERIOUS, "Action %s has already been defined", @ea->key);
			}
		}
	@};

	<E-syntax-error> = @{
		error(ERR_SERIOUS, "Syntax error");
	@};

	<E_expected_code_end> = @{
		error(ERR_SERIOUS, "Syntax error: expected  '@@}'");
	@};

	<E_expected_ident> = @{
		error(ERR_SERIOUS, "Syntax error: expected  identifier");
	@};

	<E_expected_code_start> = @{
		error(ERR_SERIOUS, "Syntax error: expected  '@@{'");
	@};

	<E_expected_comma> = @{
		error(ERR_SERIOUS, "Syntax error: expected ','");
	@};

	<E_expected_define> = @{
		error(ERR_SERIOUS, "Syntax error: expected '='");
	@};

	<E_expected_arrow> = @{
		error(ERR_SERIOUS, "Syntax error: expected '->'");
	@};

	<E_expected_semicolon> = @{
		error(ERR_SERIOUS, "Syntax error: expected ';'");
	@};

	<E_expected_colon> = @{
		error(ERR_SERIOUS, "Syntax error: expected ':'");
	@};

	<E_unexpected_eof> = @{
		error(ERR_SERIOUS, "Unexpected End of File inside @@{ @@} block");
	@};

	<E_lone_at_in_code_block> = @{
		error(ERR_SERIOUS, "Lone @@ inside @@{ @@} block");
	@};

%trailer% @{

@}, @{

	#endif

@};

