/* $Id$ */

/*
 * Copyright 2002-2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */

/*


    LEXICAL ANALYSER FOR LEXI

    This file describes the lexical analyser used by lexi.
*/

COPYRIGHT = "../doc/copyright/COPYING.dera-cc";

/*Actions*/
ACTION <init_token_buffer> ;
ACTION <push_token_buffer> : (:CHARACTER) -> ();
ACTION <finalize_token_buffer> ;
ACTION <E_eof_in_string>;
ACTION <E_newline_in_string>;

ACTION <token_keyword_match> : (:TERMINAL) -> (:TERMINAL);

ACTION <number_buffer_init> : () -> () ;
ACTION <number_buffer_push_digit> : (c:CHARACTER) -> ();

/* Character groups */
GROUP white = " \t\n\r" ;
GROUP alpha = {A-Z} + {a-z} + "_" ;
GROUP digit = {0-9} ;
GROUP alphanum = "[alpha][digit]" ;
GROUP alphanumhyphen = "[alphanum]-" ;

/* Simple symbols */
TOKEN "(" -> $open ;
TOKEN ")" -> $close ;
TOKEN "<" -> $begin-action ;
TOKEN ">" -> $end-action ;
TOKEN "{" -> $open-brace ;
TOKEN "}" -> $close-brace ;
TOKEN "->" -> $arrow ;
TOKEN ":" -> $colon ;
TOKEN "&" -> $reference ;
TOKEN ";" -> $semicolon ;
TOKEN "=" -> $equal ;
TOKEN "+" -> $plus ;
TOKEN "..." -> $range ;
TOKEN "\[...]" -> $range-closed-closed ;
TOKEN "\[...)" -> $range-closed-open ;
TOKEN "$$" -> $nothing-marker ;
TOKEN ","  -> $comma ;
TOKEN "\e" -> $eof ;
TOKEN "#n"       -> $arg-nb-of-chars ;
TOKEN "#*"       -> $arg-char-string ;

ZONE arg_char_nb_zone : "#[digit]" -> <number_buffer_init>, <number_buffer_push_digit> (#1)
     		      	  [...) 
		      	  "[^digit]" -> $arg-char-nb {
	TOKEN DEFAULT -> <number_buffer_push_digit> (#0);
}


/* Special strings */
TOKEN "{A-Z}" -> $upper ;
TOKEN "{a-z}" -> $lower ;
TOKEN "{0-9}" -> $digit ;

/* Comments, strings and identifiers */
ZONE comment : "/*" ... "*/" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;
}

ZONE line_comment : "//" ... "\n" {
        GROUP white = "";
        TOKEN DEFAULT -> $$;
}


//TOKEN "\"" -> $ = <get_string> () ;

ZONE stringzone : "\"" ->  <init_token_buffer> ... "\"" -> <finalize_token_buffer>, $string {
     	GROUP white = "";
	TOKEN DEFAULT -> <push_token_buffer>(#0);
	TOKEN "\\\"" -> <push_token_buffer>(#1);
	TOKEN "\\\\" -> <push_token_buffer>(#0), <push_token_buffer>(#0);
	TOKEN "\e" -> <E_eof_in_string>;
	TOKEN "\n" -> <E_newline_in_string>;
}


ZONE identifierzone : "[alpha]" ->  <init_token_buffer>, <push_token_buffer>(#0) [...) "[^alphanum]" -> <finalize_token_buffer>, $ = <token_keyword_match>($identifier) {
     	GROUP white = "";
	TOKEN DEFAULT -> <push_token_buffer>(#0);
}

ZONE sididentifierzone : "$[alpha]" ->  <init_token_buffer>, <push_token_buffer>(#1) [...) "[^alphanumhyphen]" -> <finalize_token_buffer>, $sid-identifier {
     	GROUP white = "";
	TOKEN DEFAULT -> <push_token_buffer>(#0);
}

TOKEN "$" -> $arg-return-terminal ;
TOKEN "!" -> $arg-ignore ;


/* Keywords */
KEYWORD "TYPE" -> $type-kw ;
KEYWORD "GROUP" -> $group ;
KEYWORD "ACTION" -> $action-kw ;
KEYWORD "KEYWORD" -> $keyword ;
KEYWORD "ZONE" -> $zone ;
KEYWORD "DEFAULT" -> $default ;
KEYWORD "MAPPING" -> $mapping ;
KEYWORD "TOKEN" -> $token ;
KEYWORD "white" -> $white ;
KEYWORD "COPYRIGHT" -> $copyright ;
