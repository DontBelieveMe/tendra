<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<!-- $Id$ -->

<chapter id="textinput">
	<title>Input syntax</title>

	<para>The overall input file format is as follows:</para>

	<programlisting language="bnf">algebra:
			ALGEBRA identifier version&opt.bnf;: item-list&opt.bnf;

version:
			(integer.integer)

item-list:
			item
			item-list item

item:
			primitive
			identity
			enumeration
			structure
			union</programlisting>

	<para>The initial identifier gives the overall name of the algebra.	A
		version number may also be associated with the algebra (if this is
		omitted the version is assumed to be 1.0). The main body of the
		algebra definition consists of a list of items describing the
		primitives, the identities, the enumerations, the structures and the
		unions comprising the algebra.</para>

	<para>Here <literal>identifier</literal> has the same meaning as in C.
		The only other significant lexical units are
		<literal>integer</literal>, which consists of a sequence of decimal
		digits, and <literal>string</literal>, which consists of any number of
		characters enclosed in double quotes. There are no escape sequences in
		strings. C style comments may be used anywhere in the input. White
		space is not significant.</para>

	<section id="inputprim">
		<title>Primitives</title>

		<para>Primitives form the basic components from which the other types in
			the algebra are built up. They are described as follows:</para>

		<programlisting language="bnf">primitive:
			object-identifier = quoted-type;</programlisting>

		<para>where the primitive identifier is given by:</para>

		<programlisting language="bnf">object-identifier:
			#&opt.bnf;:&opt.bnf; identifier
			#&opt.bnf;:&opt.bnf; identifier(identifier)</programlisting>

		<para>and the primitive definition is a string which gives the C type
			corresponding to this primitive:</para>

		<programlisting language="bnf">quoted-type:
			string</programlisting>

		<para>Note that each primitive (and also each identity, each
			enumeration, each structure and each union) has two names associated
			with it. The second name is optional; if it is not given then it is
			assumed to be the same as the first name. The first name is that which
			will be given to the corresponding type in the output file. The second
			is a short form of this name which will be used in forming constructor
			names etc. in the output.</para>

		<para>The optional hash and colon which may be used to qualify an object
			identifier are provided for backwards compatibility only and are not
			used in the output routines.</para>
	</section>

	<section id="inputident">
		<title>Identities</title>

		<para>Identities are used to associate a name with a particular type in
			the algebra. In this they correspond to <code>typedef</code>s in C.
			They are described as follows:</para>

		<programlisting language="bnf">identity:
			object-identifier = type;</programlisting>

		<para>where the definition type, <literal>type</literal>, is as described
			<link linkend="inputtype">below</link>.</para>
	</section>

	<section id="inputenum">
		<title>Enumerations</title>

		<para>Enumerations are used to define types which can only take values
			from some finite set. They are described as follows:</para>

		<programlisting language="bnf">enumeration:
			enum !&opt.bnf; object-identifier = { enumerator-list };
			enum !&opt.bnf; object-identifier = base-enumeration + { enumerator-list };</programlisting>

		<para>where:</para>

		<programlisting language="bnf">base-enumeration:
			identifier</programlisting>

		<para>is the name of a previously defined enumeration type.	The latter form
			is used to express extension enumeration types.	An enumeration type may
			be qualified by an exclamation mark to indicate that no lists of this
			type will be constructed.</para>

		<para>The enumeration constants themselves are defined as
			follows:</para>

		<programlisting language="bnf">enumerator:
			identifier
			identifier = enumerator-value

enumerator-list:
			enumerator
			enumerator-list, enumerator</programlisting>

		<para>Each enumerator is assigned a value in an ascending sequence,
			starting at zero. The next value to be assigned can be set using an
			<literal>enumerator-value</literal>. This is an expression formed from
			<literal>integer</literal>s, <literal>identifier</literal>s
			representing previous enumerators from the same enumeration, and the
			question mark character which stands for the previous enumeration
			value. The normal C arithmetic operations can be applied to build up
			more complex <literal>enumerator-value</literal>s. All enumerator
			evaluation is done in the <code>unsigned long</code> type of the host
			machine. Values containing more than 32 bits are not portable.</para>

		<para>Enumerations thus correspond to enumeration types in C, except
			that they are genuinely distinct types.</para>
	</section>

	<section id="inputstruct">
		<title>Structures</title>

		<para>Structures are used to build up composite types from other types
			in the algebra. They correspond to structures in C. They are described
			as follows:</para>

		<programlisting language="bnf">structure:
			struct object-identifier = component-group;
			struct object-identifier = base-structure + component-group;</programlisting>

		<para>where:</para>

		<programlisting language="bnf">base-structure:
			identifier</programlisting>

		<para>is the name of a previously defined structure type.	The latter form
			is used to express (single) inheritance of structures.	All components
			of the base structure also become components of the derived
			structure.</para>

		<para>The structure components themselves are defined as follows:</para>

		<programlisting language="bnf">component-group:
			{ component-list&opt.bnf; }

component-list:
			component-declarations;
			component-list component-declarations;

component-declarations:
			type component-declarators

component-declarators:
			component-declarator
			component-declarators, component-declarator

component-declarator:
			identifier component-initialiser&opt.bnf;

component-initialiser:
			= string</programlisting>

		<para>The optional <link linkend="outputstruct">component initialiser
			strings</link> are explained below.</para>

		<para>Structures are the only algebra construct which prevent the input
			from being a general graph. Unions may be defined in terms of
			themselves, but (as in C) pointers must be used to define structures
			in terms of themselves.</para>
	</section>

	<section id="inputunion">
		<title>Unions</title>

		<para>Unions are used to build up types which can hold a variety of
			information. They differ from C unions in that they are discriminated.
			They are described as follows:</para>

		<programlisting language="bnf">union:
			union object-identifier = component-group + field-group map-group&opt.bnf;;
			union object-identifier = base-union + field-group map-group&opt.bnf;;</programlisting>

			<para>where:</para>

		<programlisting language="bnf">base-union:
			identifier</programlisting>

		<para>is the name of a previously defined union type. The latter form is
			used to express (single) inheritance of unions. All components, fields
			and maps of the base union also become components of the derived
			union. Note that only new fields and maps can be added in the derived
			union.</para>

		<para>The <literal>component-group</literal> gives a set of components
			which are common to all the different union cases. The cases
			themselves are described as follows:</para>

		<programlisting language="bnf">field-group:
			{ field-list }

field:
			#&opt.bnf; #&opt.bnf; field-identifier-list-&gt;component-group
			#&opt.bnf; #&opt.bnf; field-identifier-list-&gt;base-field + component-group

base-field:
			identifier

field-list:
			field
			field-list, field

field-identifier:
			identifier

field-identifier-list:
			field-identifier
			field-identifier-list, field-identifier</programlisting>

		<para>The optional one or two hashes which may be used to qualify a list
			of field identifiers are used to indicate
			<link linkend="diskalias">aliasing</link> in the disk reading and
			writing routines.	The <literal>base-field</literal> case is a
			notational convenience which allows one field in a union to inherit
			all the components of another field.</para>

		<para>Note that a number of field identifiers may be associated with the
			same set of field components. Any such list containing more than one
			identifier forms a field identifier set, named after the first field
			identifier.</para>

		<para>In addition a number of maps may be associated with a union.
			These maps correspond to functions which take the union, plus a number
			of other map parameter types, and return the map return type. They are
			described as follows:</para>

		<programlisting language="bnf">map-group:
			:[map-list&opt.bnf;]

map:
			extended-type #&opt.bnf; identifier(parameter-list&opt.bnf;)

map-list:
			map
			map-list map</programlisting>

			<para>where:</para>

		<programlisting language="bnf">parameter-list:
			parameter-declarations
			parameter-list; parameter-declarations

parameter-declarations:
			extended-type parameter-declarators

parameter-declarators:
			identifier
			parameter-declarators, identifier</programlisting>

		<para>Note that the map parameter and return types are given by:</para>

<!-- TODO exdent? -->
		<programlisting language="bnf">extended-type:
								type
								quoted-type</programlisting>

		<para>In addition to the
			<link linkend="inputtype">types derived from the algebra</link> it is
			possible to use quoted C types in this context.</para>

		<para>A map may be qualified by means of a hash. This means that the
			associated function also takes a
			<link linkend="outputunionmaps">destructor function</link> as a
			parameter.</para>
	</section>

	<section id="inputtype">
		<title>Type constructors</title>

		<para>The types derived from the algebra may be described as follows:</para>

		<programlisting language="bnf">type:
			identifier
			PTR type
			LIST type
			STACK type
			VEC type
			VEC_PTR type</programlisting>

		<para>The simple types correspond to primitive, identity, enumeration,
			structure or union names. It is possible for a type to be used before
			it is defined, but it must be defined at some point.</para>

		<para>The derived type constructors correspond to pointers, lists,
			stacks, vectors and pointers into vectors. They may be used to build
			up further types from the basic algebra types.</para>
	</section>

	<section id="module">
		<title>Relations between algebras</title>

		<para>As <link linkend="options">mentioned above</link>, more than one
			input algebra may be specified to <command>calculus</command>. Each is
			processed separately, and output is generated for only one. By default
			this is the last algebra processed, however a specific algebra can be
			specified using the command-line option <option>-A</option>
			<option>name</option>, where <option>name</option> is the name of the
			algebra to be used for output.</para>

		<para>Types may be imported from one algebra to another by means of
			commands of the form:</para>

		<programlisting language="bnf">import:
			IMPORT identifier;
			IMPORT identifier::identifier;</programlisting>

		<para>which fit into the main syntax as an <literal>item</literal>. The
			first form imports all the types from the algebra given by
			<literal>identifier</literal> into the current algebra. The second
			imports a single type, given by the second
			<literal>identifier</literal> from the algebra given by the first
			<literal>identifier</literal>.</para>

		<para>Note that importing a type in this way also imports all the types
			used in its construction. This includes such things as structure
			components and union fields and maps. Thus an algebra consisting just
			of <literal>import</literal> commands can be used to express
			subalgebras in a simple fashion.</para>
	</section>
</chapter>

