<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">
<!--
  $Id$
-->
<chapter id="supplementary-unit">
	<title>Supplementary UNIT</title>

	<section id="LINKINFO_PROPS">
		<title>LINKINFO_PROPS</title>

		<literallayout>Number of encoding bits: 0</literallayout>
		<literallayout>Is coding extendable: no</literallayout>
		<literallayout>Unit identification: linkinfo</literallayout>

		<para>This is an additional <code>UNIT</code> which gives extra information
			about linking.</para>

		<section id="make_linkinfos">
			<title>make_linkinfos</title>

			<literallayout>Encoding number: 0</literallayout>

			<programlisting language="tdf">no_labels:       TDFINT
tds:             SLIST(LINKINFO)
		   -&gt; LINKINFO_PROPS</programlisting>

			<para>Makes the <code>UNIT</code>.</para>
		</section>
	</section>

	<section id="LINKINFO">
		<title>LINKINFO</title>

		<literallayout>Number of encoding bits: 2</literallayout>
		<literallayout>Is encoding extendable: yes</literallayout>

		<section id="static_name_def">
			<title>static_name_def</title>

			<literallayout>Encoding number: 1</literallayout>

			<programlisting language="tdf">assexp:          EXP POINTER x
id:              TDFSTRING(k, n)
		   -&gt; LINKINFO</programlisting>

			<para><replaceable>assexp</replaceable> will be an <replaceable>obtain_tag</replaceable>
				construction which refers to a <code>TAG</code> which is defined with
				<replaceable>make_id_tagdef</replaceable>,
				<replaceable>make_var_tagdef</replaceable> or
				<replaceable>common_tagdef</replaceable>. This <code>TAG</code> will not be
				linked to an <code>EXTERNAL</code>.</para>

			<para>The name <replaceable>id</replaceable> shall be used (but not exported, i.e.
				<replaceable>static</replaceable>) to identify the definition for subsequent
				linking.</para>

			<para><replaceable>This construction is likely to be needed for profiling, so
				that useful names appear for statically defined objects. It may also be
				needed when C++ is translated into C, in order to identify global
				initialisers.</replaceable></para>
		</section>

		<section id="make_comment">
			<title>make_comment</title>

			<literallayout>Encoding number: 2</literallayout>

			<programlisting language="tdf">n:               TDFSTRING(k, n)
		   -&gt; LINKINFO</programlisting>

			<para><replaceable>n</replaceable> shall be incorporated into the object file as a
				comment, if this facility exists. Otherwise the construct is ignored.</para>
		</section>

		<section id="make_weak_defn">
			<title>make_weak_defn</title>

			<literallayout>Encoding number: 3</literallayout>

			<programlisting language="tdf">namer:           EXP POINTER x
val:             EXP POINTER y
		   -&gt; LINKINFO</programlisting>

			<para><replaceable>namer</replaceable> and <replaceable>val</replaceable> will be
				<replaceable>obtain_tag</replaceable> constructions which refer to
				<code>TAG</code>s which are defined with
				<replaceable>make_id_tagdef</replaceable>,
				<replaceable>make_var_tagdef</replaceable> or
				<replaceable>common_tagdef</replaceable>. They shall be made synonymous.</para>
		</section>

		<section id="make_weak_symbol">
			<title>make_weak_symbol</title>

			<literallayout>Encoding number: 4</literallayout>

			<programlisting language="tdf">id:              TDFSTRING(k, n)
val:             EXP POINTER x
		   -&gt; LINKINFO</programlisting>

			<para><replaceable>val</replaceable> will be an <replaceable>obtain_tag</replaceable>
				construction which refers to a <code>TAG</code> which is defined with
				<replaceable>make_id_tagdef</replaceable>,
				<replaceable>make_var_tagdef</replaceable> or
				<replaceable>common_tagdef</replaceable>.</para>

			<para>This <code>TAG</code> shall be made <replaceable>weak</replaceable> (in the
				same sense as in the SVID ABI Symbol Table), and <replaceable>id</replaceable>
				shall be synonymous with it.</para>
		</section>
	</section>
</chapter>
