<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd">

<!-- $Id$ -->
<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<refentryinfo>
		<productname>tdf</productname>
	</refentryinfo>

	<refmeta>
		<refentrytitle>tdf</refentrytitle>
		<manvolnum>5</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>tdf</refname>
		<refpurpose>File Formats</refpurpose>
	</refnamediv>

	<refsection id="introduction">
		<title>Introduction</title>

		<para>This document describes two TDF file formats: the capsule format and
			the library format. It also describes the format of the linker
			information units within capsules. The capsule format is described
			in more detail in the &tdf; specification.</para>
	</refsection>

	<refsection id="structures">
		<title>Basic &tdf; Structures</title>

		<para>The structure of a &tdf; capsule is defined properly in the
			&tdf-spec.doc;.
			This section describes the basic components of the &tdf; format that
			the linker uses, and the remaining sections describe the format of a
			&tdf; capsule, a &tdf; library and a linker information unit in
			terms of these components.
			The basic components are:</para>

		<variablelist>
			<varlistentry>
				<term>ALIGN</term>

				<listitem>
					<para>This is a byte alignment.  It forces the next object to
						begin on an eight bit boundary.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>TDFINT</term>

				<listitem>
					<para>This is an unsigned number of unbounded size.
						Its representation is described properly in the &tdf;
						specification.  It is a series of nibbles (four bits), with
						the high bit used as a terminator and the low three bits
						used as an octal digit.  The terminator bit is set on the
						final octal digit.  As an example, the number ten would be
						represented (in binary) as: <code>0001 1010</code>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>BYTE</term>

				<listitem>
					<para>This is an eight bit quantity.
						BYTEs are always aligned on an eight bit boundary.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>TDFIDENT</term>

				<listitem>
					<para>A TDFIDENT is a sequence of characters.  It is possible to
						change the size of the characters, although the current
						implementation will produce an error for TDFIDENTs with
						character sizes other than eight bits.  A TDFIDENT is
						represented by two TDFINTs (the size of the characters in
						bits and the number of characters in the TDFIDENT), and a
						sequence of BYTEs.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>UNIQUE</term>

				<listitem>
					<para>A UNIQUE is a list of TDFIDENTs.  It is represented as a
						TDFINT specifying the number of TDFIDENTs in the UNIQUE,
						followed by that many TDFIDENTs.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>EXTERNAL</term>

				<listitem>
					<para>An EXTERNAL is a mechanism for identifying external
						identifiers.  It is represented as a discriminating tag,
						followed by a byte ALIGNment, followed by either a TDFIDENT
						or a UNIQUE.  The tag is a two bit number, where one
						represents a TDFIDENT, two represents a UNIQUE, and zero and
						three are currently illegal.  UNIQUEs are only used as part
						of an EXTERNAL; TDFIDENTs are used as entities in their own
						right, as well as in EXTERNALs.</para>
				</listitem>
			</varlistentry>
		</variablelist>

		<para>In the following descriptions, the syntax "&lt;name&gt;: &lt;type&gt;" is used to
			specify an object in the structure.  The "&lt;name&gt;" is used to describe the
			purpose of the object; the "&lt;type&gt;" is used to describe what the object
			is.  A "&lt;type&gt;" is one of the following:</para>

		<variablelist>
			<varlistentry>
				<term>&lt;basic_type&gt;</term>

				<listitem>
					<para>This represents one of the basic types listed
						above.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&lt;type&gt; * &lt;integer&gt;</term>

				<listitem>
					<para>This represents a sequence of objects of the specified type.
						The &lt;integer&gt; may be either an integer literal, or a
						name that has been previously mentioned and is a TDFINT
						object.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>{ &lt;name1&gt;: &lt;type1&gt; ... &lt;nameN&gt;: &lt;typeN&gt; }</term>

				<listitem>
					<para>This represents a structure composed of the elements
						"&lt;name1&gt;: &lt;type1&gt;" to "&lt;nameN&gt;: &lt;typeN&gt;".
						It is used for sequences of objects where the objects are not of basic
						types.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&lt;type&gt; = ( &lt;value1&gt; | ... | &lt;valueN&gt; )</term>

				<listitem>
					<para>This represents a type with a constraint imposed upon it.
						The object value must be one of &lt;value1&gt;
						to &lt;valueN&gt;.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection id="structure">
		<title>Structure of a &tdf; Capsule</title>

		<para>A &tdf; capsule has the following structure:</para>

		<programlisting language="bnf">magic				BYTE * 4 = "TDFC"
major_version			TDFINT
minor_version			TDFINT
				ALIGN
num_prop_names:			TDFINT
prop_names:				TDFIDENT * num_prop_names
num_linkable_entities:		TDFINT
linkable_entities:			{
name:				TDFIDENT
num_capsule_scope_identifiers:	TDFINT
} * num_linkable_entities
num_external_linkages:		TDFINT = num_linkable_entities
external_linkages:			{
num_entries:			TDFINT
entries:			{
	capsule_scope_id:		TDFINT
	external_name:		EXTERNAL
} * num_entries
} * num_external_linkages
num_unit_groups:			TDFINT = num_prop_names
unit_groups:			{
num_units:			TDFINT
units:				{
	num_counts:			TDFINT = (num_linkable_entities | 0)
	counts:			TDFINT * num_counts
	num_link_sets:		TDFINT = num_counts
	link_sets:			{
	num_links:		TDFINT
	links:			{
		internal:		TDFINT
		external:		TDFINT
	} * num_links
	} * num_link_sets
	num_bytes_tdf:		TDFINT
	tdf:			BYTE * num_bytes_tdf
} * num_units
} * num_unit_groups</programlisting>

		<para>The rest of this section describes the format of a capsule.</para>

		<!-- TODO: this needs a little markup for replaceables, literals etc -->

		<para>The capsule begins with a header that contains a four byte magic number
			("&lt;magic&gt;": "TDFC"), followed by the major ("&lt;major_version&gt;") and minor
			("&lt;minor_version&gt;") version numbers of the &tdf; in the capsule.  This is then
			followed by a byte alignment and then the the capsule body.</para>

		<para>The first part of a capsule tells the linker how many types of unit groups
			there are in the capsule ("&lt;num_prop_names&gt;"), and what the names of these
			unit group types are ("&lt;prop_names&gt;").  There can be many unit group types,
			but the linker must know what they are called, and the order in which they
			should occur.  At present the linker knows about "tld", "tld2", "versions",
			"tokdec", "tokdef", "aldef", "diagtype", "tagdec", "diagdef", "tagdef" and
			"linkinfo" (this can be changed from the command line).  There is nothing
			special about any unit group type except for the "tld" unit group type,
			which contains information that the linker uses (and the "tld2" unit group
			type, which is obsolete, but is treated as a special case of the "tld" unit
			group type).  The format of the "tld" unit group type is described in a
			later section.</para>

		<para>The second part of the capsule tells the linker how many linkable entities
			it should be linking on ("&lt;num_linkable_entities&gt;"), the name of each
			linkable entity ("&lt;name&gt;"), and the number of identifiers of each linkable
			entity at capsule scope ("&lt;num_capsule_scope_identifiers&gt;").
			Identifiers at capsule scope should be numbers from zero to one less than
			"&lt;num_capsule_scope_identifiers&gt;".  The identifier allocation may be sparse,
			but the linker is optimized for continuous identifier allocation.</para>

		<para>The third part of the capsule tells the linker which external names the
			capsule contains for each linkable entity.  For each linkable entity listed
			in the second part, the number of external names of that linkable entity are
			listed in this part ("&lt;num_entries&gt;"), along with each of the external names
			("&lt;external_name&gt;") and the corresponding capsule scope identifiers
			("&lt;capsule_scope_id&gt;").  The ordering of the linkable entities in part three
			must be identical to the ordering of linkable entities in part two.</para>

		<para>The fourth and final part of the capsule contains the unit groups
			themselves.  The unit groups occur in the same order as the unit group types
			were listed in part one.  For each unit group, there is a TDFINT specifying
			the number of units in that unit group ("&lt;num_units&gt;"), followed by that
			many units.</para>

		<para>Each unit contains a list of counts ("&lt;counts&gt;") and the number of counts in
			that list ("&lt;num_counts&gt;"), which must be either zero or the same as the
			number of linkable entities in the capsule ("&lt;num_linkable_entities&gt;").
			Each count contains the number of unit scope identifiers of the given
			linkable entity in the unit.  If the number of counts is non-zero, then the
			counts must be in the same order as the linkable entity names.</para>

		<para>After the counts come the unit scope identifier to capsule scope identifier
			mapping tables.  The number of these tables is specified by
			"&lt;num_link_sets&gt;" and must be the same as the number of counts
			("&lt;num_counts&gt;"), which is either zero or the same as the number of linkable
			entities in the capsule.  There is one table for each linkable entity (if
			"&lt;num_link_sets&gt;" is non-zero), and each table contains "&lt;num_links&gt;" pairs
			of TDFINTs.  The "&lt;internal&gt;" TDFINT is the unit scope identifier; the
			"&lt;external&gt;" TDFINT is the capsule scope identifier.</para>

		<para>After the mapping tables there is a length ("&lt;num_bytes_tdf&gt;"), and that many
			bytes of &tdf; data ("&lt;tdf&gt;").</para>
	</refsection>

	<refsection id="unitgroups">
		<title>Linker Information Unit Groups</title>

		<para>The "tld" unit group (if it exists in the capsule) should contain one unit
			only.  This unit should begin with two zeroes (i.e. no counts, and no
			identifier mapping tables), a length (which must be correct), and a sequence
			of bytes.</para>

		<para>The bytes encode information useful to the linker.  The first thing in the
			byte sequence of a "tld" unit is a TDFINT that is the type of the unit.
			What follows depends upon the type.  There are currently two types that are
			supported: zero and one.  Type zero units contain the same information as
			the old "tld2" units (if a "tld2" unit is read, it is treated as if it were
			a "tld" unit that began with a type of zero; it is illegal for a capsule to
			contain both a "tld" unit group and a "tld2" unit group).  Type one units
			contain more information (described below), and are what the linker writes
			out in the generated capsule.</para>

		<para>A version one unit contains a sequence of TDFINTs.  There is one TDFINT for
			each external name in part two of the capsule.  These TDFINTs should be in
			the same order as the external names were.  The TDFINTs are treated as a
			sequence of bits, with the following meanings:</para>

		<table>
			<col align="center"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Bit</th>
					<th>Meaning if set</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>0</code></td>
					<td>The name is used within this capsule.</td>
				</tr>

				<tr>
					<td><code>1</code></td>
					<td>The name is declared within this capsule.</td>
				</tr>

				<tr>
					<td><code>2</code></td>
					<td>The name is uniquely defined within this capsule.
						If this bit is set for a tag, then the declared bit
						must also be set (i.e. a declaration must exist).</td>
				</tr>

				<tr>
					<td><code>3</code></td>
					<td>The name is defined in this capsule, but may have
						other definitions provided by other capsules.  This
						bit may not be set for tokens.  If a tag has this
						bit set, then the declared bit must also be set
						(i.e. a declaration must exist).</td>
				</tr>
			</tbody>
		</table>

		<para>All of the other bits in the TDFINT are reserved.  The linker uses the
			information provided by this unit to check that names do not have multiple
			unique definitions, and to decide whether libraries should be consulted to
			provide a definition for an external name.  If a capsule contains no linker
			information unit group, then the external names in that capsule will have no
			information, and hence these checks will not be made.  A similar situation
			arises when the information for a name has no bits set.</para>

		<para>A version zero unit contains a sequence of TDFINTs.  There is one TDFINT
			for each external token name, and one TDFINT for each external tag name.
			These TDFINTs should be in the same order as the external names were (but
			the tokens always come before the tags).  The TDFINTs are treated as a
			sequence of bits, with the same meanings as above.</para>
	</refsection>

	<refsection id="library">
		<title>Structure of a &tdf; Library</title>

		<para>A &tdf; library begins with a header, followed by a TDFINT, that is the type
			of the library.  At present only type zero libraries are supported.
			The format of a type zero library is as follows:</para>

		<programlisting language="bnf">magic:				BYTE * 4 = "TDFL"
major_version:			TDFINT
minor_version:			TDFINT
				ALIGN
type:				TDFINT = 0
num_capsules:			TDFINT
capsules:				{
capsule_name:			TDFIDENT
capsule_length:			TDFINT
capsule_body:			BYTE * capsule_length
} * num_capsules
num_linkable_entities:		TDFINT
linkable_entities:			{
linkable_entity_name:		TDFIDENT
num_this_linkable_entity:	TDFINT
this_linkable_entity_names:	{
	name:			EXTERNAL
	info:			TDFINT
	capsule:			TDFINT
	} * num_this_linkable_entity
} * num_linkable_entities</programlisting>

		<para>The library begins with a four byte magic number ("&lt;magic&gt;": "TDFL"),
			followed by the major ("&lt;major_version&gt;") and minor ("&lt;minor_version&gt;")
			versions of the &tdf; in the library (the major version must be the same for
			each capsule in the library; the minor version is the highest of the minor
			version numbers of all of the the capsules contained in the library).  This
			is followed by a byte alignment, the type of the library ("&lt;type&gt;": 0), and
			the number of capsules in the library ("&lt;num_capsules&gt;"), followed by that
			many capsules.</para>

		<para>Each of the "&lt;capsules&gt;" has a name ("&lt;capsule_name&gt;"), and the capsule
			content, which consists of the length of the capsule ("&lt;capsule_length&gt;")
			and that many bytes ("&lt;capsule_body&gt;").  The capsule name is the name of the
			file from which the capsule was obtained when the library was built.  The
			names of capsules within a library must all be different.</para>

		<para>The library is terminated by the index.  This contains information about
			where to find definitions for external names.  The index begins with the
			number of linkable entities whose external names the library will provide
			definitions for ("&lt;num_linkable_entities&gt;").</para>

		<para>For each of these linkable entities, the linkable entity index begins with
			the name of the linkable entity ("&lt;linkable_entity_name&gt;"), followed by the
			number of external names of the linkable entity that have entries in the
			index ("&lt;num_this_linkable_entity&gt;").  This is followed by the index
			information for each of the names.</para>

		<para>For each name, the index contains the name ("&lt;name&gt;"); a TDFINT that
			provides information about the name ("&lt;info&gt;") with the same meaning as the
			TDFINTs in the linker information units; and the index of the capsule that
			contains the definition for the name ("&lt;capsule&gt;").  The index of the first
			capsule is zero.</para>
	</refsection>

	<refsection>
          <!-- NOTE: This section seems to be tld specific and should perhaps be moved into tld.5. -->
		<title>Rename File Syntax</title>

		<para>Renaming may be specified either on the command line, or in a file.
			The files that specify the renamings to be performed have the following syntax.
			The file consists of a number of sections.  Each section begins with a shape
			name, followed by zero or more pairs of external names (each pair is
			terminated by a semi-colon).  Shape names are written as a sequence of
			characters surrounded by single quotes.  Unique names have the same syntax
			as described above.  String names are a sequence of characters surrounded by
			double quotes.
			The normal backslash escape sequences are supported.
			The hash character acts as a comment to end of line character (if this is
			necessary).</para>
	</refsection>

	<refsection>
          <!-- NOTE: This section seems to be tld specific and should perhaps be moved into tld.5. -->
		<title>Unit Set File Syntax</title>

		<para>The file should consist of a sequence of strings enclosed in double quotes.
			The backslash character can be used to escape characters.  The following C
			style escape sequences are recognized:</para>

		<table>
			<col align="center"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Sequence</th>
					<th>Meaning</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><literal>\n</literal></td>
					<td>Newline</td>
				</tr>
				<tr>
					<td><literal>\r</literal></td>
					<td>Carriage return</td>
				</tr>
				<tr>
					<td><literal>\t</literal></td>
					<td>Tab</td>
				</tr>
				<tr>
					<td><literal>\ </literal></td>
					<td>Space</td>
				</tr>
				<tr>
					<td><literal>\x</literal><replaceable>AB</replaceable></td>
					<td>&ascii; character <replaceable>AB</replaceable>
						(in hex)</td>
				</tr>
			</tbody>
		</table>

		<para>The order of the strings is important, as it specifies the order
			that the unit sets should be in when read from capsules.
			It is necessary to specify the &tld; unit set name.</para>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&tld;.</para>

		<para>&tdf-spec.doc;.</para>
	</refsection>

</refentry>

