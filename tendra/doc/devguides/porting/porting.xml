<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
	<!ENTITY tdf "<acronym>TDF</acronym>">
	<!ENTITY cpu "<acronym>CPU</acronym>">
	<!ENTITY api "<acronym>API</acronym>">
]>

<!--
  $Id$
-->

<article>
  <articleinfo>
    <title>Porting TenDRA to Different Operating Systems</title>

	<author>
		<firstname>Katherine</firstname>
		<surname>Flavel</surname>
		<affiliation><orgname>The TenDRA Project</orgname></affiliation>
	</author>

	<!-- (to be filled out by whoever writes this...)
    <author>
      <firstname>Jeroen</firstname>
      <surname>Ruigrok van der Werven</surname>
    </author>
    <authorinitials>JRvdW</authorinitials>
    <pubdate>2005</pubdate>

    <copyright>
      <year>2004</year>
      <year>2005</year>

      <holder>The TenDRA Project</holder>
    </copyright>

    <copyright>
      <year>1998</year>

      <holder>DERA</holder>
    </copyright>
	-->
  </articleinfo>

	<!--
		A guide to the process of porting to a new operating system.

		This should be a fairly straightforward guide; for the moment
		we can leave out writing new installers, and just concentrate
		on the build system.

		Unless there are things I'm unaware of, this is as
		straightforward as simply editing tbe makedefs file, and
		letting bmake take care of all the platform-specific things?

		So this should probably just talk about that, and explain what
		each field is, and why it's required.

		- kate
	-->

	<section>
		<title>Indicating &api; Conformance</title>

		<para>This chapter explains how to state to TenDRA which
			&api;s your system conforms to, and which
			it does not. This process refers to the database of known
			&api;s (defined using
			<application>Tspec</application>), and deals with handling
			discreprancies between that database and your system.</para>

		<para>It is possible that your system claims conformance to more
			modern &api;s than the database currently specifies; in this case
			the database would need that &api; adding, first. See the
			<!-- TODO link --><citetitle>Adding new &api;s with tspec</citetitle>
			developer guide for details of that process. The rest of this
			document assumes that the &api;s in question are already present in
			that database.</para>

		<para>Given a set of well-defined &api;s and an operating system which
			claims conformance to them, it is required for generating portable
			&tdf; that devations from these &api;s be registered. The
			motivation behind this registration is explained in the <!-- TODO
			link --><citetitle>&tdf; and Portability</citetitle> paper. This
			registration process guarentees that &tdf; generated will be
			portable between systems which implement the same &api;, even if
			their implementations differ in portions which are not used (as is
			usually the case). Non-portable code (with access to all the system
			provides) may be generated using the <quote>special</quote> &api;
			referenced by <code>-Ysystem</code>, which uses the system headers
			as-is.</para>

		<para>With this in mind, the purpose of this chapter is to describe the
			process of registering the various places in which your system
			deviates from the &api;s it claims to implement. Deviations are
			categorised as one of two types:</para>

		<itemizedlist>
			<listitem>
				<para>Workarounds (hacks) for when the &api;s are semantically
					valid, but have inappropiate values, minor syntatic errors,
					or definitions in the wrong headers and suchlike.</para>
			</listitem>

			<listitem>
				<para>Marking them invalid (<quote><code>__WRONG_*</code></quote>),
					for when they are complete nonsense, or not standard C.</para>
			</listitem>
		</itemizedlist>

		<para><!-- TODO link -->papers/porting explains the difference, and the
			rationalle behind it. Several specific examples are given there,
			and this document will not repeat them unneccessarily.</para>

		<!-- TODO
From the FAQ:

    2.  QUESTION: I try to build the release, but I am having problems
        in the API library building phase.
		-->

        <para>Unfortunately this area is <emphasis>very</emphasis> operating
			system dependent.  It has been set up so that it works for the
			operating systems listed under the supported platforms, but this
			is not a cast iron guarantee that it will work for other versions
			of the same operating system.</para>

		<section>
			<title>Workarounds</title>

			<para>Workarounds are used to provide a mechanism to modify
				system headers, where they are non-conformant in minor ways.
				<!-- TODO link -->portability#2.2.4.3 gives some examples
				of this. It is important that these workarounds are only applied
				when the modified system headers would still be a valid interface
				for the existing system libraries, otherwise incompatibilities
				would be introduced. Do not use work-arounds for other
				situations.</para>

<!-- TODO
Versioning:
1. of the api (separate APIs inheriting). state how it manifests. e.g. workaround for posix2 to have that _max value as 255 instead of 256
2. of the OS (#ifdef); document elsewhere versioning within an OS - #idef on their version
-->

			<para>Some understanding of how the system works is useful in trying
				to work round problems.  The start-up files describing the
				macros needed to nagivate the system headers for a particular
				&api; are found in:</para>

			<programlisting>src/lib/machines/<replaceable>&lt;os&gt;</replaceable>/<replaceable>&lt;cpu&gt;</replaceable>/startup/<replaceable>&lt;api&gt;</replaceable>.h</programlisting>

			<para>where <replaceable>&lt;os&gt;</replaceable> is the operating
				system name, <replaceable>&lt;cpu&gt;</replaceable> is the &cpu; type,
				and <replaceable>&lt;api&gt;</replaceable> is the &api; name.
				A set of replacement system headers, which are checked before
				the real system headers, are found in:</para>

			<programlisting>src/lib/machines/<replaceable>&lt;os&gt;</replaceable>/<replaceable>&lt;cpu&gt;</replaceable>/include</programlisting>

			<para>These are also used with the <option>-Ysystem</option>
				option to tcc, modifications which are specific to library
				building, should be enclosed in:</para>

			<programlisting language="C">
#ifdef __BUILDING_LIBS
.....
#endif</programlisting>

			<para>Good places to look for inspiration on how to customise these
				files for your particular system include looking to see how
				things were done under similar circumstances.  Often a problem
				crops up on more than one machine; we may have a workround which
				works on another platform which you can use for inspiration.</para>

			<para>If you don't intend to re-distribute the TenDRA source code
				you also have an option which, for copyright reasons, is not
				available to us.  You can copy the system header into the include
				directory above and make minor corrections directly.</para>
		</section>

		<section>
			<title><code>__WRONG</code> Headers</title>

			<para>If all else fails you can tell the library building to ignore
				the header. Find the source file which is failing to compile.
				This should contain lines like:</para>

			<programlisting language="C">
#define __BUILDING_TDF_<replaceable>&lt;API&gt;</replaceable>_<replaceable>&lt;HEADER&gt;</replaceable>
#ifndef __WRONG_<replaceable>&lt;API&gt;</replaceable>
#ifndef __WRONG_<replaceable>&lt;API&gt;</replaceable>_<replaceable>&lt;HEADER&gt;</replaceable>
....
#endif /* __WRONG_<replaceable>&lt;API&gt;</replaceable> */
#endif /* __WRONG_<replaceable>&lt;API&gt;</replaceable>_<replaceable>&lt;HEADER&gt;</replaceable> */</programlisting>

			<para>If you insert the line:</para>

			<programlisting language="C">#define __WRONG_<replaceable>&lt;API&gt;</replaceable>_<replaceable>&lt;HEADER&gt;</replaceable></programlisting>

			<para>in the corresponding API start-up file:</para>

			<programlisting>src/lib/machines/<replaceable>&lt;os&gt;</replaceable>/<replaceable>&lt;cpu&gt;</replaceable>/startup/<replaceable>&lt;api&gt;</replaceable>.h</programlisting>

			<para>then the library builder will ignore this header.  There will
				be a compile-time error (<quote>token not defined</quote>)
				if one of the features from this header is subsequently attempted
				to be used.</para>
		</section>
	</section>
</article>

