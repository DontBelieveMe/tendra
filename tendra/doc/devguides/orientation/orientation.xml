<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

	<!ENTITY api "<acronym>API</acronym>">
	<!ENTITY tdf "<acronym>TDF</acronym>">
	<!ENTITY tendra "TenDRA">
	<!ENTITY ansi "TenDRA">
	<!ENTITY tspec "Tspec">
	<!ENTITY ultrix "<acronym>ULTRIX</acronym>">
]>

<article xmlns:dt="http://xml.water-powered.com/doctools">

	<articleinfo>
		<title>Orientation Guide</title>

		<author>
			<firstname>Katherine</firstname>
			<surname>Flavel</surname>
			<affiliation><orgname>The TenDRA Project</orgname></affiliation>
		</author>

		<copyright>
			<year>2008</year>

			<holder>The TenDRA Project</holder>
		</copyright>
	</articleinfo>

	<section>
		<title>Introduction</title>

		<para>&tendra; is a relatively complex system. This document attempts
			to orientate the reader amongst the maze of file types, and to
			help show how it all fits together. This document focuses mostly
			on what files live where, and how they are involved. It does not
			discuss the minutiae within each stage.</para>

		<para>This document contains a few examples, and it is recommended that
			you follow along and experiment with various alterations whilst
			reading.</para>
	</section>

	<section>
		<title>Building &api;s</title>

		<para>The &api; checking is one of the more interesting areas of
			&tendra;. An overview of the process of building &api;s is
			given in <xref linkend="apibuilding"/>.</para>

		<figure id="apibuilding">
			<title>Files Involved For Building &api;s</title>

			<graphic fileref="apibuilding.png"/>
		</figure>

		<para>An &api; consists of abstract specifications of a set of
			&api;s<footnote>
				<para><dt:source path="/tendra/src/lib/apis/"/></para>
			</footnote> which represent a similar level of abstraction that their
			respective standards represent. For example, <code>size_t</code>
			for the &ansi; &api; is defined to be an unsigned arithmetic
			type, but exactly which type is left to the implementation.
			See <dt:doc name="tspecguide"/> for details on specifying
			&api;s.</para>

		<para>These abstract specifications are converted by &tspec; into
			API Source and API Includes. The API Includes contain
			<code>#pragma token</code> statements which create tokens that
			correspond to the various things the API defines. Details of these
			are documented in the <code>tdfc2</code> guide. These are used
			later on, during compilation of users' programs.</para>

		<para>The generated API Source from &tspec; contains implementations of
			just the symbols present in each header for an &api; (as opposed to
			all the extensions your system probably provides), guarded by
			preprocessor conditions. These guards are of a standard form; for
			example, <code>ssize_t.c</code> from the <code>posix1</code>
			&api;:</para>

<programlisting language="C">
/* AUTOMATICALLY GENERATED BY tspec 2.8 */
#ifndef __WRONG_POSIX1
#ifndef __WRONG_POSIX1_SYS_TYPES_H_SSIZE_T
#if #include ( sys/types.h )
#define __BUILDING_TDF_POSIX1_SYS_TYPES_H_SSIZE_T
#include &lt;sys/types.h&gt;
#endif
#endif

#ifndef __BUILDING_TDF_POSIX1_SYS_TYPES_H_SSIZE_T
#pragma TenDRA no token definition allow
#endif
#pragma implement interface &lt;../shared/posix1.api/ssize_t.h&gt;
#endif</programlisting>

		<para>In the &api; specifications fed to &tspec;, <code>ssize_t</code>
			is a subset; the <code>__WRONG_POSIX1_SYS_TYPES_H_SSIZE_T</code>
			guard above is provided so that it may be excluded if your
			system does not have a compliant implementation of
			<code>ssize_t</code>.</para>

		<para>Non-compliance for a particular machine is indicated by
			setting <code>__WRONG_*</code> macros in the start-up files for
			that machine. Hence for &ultrix;, which (apparently) has a
			<code>ssize_t</code> incompatible to the <code>posix1</code>
			&api;'s, <dt:source href="/tendra/src/lib/machines/ultrix/mips/startup/posix1.h">the Startup header for &ultrix;</dt:source> defines <code>__WRONG_POSIX1_SYS_TYPES_H_SSIZE_T</code> and hence <code>ssize_t</code> is omitted when
			compiling the &tspec; &api; Source into the &api; &tdf; Tokens..</para>

		<para>The compiled &api; &tdf; Tokens are linked together into
			<code>.tl</code> libraries; each library represents an
			&api;. As explained above, the contents of these libraries
			are the intersection of the sets of the things defined in
			that particular &api; and what your system provides.</para>
	</section>

	<section>
		<title>Compiling</title>

		<para>Based on the files installed, the process of compilation is
			outlined in <xref linkend="compilation"/>. These steps may be
			seen by executing <code>tcc -dry</code>.</para>

		<figure id="compilation">
			<title>Files involved during compilation</title>

			<graphic fileref="compilation.png"/>
		</figure>

		<para>C is used as an example here, though the similar things
			apply for any other producer. The main difference would be in
			&api; checking.</para>

		<para>It is important to note that during compilation the system
			headers are not used at all. Instead, the various prototypes and
			such which would be bought in by <code>#include</code> statements
			are prepended from the API Includes. These can be seen by running
			<code>tcc -E</code>:</para>

<programlisting language="C">
clarion% tcc -Yansi -E hello.c
#line 1 "hello.c"
...
#line 13 "/home/kate/lib/TenDRA/lib/include/shared/ansi.api/size_t.h"
...
#pragma token VARIETY unsigned size_t # size_t
#pragma token VARIETY __size_t # __size_t
#pragma promote size_t : __size_t

#pragma no_def size_t __size_t

...
#line 25 "/home/kate/lib/TenDRA/lib/include/ansi.api/stdio.h"
#pragma token EXP rvalue : FILE * : stdin # ansi.stdio.stdin
#pragma token EXP rvalue : FILE * : stdout # ansi.stdio.stdout
#pragma token EXP rvalue : FILE * : stderr # ansi.stdio.stderr
...
#pragma token FUNC int ( __local_printf_string, ... ) : printf # ansi.stdio.printf

#line 3 "hello.c"
int main(void) {
        printf("hello, world\n");
        return 0;
}</programlisting>

		<para>Here I've omitted most of the things <code>&lt;stdio.h&gt;</code>
			defines, just to keep the example small.</para>

		<para>The final step of linking also brings in any system-specific
			libraries which may be required (such as <code>crt0.o</code>).
			These are not illustrated.</para>
	</section>

</article>

