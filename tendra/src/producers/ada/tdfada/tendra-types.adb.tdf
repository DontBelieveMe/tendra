@use all
@special version_props
--
--  AUTOMATICALLY GENERATED FROM TDF %VA.%VB
--  BY %ZX (VERSION %ZV), DO NOT EDIT
--

package body TenDRA.Types is

   ---------------
   -- Arguments --
   ---------------
   
   function Arguments (Item : Construct) return Argument_List is
   begin
      case Item is
@loop sort
@if sort.simple
@loop sort.cons
@if cons.params
         when c_%CN =>
            return
@loop cons.param
@if param.first
              (%
@else
               %
@endif
@if param.sort.option
%PE => (%PSST_SORT, Optional,%
@else
@if param.sort.list
%PE => (%PSST_SORT, List_Element,%
@else
@if param.sort.slist
%PE => (%PSST_SORT, SList_Element,%
@else
%PE => (%PST_SORT, Singular,%
@endif
@endif
@endif
@if param.align
 True)%
@else
 False)%
@endif
@if param.last
);
@else
,
@endif
@end
@comment end loop cons.param
@endif
@end
@endif
@end
         when others =>
            return (1 .. 0 => (Sort_Kind'First, Singular, False));
      end case;
   end Arguments;

   ----------
   -- Bits --
   ----------
   
   function Bits (Item : Sort_Kind) return Bit_Count is
      Map : constant array (Sort_Kind) of Bit_Count := (
@loop sort
@if sort.simple
         %ST_SORT %40t=> %SB,
@endif
@end
         others %40t=> 0);
   begin
      return Map (Item);
   end Bits;

   ----------
   -- Code --
   ----------
   
   function Code (Item : Construct) return Word is
      Map : constant array (Construct) of Word := (
@loop sort
@if sort.simple
@loop sort.cons
         c_%CN %45t=> %CE,
@end
@endif
@end
         Dummy %45t=> 0);
   begin
      return Map (Item);
   end Code;

   --------------
   -- Extended --
   --------------
   
   function Extended (Item : Sort_Kind) return Boolean is
   begin
      case Item is
         when
@loop sort
@if sort.simple
@if !sort.extends
@if sort.special
           %ST_SORT =>
@else
           %ST_SORT |
@endif
@endif
@endif
@end
            return False;
         when others =>
            return True;
      end case;
   end Extended;

   ------------
   -- Result --
   ------------
   
   function Result    (Item : Construct) return Sort_Kind is
      Map : constant array (Construct) of Sort_Kind := (
@loop sort
@if sort.simple
@loop sort.cons
         c_%CN %40t=> %CST_SORT,
@end
@endif
@end
      Dummy => Sort_Kind'First);
   begin
      return Map (Item);
   end Result;

   
end TenDRA.Types;
