/*
 * Copyright (c) 2004, The Tendra Project <http://www.ten15.org/>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $TenDRA$
 */


ENTRIES:

sort_already_defined(ccp: name)
{
	USAGE: ERROR
	KEY(STD) iline"Sort '"name"' already defined"
}

sort_not_defined(ccp: name)
{
	USAGE: ERROR
	KEY(STD) iline"Sort '"name"' not defined"
}

sort_doesnt_end_in(ccp: name, ccp: suff)
{
	USAGE: ERROR
	KEY(STD) iline"Sort '"name"' doesn't end in '"suff"'"
}

cant_find_construct_for_sort(ccp: c, ccp: name)
{
	USAGE: ERROR
	KEY(STD) iline"Can't find construct '"c"' for sort '"name"'"
}

bad_parameter_number(ccp: name)
{
	USAGE: ERROR
	KEY(STD) iline"Bad parameter number for '"name"'"
}

buffer_overflow()
{
	USAGE: FATAL
	KEY(STD) iline"Buffer overflow"
}

number_overflow()
{
	USAGE: ERROR
	KEY(STD) iline"Number overflow"
}

eof_in_comment()
{
	USAGE: ERROR
	KEY(STD) "End of file in comment"
}

end_of_if_expected()
{
	USAGE: FATAL
	KEY(STD) iline"End of '@if' expected"
}

end_of_loop_expected()
{
	USAGE: FATAL
	KEY(STD) iline"End of '@loop' expected"
}

incomplete_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Incomplete '@"cmd"' command"
}

duplicate_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Duplicate '@"cmd"' command"
}

misplaced_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Misplaced '@"cmd"' command"
}

unknown_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Unknown command, '@"cmd"'"
}

end_of_at_expected(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"End of '@"cmd"' expected"
}

too_many_arguments()
{
	USAGE: WARNING
	KEY(STD) "Too many arguments"
}

misplaced_format(ccp: fmt)
{
	USAGE: ERROR
	KEY(STD) iline"Misplaced format, '%%"fmt"'"
}

unknown_format(ccp: fmt)
{
	USAGE: ERROR
	KEY(STD) iline"Unknown format, '"fmt"'"
}

unknown_condition(ccp: cond)
{
	USAGE: ERROR
	KEY(STD) iline"Unknown condition, '"cond"'"
}

unknown_control(ccp: ctrl)
{
	USAGE: ERROR
	KEY(STD) iline"Unknown control, '"ctrl"'"
}

wrong_result_sort(ccp: name)
{
	USAGE: ERROR
	KEY(STD) iline"Wrong result sort for '"name"'"
}

syntax_error()
{
	USAGE: ERROR
	KEY(STD) iline"Syntax error"
}
