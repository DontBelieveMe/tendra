/*
 * Copyright (c) 2004, The Tendra Project <http://www.ten15.org/>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $TenDRA$
 */


ENTRIES:

name_already_defined(ccp: name, ccp: file, ccp: line)
{
	USAGE: FATAL
	KEY(STD) iline name" already defined (at "file", line "line")"
}

type_already_defined(ccp: name, ccp: file, ccp: line)
{
	USAGE: FATAL
	KEY(STD) iline"Type "name" already defined (at "file", line "line")"
}

cyclic_type_definition(ccp: name_type)
{
	USAGE: FATAL
	KEY(STD) iline"Cyclic type definition involving "name_type
}

too_many_field_selectors(ccp: name_type)
{
	USAGE: FATAL
	KEY(STD) iline"Too many field selectors in type "name_type
}

type_used_but_not_defined(ccp: type)
{
	USAGE: FATAL
	KEY(STD) iline"Type "type" used but not defined"
}

cant_import_previously_used_type(ccp: name_type)
{
	USAGE: FATAL
	KEY(STD) iline"Can't import previously used type "name_type
}

algebra_not_defined(ccp: alg)
{
	USAGE: FATAL
	KEY(STD) "Algebra "alg" not defined"
}

algebra_already_defined(ccp: alg)
{
	USAGE: FATAL
	KEY(STD) "Algebra "alg" already defined"
}

cant_import_from_current_algebra()
{
	USAGE: FATAL
	KEY(STD) "Can't import from current algebra"
}

type_not_defined(ccp: alg, ccp: nm)
{
	USAGE: FATAL
	KEY(STD) iline"Type "alg"::"nm" not defined"
}

cant_take_size_of_type(ccp: name_type)
{
	USAGE: FATAL
	KEY(STD) iline"Can't take size of type "name_type
}

stack_operations_have_been_suppressed()
{
	USAGE: FATAL
	KEY(STD) iline"Stack operations have been suppressed"
}

vector_operations_have_been_suppressed()
{
	USAGE: FATAL
	KEY(STD) iline"Vector operations have been suppressed"
}

buffer_overflow()
{
	USAGE: FATAL
	KEY(STD) iline"Buffer overflow"
}

unexpected_end_of_string()
{
	USAGE: FATAL
	KEY(STD) iline"Unexpected end of string"
}

end_of_file_in_comment()
{
	USAGE: FATAL
	KEY(STD) iline"End of file in comment"
}

terminating_due_to_syntax_error()
{
	USAGE: FATAL
	KEY(STD) "Terminating due to syntax error"
}

badly_placed_E_option()
{
	USAGE: FATAL
	KEY(STD) "Badly placed -E option"
}

no_output_generated_due_errors()
{
	USAGE: FATAL
	KEY(STD) "No output generated due to previous errors"
}

misplaced_formatting_string(ccp: fmt)
{
	USAGE: FATAL
	KEY(STD) iline"Misplaced formatting string '%%"fmt"'"
}

unknown_formatting_string(ccp: fmt)
{
	USAGE: FATAL
	KEY(STD) iline"Unknown formatting string '%%"fmt"'"
}

creating(ccp: name)
{
	USAGE: INFO
	KEY(STD) "Creating "name" ..."
}

premature_eof()
{
	USAGE: FATAL
	KEY(STD) "Premature end of file"
}

invalid_file_header_identifier()
{
	USAGE: FATAL
	KEY(STD) iline"Invalid file header identifier"
}

invalid_file_header_version(ccp: ver)
{
	USAGE: FATAL
	KEY(STD) iline"Invalid file header version, '"ver"'"
}

syntax_error()
{
	USAGE: FATAL
	KEY(STD) iline"Syntax error"
}

type_expected()
{
	USAGE: FATAL
	KEY(STD) iline"Type expected"
}

unknown_enumerator(ccp: enm)
{
	USAGE: FATAL
	KEY(STD) iline"Unknown enumerator '"enm"'"
}

division_by_zero()
{
	USAGE: FATAL
	KEY(STD) iline"Division by zero"
}

cant_inherit_from(ccp: name)
{
	USAGE: FATAL
	KEY(STD) iline"Can't inherit from "name
}

cant_find_field(ccp: name)
{
	USAGE: FATAL
	KEY(STD) iline"Can't find field "name
}

old_style_algebra_syntax()
{
	USAGE: WARNING
	KEY(STD) iline"Old style algebra syntax"
}

end_of_if_expected()
{
	USAGE: FATAL
	KEY(STD) iline"End of '@if' expected"
}

end_of_loop_expected()
{
	USAGE: FATAL
	KEY(STD) iline"End of '@loop' expected"
}

incomplete_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Incomplete '@"cmd"' command"
}

duplicate_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Duplicate '@"cmd"' command"
}

misplaced_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Misplaced '@"cmd"' command"
}

unknown_at_command(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"Unknown command, '@"cmd"'"
}

end_of_at_expected(ccp: cmd)
{
	USAGE: FATAL
	KEY(STD) iline"End of '@"cmd"' expected"
}

unknown_condition(ccp: cond)
{
	USAGE: FATAL
	KEY(STD) iline"Unknown condition, '"cond"'"
}

unknown_control(ccp: name)
{
	USAGE: FATAL
	KEY(STD) iline"Unknown control, '"name"'"
}

cant_open_template_file(ccp: name)
{
	USAGE: FATAL
	KEY(STD) "Can't open template file, '"name"': "strerror
}

output_file_not_specified()
{
	USAGE: FATAL
	KEY(STD) "Output file not specified"
}

cant_find_alias(unsigned: alias)
{
	USAGE: FATAL
	KEY(STD) iline"Can't find alias "alias
}

usage()
{
	USAGE: NONE
	KEY(STD) "Usage: calculus [options] input [output]
			 \nwhere options are:"
}

description_of_algebra()
{
	USAGE: NONE
	KEY(STD) "ALGEBRA Use ALGEBRA for output."
}

description_of_assertions()
{
	USAGE: NONE
	KEY(STD) "Enable generation of extra assertions."
}

description_of_genc()
{
	USAGE: NONE
	KEY(STD) "Generate C code."
}

description_of_gendisk()
{
	USAGE: NONE
	KEY(STD) "Generate disk reading/writing routines."
}

description_of_genlist()
{
	USAGE: NONE
	KEY(STD) "Generate a list of all types in the algebra."
}

description_of_genpretty()
{
	USAGE: NONE
	KEY(STD) "Generate pretty-print of the algebra."
}

description_of_genprint()
{
	USAGE: NONE
	KEY(STD) "Generate debug printing routines."
}

description_of_gentoken()
{
	USAGE: NONE
	KEY(STD) "Generate token code."
}

description_of_genwrite()
{
	USAGE: NONE
	KEY(STD) "Output current algebra."
}

description_of_extheaders()
{
	USAGE: NONE
	KEY(STD) "Generate additional #include statements."
}

description_of_etypes()
{
	USAGE: NONE
	KEY(STD) "FILE Load extra types from FILE."
}

description_of_inbin()
{
	USAGE: NONE
	KEY(STD) "Input is a binary file."
}

description_of_intext()
{
	USAGE: NONE
	KEY(STD) "Input is a text file."
}

description_of_noconsttok()
{
	USAGE: NONE
	KEY(STD) "Do not generate 'const' for const expressions."
}

description_of_nomproto()
{
	USAGE: NONE
	KEY(STD) "Do not generate union map prototypes."
}

description_of_novector()
{
	USAGE: NONE
	KEY(STD) "Suppress vectors operations support."
}

description_of_noverbose()
{
	USAGE: NONE
	KEY(STD) "Disable verbose mode."
}

description_of_nostack()
{
	USAGE: NONE
	KEY(STD) "Suppress stack operations support."
}

description_of_template()
{
	USAGE: NONE
	KEY(STD) "FILE Load template from FILE."
}
