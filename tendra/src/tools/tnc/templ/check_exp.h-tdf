/*
    $TenDRA$

    		 Crown Copyright (c) 1997

    This TenDRA(r) Computer Program is subject to Copyright
    owned by the United Kingdom Secretary of State for Defence
    acting through the Defence Evaluation and Research Agency
    (DERA).  It is made available to Recipients with a
    royalty-free licence for its use, reproduction, transfer
    to other parties and amendment for any purpose not excluding
    product development provided that any such use et cetera
    shall be deemed to be acceptance of the following conditions:-

        (1) Its Recipients shall ensure that this Notice is
        reproduced upon any copies or amended versions of it;

        (2) Any amended version of it shall be clearly marked to
        show both the nature of and the organisation responsible
        for the relevant amendment or amendments;

        (3) Its onward transfer from a recipient to another
        party shall be deemed to be that party's acceptance of
        these conditions;

        (4) DERA gives no warranty or assurance as to its
        quality or suitability for any purpose and DERA accepts
        no liability whatsoever in relation to any use to which
        it may be put.
*/


@special exp
@special tag
@special nat
@special bool
@special string
@special shape
@special variety
@special floating_variety
@special bitfield_variety
@special alignment
@special exp_list
@special exp_option
/* AUTOMATICALLY GENERATED BY %ZX VERSION %ZV FROM TDF %VA.%VB */

#define sub0( X )	( ( X )->son )
#define sub1( X )	( ( X )->son->bro )
#define sub2( X )	( ( X )->son->bro->bro )
#define sub3( X )	( ( X )->son->bro->bro->bro )
#define sub4( X )	( ( X )->son->bro->bro->bro->bro )
#define sub5( X )	( ( X )->son->bro->bro->bro->bro->bro )
#define sub6( X )	( ( X )->son->bro->bro->bro->bro->bro->bro )
#define sub7( X )	( ( X )->son->bro->bro->bro->bro->bro->bro->bro )


/*
    SET THE SHAPE OF AN EXPRESSION

    The shape of the expression exp is calculated and assigned.  Most of
    the work is done by the check routines above, as selected by an
    automatically generated switch statement.
*/

void check_exp_fn
    PROTO_N ( ( exp ) )
    PROTO_T ( node *exp )
{
    long m ;
    if ( exp == null ) return ;
    m = exp->cons->encoding ;
    if ( m == ENC_labelled ) {
	node *placelabs_intro = sub0 ( exp ) ;
	node *places = sub2 ( exp ) ;
	if ( placelabs_intro->cons->encoding != places->cons->encoding ) {
	    input_error ( "Labels don't match exps in labelled" ) ;
	}
    }
    if ( do_check ) {
	if ( exp->shape ) return ;
	checking = exp->cons->name ;
	switch ( m ) {
@loop sort
@if sort.eq.exp
@loop sort.cons
	    case ENC_%27CN : {
@loop cons.param
@if param.sort.special
		node *%PN = sub%PE ( exp ) ;
@else
@if param.sort.dummy
		%PSN parameter, %PN, messes things up!
@endif
@endif
@end
		CHECK_%25CN
		break ;
	    }
@end
@endif
@end
	}
	exp->shape = expand_fully ( exp->shape ) ;
    }
    return ;
}
