/*
 * Copyright (c) 2004, The Tendra Project <http://www.ten15.org/>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $TenDRA$
 */


TYPES:
	NStringP,
	NameKeyP,
	capsule_offset,	/* replaced with "capsule_name: byte "byteoff": " */
	library_offset,
	istream_line,	/* "filename: line: " */
	tdfr_offset,
	ExceptionName,
	libcapfullname,
	ArgUsageP

	
ENTRIES:

cant_open_library_file(ccp: s)
{
	USAGE: ERROR
	PROPERTIES: FATAL
	KEY(STD) "Can't open library file, '"s"': "strerror
}

bad_mode(char: mode)
{
	USAGE: FATAL
	KEY(STD) "illegal mode character '"mode"'; should be one of
		  'c', 'l', 't' or 'x'"
}

missing_files()
{
	USAGE: FATAL
	KEY(STD) "no files specified for processing"
}

no_memory()
{
	USAGE: FATAL
	KEY(STD) "cannot allocate memory"
}

illegal_external_name(ccp: name)
{
	USAGE: ERROR
	KEY(STD) "illegal external name '"name"'"
}

multiply_renamed_name(ccp: shape, ccp: name)
{
	USAGE: ERROR
	KEY(STD) shape" '"name"' is renamed multiple times"
}

tld_multiple_debug_files()
{
	USAGE: FATAL
	KEY(STD) "more than one debug file specified"
}

tld_cannot_open_debug_file(ccp: name)
{
	USAGE: FATAL
	KEY(STD) "cannot open debug file '"name"': "strerror
}

tld_multiple_output_files()
{
	USAGE: FATAL
	KEY(STD) "more than one output file specified"
}

tld_multiple_unit_files()
{
	USAGE: FATAL
	KEY(STD) "more than one unit set file specified"
}

arg_parse_unknown_option(ccp: option, ArgUsageP: up)
{
	USAGE: FATAL
	KEY(STD) "unknown option '"option"'\n"up
}

arg_parse_ambiguous_option(ccp: option, ArgUsageP: up)
{
	USAGE: FATAL
	KEY(STD) "ambiguous option '"option"'\n"up
}

arg_parse_missing_argument(ccp: option, ArgUsageP: up)
{
	USAGE: FATAL
	KEY(STD) "missing argument for option '"option"'\n"up
}

arg_parse_missing_short_arg(ccp: option, ccp: location, ArgUsageP: up)
{
	USAGE: FATAL
	KEY(STD) "missing argument for option '"option"' at '"location"'\n"up
}

arg_parse_unknown_short_opt(ccp: option, ccp: location, ArgUsageP: up)
{
	USAGE: FATAL
	KEY(STD) "unknown short option '"option"' at '"location"'\n"up
}

arg_usage(ArgUsageP: up)
{
	USAGE: NONE
	KEY(STD) up
}

duplicate_capsule_name(ccp: name)
{
	USAGE: ERROR
	KEY(STD) "capsule name '"name"' occurs more than once
		  in input capsule list"
}

/* linker.c */

cant_hide_shape(ccp: shape)
{
	USAGE: ERROR
	KEY(STD) "there are no external "shape" names to hide"
}

cant_hide(ccp: shape, ccp: name)
{
	USAGE: ERROR
	KEY(STD) "there is no external "shape" named '"name"' to hide"
}

cant_hide_undefined(ccp: shape, ccp: name)
{
	USAGE: ERROR
	KEY(STD) "cannot hide undefined external "shape " named '"name"'"
}

cant_keep_shape(ccp: shape)
{
	USAGE: ERROR
	KEY(STD) "there are no external "shape" names to keep"
}

cant_keep(ccp: shape, ccp: name)
{
	USAGE: ERROR
	KEY(STD) "there is no external "shape" named '"name"' to keep"
}

/* capsule.c - could be made separate catalog in future */
cant_open_unit_set_file(ccp: name)
{
	USAGE: FATAL
	KEY(STD) "cannot open unit set file '"name"': "strerror
}

unit_set_expected_quote(istream_line: ioff)
{
	USAGE: FATAL
	KEY(STD) ioff"expected double quote to begin unit set name"
}

unit_set_illegal_escape(istream_line: ioff)
{
	USAGE: FATAL
	KEY(STD) ioff"illegal escape sequence in unit set name"
}

unit_set_eof_in_name(istream_line: ioff)
{
	USAGE: FATAL
	KEY(STD) ioff"end of file in unit set name"
}

unit_set_duplicate_name(ccp: name, ccp: usname)
{
	USAGE: FATAL
	KEY(STD) name": unit set name '"usname"' occurs more than once"
}

unit_set_no_tld_name(ccp: name)
{
	USAGE: FATAL
	KEY(STD) name": linker information unit set name 'tld'
		 does not occur"
}

capsule_bad_magic(capsule_offset: coff, NStringP: magic, NStringP: proper_magic)
{
	USAGE: ERROR
	KEY(STD) coff"bad magic number '"magic"' should be '"proper_magic"'"
}

capsule_bad_version(capsule_offset: coff, unsigned: major)
{
	USAGE: ERROR
	KEY(STD) coff"illegal major version number "major
}

capsule_version_mismatch(capsule_offset: coff, unsigned: major,
	unsigned: proper_major)
{
	USAGE: ERROR
	KEY(STD) coff"major version number mismatch
		 ("major" should be "proper_major")"
}

duplicate_unit_set_name(capsule_offset: coff, NStringP: usname)
{
	USAGE: ERROR
	KEY(STD) coff"unit set '"usname"' occurs more than once"
}

out_of_order_unit_set_name(capsule_offset: coff, NStringP: usname)
{
	USAGE: ERROR
	KEY(STD) coff"unit set '"usname"' occurs in wrong order"
}

unknown_unit_set_name(capsule_offset: coff, NStringP: usname)
{
	USAGE: ERROR
	KEY(STD) coff"unit set '"usname"' is unknown"
}

duplicate_shape_name(capsule_offset: coff, NStringP: shape)
{
	USAGE: ERROR
	KEY(STD) coff"shape '"shape"' occurs more than once"
}

shape_and_name_count_mismatch(capsule_offset: coff,
	unsigned: shapecnt, unsigned: namecnt)
{
	USAGE: ERROR
	KEY(STD) coff"external name count "namecnt
		"does not equal shape count "shapecnt
}

name_id_out_of_range(capsule_offset: coff, NStringP: shape,
	NameKeyP: name, unsigned: identifier, unsigned: idlimit)
{
	USAGE: ERROR
	KEY(STD) coff" external "shape" name '"name"' has out of range
		 identifier "identifier" (greater than "idlimit")"
}

name_id_used_multiple_times(capsule_offset: coff, NStringP: shape,
	NameKeyP: name, unsigned: identifier)
{
	USAGE: ERROR
	KEY(STD) coff"external "shape" name '"name"' is bound to previously
		 used  identifier "identifier
}

too_many_tld_units(capsule_offset: coff)
{
	USAGE: ERROR
	KEY(STD) coff"capsule contains wrong number of units in linker
		 information unit set (should be one)"
}

tld2_unit_set_type_obsolete(capsule_offset: coff)
{
	USAGE: WARNING
	KEY(STD) coff"capsule contains 'tld2' unit set type
		 which is no longer supported"
}

too_many_tld_unit_counts(capsule_offset: coff)
{
	USAGE: ERROR
	KEY(STD) coff"capsule contains wrong number of counts in linker
		 information unit (should be zero)"
}

too_many_tld_unit_mappings(capsule_offset: coff)
{
	USAGE: ERROR
	KEY(STD) coff"capsule contains wrong number of mappings in linker
		 information unit (should be zero)"
}

tld_unit_wrong_size(capsule_offset: coff, unsigned: coffset, unsigned: offset)
{
	USAGE: ERROR
	KEY(STD) coff"linker information unit contents is the wrong size
		 (final offset is "offset" but should be "coffset")"
}

unknown_tld_unit_type(capsule_offset: coff, unsigned: version)
{
	USAGE: ERROR
	KEY(STD) coff"linker information unit version number "version" is not
		 supported in this implementation"
}

unit_set_count_mismatch(capsule_offset: coff, unsigned: uscount, unsigned: ucount)
{
	USAGE: ERROR
	KEY(STD) coff"unit count "ucount" does not equal unit set count "uscount
}

missing_tld_unit_set(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "capsule '"name"' has no linker information unit set"
}

extra_tld_unit_set(capsule_offset: coff)
{
	USAGE: ERROR
	KEY(STD) coff"capsule contains both a 'tld' and a 'tld2' unit set"
}

defined_but_not_declared(capsule_offset: coff, NStringP: shape,
	NameKeyP: name)
{
	USAGE: ERROR
	KEY(STD) coff"external "shape" '"name"' is defined but not declared"
}

illegally_multiply_defined(capsule_offset: coff, NStringP: shape,
		NameKeyP: name)
{
	USAGE: ERROR
	KEY(STD)
	/* XXX: this is written in English ? */
	coff"external "shape" '"name"' has the multiply defined bit set illegally"
}

bad_usage(capsule_offset: coff, NStringP: shape, NameKeyP: name,
		unsigned: usage)
{
	USAGE: ERROR
	KEY(STD) coff"external "shape" '"name"' has usage "usage" which has
		 no meaning in this implementation"
}

multiply_defined(capsule_offset: coff, NStringP: shape, NameKeyP: name,
		ccp: prevname)
{
	USAGE: ERROR
	KEY(STD) coff"external "shape" '"name"' is defined more than once
		 (previous definition in '"prevname"')"
}

unit_count_num_mismatch(capsule_offset: coff, unsigned: count_number,
		unsigned: shape_number, unsigned: unit_number, NStringP: usname)
{
	USAGE: ERROR
	KEY(STD) coff"illegal count number "count_number" in "usname
		 " unit "unit_number" (should be 0 or "shape_number")"
}

unit_mapping_num_mismatch(capsule_offset: coff, unsigned: mapping_number,
		unsigned: count_number, unsigned: unit_number, NStringP: usname)
{
	USAGE: ERROR
	KEY(STD) coff"illegal mapping number "mapping_number" in "usname
		 " unit "unit_number" (should be "count_number")"
}

id_out_of_range(capsule_offset: coff, unsigned: identifier,
		unsigned: identifier_limit,
		NStringP: shape_name, unsigned: unit_number, NStringP: usname)
{
	USAGE: ERROR
	KEY(STD) coff""shape_name" identifier "identifier" is out of range
		 in mapping table of "usname" unit "unit_number"
		 (should be less than "identifier_limit")"
}
/* end of capsule.c */

too_many_library_files()
{
	USAGE: FATAL
	KEY(STD) "too many library files specified (should be one)"
}

all_specified_with_capsules()
{
	USAGE: FATAL
	KEY(STD) "cannot extract all capsules and named capsules"
}

no_capsules_specified()
{
	USAGE: FATAL
	KEY(STD) "no capsules specified to extract"
}

exception_unhandled(ExceptionName: ename, ccp: fname, unsigned: line)
{
	USAGE: INTERNAL
	KEY(STD) "unhandled exception '"ename"' thrown from line "line
		 ", file '"fname"'"
}

exception_corrupt_handler(ccp: fname, unsigned: line)
{
	USAGE: INTERNAL
	KEY(STD) "corrupt exception handler installed at line "line
		 ", file '"fname"'"
}

assertion_failed(ccp: assertion, ccp: fname, unsigned: line)
{
	USAGE: INTERNAL
	KEY(STD) "assertion '"assertion"' failed at line "line
		 ", file '"fname"'"
}

dalloc_multi_deallocate(pointer_t: blkaddr, ccp: fname, unsigned: line,
		ccp: afname, unsigned: aline)
{
	USAGE: INTERNAL
	KEY(STD) "memory block "blkaddr" allocated at line "aline
		 " in '"afname"' is deallocated more than once
		 (second deallocation at line "line" in file '"fname"')"
}

dalloc_corrupt_block(pointer_t: blkaddr, ccp: fname, unsigned: line)
{
	USAGE: INTERNAL
	KEY(STD) "memory block "blkaddr" is corrupt at deallocation
		 (deallocation at line "line" in file '"fname"')"
}

/* library.c */
library_bad_magic(library_offset: loff, NStringP: magic, NStringP: pmagic)
{
	USAGE: ERROR
	KEY(STD) loff"bad magic number '"magic"' should be '"pmagic"'"
}

library_bad_version(library_offset: loff, unsigned: version)
{
	USAGE: ERROR
	KEY(STD) loff"illegal major version number" version
}

library_version_mismatch(library_offset: loff, unsigned: version,
		unsigned: pversion)
{
	USAGE: ERROR
	KEY(STD) loff"major version number mismatch
		 ("version" should be "pversion")"
}

null_in_file_name(library_offset: loff, NStringP: capname)
{
	USAGE: ERROR
	KEY(STD) loff"capsule name '"capname"' contains null character"
}

capsule_not_found(ccp: capname, ccp: libname)
{
	USAGE: ERROR
	KEY(STD) "capsule '"capname"' is not contained in library '"libname"'"
}

extracting_capsule(ccp: capname, ccp: filename)
{
	USAGE: INFO
	KEY(STD) "extracted capsule '"capname"' into '"filename"'"
}

lib_unknown_type(library_offset: loff, unsigned: version)
{
	USAGE: ERROR
	KEY(STD) loff"library version number "version" is not supported in this
		 implementation"
}

lib_defined_but_not_declared(library_offset: loff, NStringP: shapename, NameKeyP: name)
{
	USAGE: ERROR
	KEY(STD) loff"external "shapename" '"name"' is defined but not declared"
}

lib_illegally_mult_defined(library_offset: loff, NStringP: shapename,
		NameKeyP: name)
{
	USAGE: ERROR
	KEY(STD) loff"external "shapename" '"name"' has the
		 multiply defined bit set illegally"
}

lib_bad_usage(library_offset: loff, NStringP: shapename, NameKeyP: name,
		unsigned: usage)
{
	USAGE: ERROR
	KEY(STD) loff"external "shapename" '"name"' has usage "usage" which has
		 no meaning in this implementation"
}

lib_multiply_defined(library_offset: loff, NStringP: shapename, NameKeyP: name,
		libcapfullname: prevname)
{
	USAGE: ERROR
	KEY(STD) loff"external "shapename" '"name"' is defined more than once
		 in libraries (previous definition in '"prevname"')"
}

capsule_index_too_big(library_offset: loff, NStringP: shapename, NameKeyP: name,
		unsigned: capindex, unsigned: numcap)
{
	USAGE: ERROR
	KEY(STD) loff"external "shapename" '"name"' has capsule index "capindex
		 " (should be less than "numcap")"
}
/* end of linker.c */

no_single_definition(NStringP: shapename, NameKeyP: name)
{
	USAGE: FATAL
	KEY(STD) "no single definition for "shapename" '"name"'"
}

rename_cycle(NStringP: shapename, NameKeyP: name)
{
	USAGE: ERROR
	KEY(STD) "cycle in "shapename" renaming including name '"name"'"
}

no_definition_found(NStringP: shapename, NameKeyP: name)
{
	USAGE: WARNING
	KEY(STD) "no definition found for "shapename" '"name"'"
}

cant_open_rename_file(ccp: filename)
{
	USAGE: ERROR
	KEY(STD) "cannot open rename file '"filename"': "strerror
}

rename_expected_shape(istream_line: ioff)
{
	USAGE: ERROR
	KEY(STD) ioff"expected shape name"
}

rename_expected_name(istream_line: ioff)
{
	USAGE: ERROR
	KEY(STD) ioff"expected external name"
}

rename_expected_semi(istream_line: ioff)
{
	USAGE: ERROR
	KEY(STD) ioff"expected semi colon"
}

rename_unexpected_eof(istream_line: ioff)
{
	USAGE: ERROR
	KEY(STD) ioff"unexpected end of file"
}

rename_unexpected_newline(istream_line: ioff)
{
	USAGE: ERROR
	KEY(STD) ioff"unexpected newline"
}

rename_illegal_escape(istream_line: ioff)
{
	USAGE: ERROR
	KEY(STD) ioff"illegal escape sequence"
}

rename_illegal_char(istream_line: ioff, char: ch)
{
	USAGE: ERROR
	KEY(STD) ioff"illegal character '"ch"'"
}

too_many_ids()
{
	USAGE: FATAL
	KEY(STD) "too many identifiers for this implementation"
}

unexpected_eof_in_tdf(tdfr_offset: toff)
{
	USAGE: ERROR
	KEY(STD) toff"unexpected end of file"
}

tdf_integer_too_big_in_tdf(tdfr_offset: toff)
{
	USAGE: ERROR
	KEY(STD) toff"TDF integer is too large for this machine"
}

unsupported_char_size_in_tdf(tdfr_offset: toff, unsigned: chsize)
{
	USAGE: ERROR
	KEY(STD) toff"string character size "chsize" is not supported on this machine"
}

bad_name_type_in_tdf(tdfr_offset: toff, unsigned: nametype)
{
	USAGE: ERROR
	KEY(STD) toff"name type "nametype" is unknown"
}

expected_eof_in_tdf(tdfr_offset: toff)
{
	USAGE: ERROR
	KEY(STD) toff"expected end of file"
}

/*
 * Next block describes usage message for options.
 */
description_of_all()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable extraction of all capsules."
}

description_of_all_hide_defined()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable hiding of all external names of any shape
		  that have a definition."
}

description_of_basename()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable extraction of capsules to their basename."
}

description_of_debug_file()
{
	USAGE: NONE
	KEY(STD) " FILE\n\tWrite debugging output to FILE."
}

description_of_help()
{
	USAGE: NONE
	KEY(STD) "\n\tDisplay an option summary for the current mode."
}

description_of_hide()
{
	USAGE: NONE
	KEY(STD) " SHAPE NAME\n\tHide the external SHAPE NAME."
}

description_of_hide_defined()
{
	USAGE: NONE
	KEY(STD) " SHAPE\n\tHide all external SHAPE names that have a
		  definition."
}

description_of_include_library()
{
	USAGE: NONE
	KEY(STD) " LIBRARY\n\tInclude the contents of LIBRARY in the output
		  library."
}

description_of_index()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable the display of the library index as well
		  as the capsule names."
}

description_of_info()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable informational messages."
}

description_of_keep()
{
	USAGE: NONE
	KEY(STD) " SHAPE NAME\n\tEnsure that external SHAPE NAME is not hidden."
}

description_of_keep_all()
{
	USAGE: NONE
	KEY(STD) " SHAPE\n\tEnsure that no external SHAPE is hidden."
}

description_of_library_file()
{
	USAGE: NONE
	KEY(STD) " FILE\n\tUse FILE as a TDF library."
}

description_of_l()
{
	USAGE: NONE
	KEY(STD) "FILE\n\tUse FILE as a TDF library."
}

description_of_match_basename()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable matching capsules by their basename"
}

description_of_output_file()
{
	USAGE: NONE
	KEY(STD) " FILE\n\tWrite output to FILE (default 'library.tl')."
}

description_of_path()
{
	USAGE: NONE
	KEY(STD) " DIRECTORY\n\tAppend DIRECTORY to library search path."
}

description_of_L()
{
	USAGE: NONE
	KEY(STD) "DIRECTORY\n\tAppend DIRECTORY to library search path."
}

description_of_rename()
{
	USAGE: NONE
	KEY(STD) " SHAPE FROM TO\n\tRename SHAPE FROM to TO."
}

description_of_rename_file()
{
	USAGE: NONE
	KEY(STD) " FILE\n\tParse FILE as a rename file."
}

description_of_size()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable the display of the size of library capsules
		  as well as their names."
}

description_of_show_errors()
{
	USAGE: NONE
	KEY(STD) "\n\tDisplay the current error table on the standard output."
}

description_of_suppress()
{
	USAGE: NONE
	KEY(STD) " SHAPE NAME\n\tDo not try to find a definition for SHAPE NAME."
}

description_of_suppress_all()
{
	USAGE: NONE
	KEY(STD) " SHAPE\n\tDo not try to find a definition for any SHAPE."
}

description_of_suppress_mult()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable the suppression of multiple definitions
		  as library definitions."
}

description_of_tdf_version()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable the display of the version of a TDF
		  library."
}

description_of_unit_file()
{
	USAGE: NONE
	KEY(STD) " FILE\n\tRead unit set names from FILE."
}

description_of_version()
{
	USAGE: NONE
	KEY(STD) "\n\tDisplay the version number on the standard error."
}

description_of_warning()
{
	USAGE: NONE
	KEY(STD) "\n\tEnable/disable warning messages."
}

tld_usage_message()
{
	USAGE: NONE
	KEY(STD)
	"Usage: [mode] [option ...] file ...
	\nwhere mode is one of:
	\n\t'-mc' (create library),
	\n\t'-ml' (link capsules),
	\n\t'-mt' (library table of contents) or
	\n\t'-mx' (extract from library),
	\nand option (for the current mode - default '-ml') is one of:"
}
