/*
 * Copyright (c) 2004, The Tendra Project <http://www.ten15.org/>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $TenDRA$
 */
 

ENTRIES:

error_when_stepping_over(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Error when stepping over '"nm"'"
}

cant_open_copy_destination_file(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't open copy destination file, '"nm"'"
}

reading_error_when_creating(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Reading error when creating '"nm"'"
}

writing_error_when_creating(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Writing error when creating '"nm"'"
}

cant_open_copy_source_file(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't open copy source file, '"nm"'"
}

writing_error_when_copying(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Writing error when copying '"nm"'"
}

built_in_mkdir_function_not_implemented()
{
	USAGE: INTERNAL
	KEY(STD) "Built-in mkdir function not implemented"
}

cant_rename_file(ccp: from, ccp: to)
{
	USAGE: ERROR
	KEY(STD) "Can't rename '"from"' to '"to"'"
}

cant_remove_source_file(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't remove source file, '"nm"'"
}

cant_remove_file(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't remove '"nm"'"
}

built_in_remove_function_not_implemented()
{
	USAGE: INTERNAL
	KEY(STD) "Built-in remove function not implemented"
}

cant_touch_file(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't touch file, '"nm"'"
}

cant_access_file(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't access file '"nm"'"
}

unknown_archiver_option(ccp: opt)
{
	USAGE: WARNING
	KEY(STD) "Unknown archiver option, '"opt"'"
}

cant_open_input_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Can't open input archive, '"arch"'"
}

illegal_input_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Illegal input archive, '"arch"'"
}

premature_end_of_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Premature end of archive '"arch"'"
}

illegal_file_length_specifier_in_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Illegal file length specifier in archive '"arch"'"
}

illegal_file_continuation_in_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Illegal file continuation in archive '"arch"'"
}

illegal_link_information_in_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Illegal link information in archive '"arch"'"
}

illegal_file_description_in_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Illegal file description in archive '"arch"'"
}


cant_open_output_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Can't open output archive, '"arch"'"
}

cant_open_for_archiving(ccp: nm)
{
	USAGE: ERROR
	KEY(STD) "Can't open '"nm"' for archiving"
}

read_error_in_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Read error in archive '"arch"'"
}

write_error_in_archive(ccp: arch)
{
	USAGE: ERROR
	KEY(STD) "Write error in archive '"arch"'"
}


date_stamp_on_file_has_changed(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "Date stamp on file '"name"' has changed"
}

is_a_C_spec_file(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a C spec file"
}

is_a_cpp_spec_file(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a C++ spec file"
}

TDF_file_not_recognised_in_cc_mode(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "TDF file '"name"' not recognised in cc mode"
}

is_a_cpp_source_file(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a C++ source file"
}

is_a_preprocessed_cpp_source_file(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a preprocessed C++ source file"
}

is_a_tdf_notation_source_file(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a TDF notation source file"
}

is_a_pl_tdf_source_file(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a PL_TDF source file"
}

is_a_tdf_archive(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "'"name"' is a TDF archive"
}

environment_path_is(ccp: envpath)
{
	USAGE: INFO
	KEY(STD) "Environment path is '"envpath"'"
}

exceeded_max_line_size(ccp: file, unsigned: line)
{
	USAGE: FATAL
	KEY(STD) file": line "line": Exceeded maximum line size"
}

no_value_assigned_to_key(ccp: file, unsigned: line, ccp: key)
{
	USAGE: WARNING
	KEY(STD) file": line "line": No value assigned to key "key
}

value_assigned_to_key_must_be_quoted(ccp: file, unsigned: line, ccp: key)
{
	USAGE: WARNING
	KEY(STD) file": line "line": Value assigned to key "key" must be quoted"
}

unmatched_escape_sequence_missing_ra(ccp: file, unsigned: line)
{
	USAGE: FATAL
	KEY(STD) file": line "line": Unmatched escape sequence, missing >"
}

nested_la_ra_escape_sequences_prohibited(ccp: file, unsigned: line)
{
	USAGE: FATAL
	KEY(STD) file": line "line": Nested < > escape sequences prohibited"
}

value_assigned_to_key_not_terminated_with_end_quote(ccp: file, unsigned: line,
		ccp: key)
{
	USAGE: WARNING
	KEY(STD) file": line "line": Value assigned to key "key
		 " not terminated with end quote"
}

undefined_variable_in_file(ccp: var, ccp: file, unsigned: line)
{
	USAGE: FATAL
	KEY(STD) file": line "line": Undefined variable '"var"'"
}

not_invoked_with_any_Yenv_arguments()
{
	USAGE: WARNING
	KEY(STD) "not invoked with any -Y env arguments"
}

failed_to_load_any_environment_files()
{
	USAGE: WARNING
	KEY(STD) "failed to load any environment files"
}

environment_option_declared_but_never_used(ccp: file, unsigned: line, ccp: key)
{
	USAGE: WARNING
	KEY(STD) file" line "line": environment option "key" declared
		 but never used"
}

cant_find_environment(ccp: nm)
{
	USAGE: WARNING
	KEY(STD) "Can't find environment, '"nm"'"
}

empty_command()
{
	USAGE: INTERNAL
	KEY(STD) "Empty command"
}

tool_is_not_available_w(ccp: cmd)
{
	USAGE: WARNING
	KEY(STD) "The tool '"cmd"' is not available"
}

tool_is_not_available_i(ccp: cmd)
{
	USAGE: INTERNAL
	KEY(STD) "The tool '"cmd"' is not available"
}

built_in_command_not_implemented(ccp: cmd)
{
	USAGE: ERROR
	KEY(STD) "Built-in '"cmd"' command not implemented"
}

cant_fork_process()
{
	USAGE: ERROR
	KEY(STD) "Can't fork process"
}

cant_execute(ccp: cmd)
{
	USAGE: ERROR
	KEY(STD) "Can't execute '"cmd"'"
}

error_in(ccp: where)
{
	USAGE: INFO
	KEY(STD) "Error in '"where"'"
}

cant_determine_current_working_directory()
{
	USAGE: WARNING
	KEY(STD) "Can't determine current working directory"
}

unknown_file_type(char: type)
{
	USAGE: WARNING
	KEY(STD) "Unknown file type, '"type"'"
}

illegal_file_type()
{
	USAGE: ERROR
	KEY(STD) "Illegal file type"
}

can_only_name_one_file_with_o()
{
	USAGE: WARNING
	KEY(STD) "Can only name one file with '-o'"
}

illegal_storage_type()
{
	USAGE: INTERNAL
	KEY(STD) "Illegal storage type"
}

illegal_stop_option()
{
	USAGE: WARNING
	KEY(STD) "Illegal stop option"
}

more_than_one_stop_option_given()
{
	USAGE: WARNING
	KEY(STD) "More than one stop option given"
}

using_the_system_C_compiler()
{
	USAGE: WARNING
	KEY(STD) "Using the system C compiler"
}

cant_build_tdf_archive_in_mode(ccp: mode)
{
	USAGE: WARNING
	KEY(STD) "Can't build TDF archive in "mode" mode"
}

cant_build_tdf_complex_in_mode(ccp: mode)
{
	USAGE: WARNING
	KEY(STD) "Can't build TDF complex in "mode" mode"
}

cant_pretty_print_tdf_in_mode(ccp: mode)
{
	USAGE: WARNING
	KEY(STD) "Can't pretty print TDF in "mode" mode"
}

api_is(ccp: api_info)
{
	USAGE: INFO
	KEY(STD) "API is "api_info
}

tcc_version(ccp: version, ccp: checker, ccp: machname, ccp: release)
{
	USAGE: NONE
	KEY(STD) version checker", Machine: "machname", Release: "release
}

cant_create_temporary_directory()
{
	USAGE: FATAL
	KEY(STD) "Can't create temporary directory"
}

no_input_files_specified()
{
	USAGE: FATAL
	KEY(STD) "No input files specified"
}

input_file_not_processed(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "Input file '"name"' not processed"
}

unknown_special_option(ccp: opt)
{
	USAGE: WARNING
	KEY(STD) "Unknown special option, '"opt"'"
}

unknown_boolean_identifier(char: a, char: b)
{
	USAGE: ERROR /*OPTION*/
	KEY(STD) "Unknown boolean identifier, '"a b"'"
}

unknown_compilation_stage(char: b)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Unknown compilation stage, '"b"'"
}

unknown_list_identifier(char: a, char: b)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Unknown list identifier, '"a b"'"
}

unknown_output_file_specifier(char: b)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Unknown output file specifier, '"b"'"
}

unknown_string_identifier(char: a, char: b)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Unknown string identifier, '" a b "'"
}

unknown_procedure_identifier(char: a, char: b)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Unknown procedure identifier, '" a b "'"
}

interpreting(ccp: cmd)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Interpreting '" cmd "'"
}

interpret_cmd(ccp: val)
{
	USAGE: ERROR
	KEY(STD) "interpret_cmd: "val ": " strerror
}

ignoring_non_standard_env_assignment(ccp: var, ccp: val)
{
	USAGE: WARNING
	KEY(STD) "Ignoring non-standard env assignment: "var"="val
}

list_of_recognised_options()
{
	USAGE: INFO
	KEY(STD) "List of recognised options"
}

X_error(ccp: cmd)
{
	USAGE: WARNING
	KEY(STD) cmd
}

syntax_error(ccp: cmd)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Syntax error, '"cmd"'"
}

illegal_input(ccp: in)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Illegal input '"in"'"
}

illegal_option(ccp: opt)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Illegal option '"opt"'"
}

too_many_components(ccp: arg)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Too many components, '"arg"'"
}

cant_interpret(ccp: arg)
{
	USAGE: ERROR /* OPTION */
	KEY(STD) "Can't interpret '"arg"'"
}

option_is_incomplete(ccp: arg)
{
	USAGE: WARNING
	KEY(STD) "Option '"arg"' is incomplete"
}

renaming_to_avoid_clash_with_input(ccp: what, ccp: from, ccp: to)
{
	USAGE: WARNING
	KEY(STD) "Renaming "what" '"from"' to '"to"' to avoid clash with input"
}

cant_open_startup_file(ccp: name)
{
	USAGE: ERROR
	KEY(STD) "Can't open startup file, '"name"'"
}

cant_open_endup_file(ccp: name)
{
	USAGE: ERROR
	KEY(STD) "Can't open endup file, '"name"'"
}

cant_open_token_definition_file(ccp: name)
{
	USAGE: ERROR
	KEY(STD) "Can't open token definition file, '"name"'"
}

attempt_to_update_hashtable_with_invalid_key(ccp: key)
{
	USAGE: FATAL
	KEY(STD) "Attempt to update hashtable with invalid key "key
}

hash_operation_requested_on_empty_key()
{
	USAGE: FATAL
	KEY(STD) "hash operation requested on empty key"
}

looking_up_null_key_in_tccenv_hashtable()
{
	USAGE: WARNING
	KEY(STD) "Looking up null key in tccenv hashtable"
}

unknown_environment_variable(ccp: var)
{
	USAGE: FATAL
	KEY(STD) "Unknown environment variable "var
}

expected_y_option(ccp: name)
{
	USAGE: WARNING
	KEY(STD) "Expected command line option -y"name"=[value]; trying environment"
}
