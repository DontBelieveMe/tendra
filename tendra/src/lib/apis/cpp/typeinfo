#   		 Crown Copyright (c) 1997
#
#   This TenDRA(r) Computer Program is subject to Copyright
#   owned by the United Kingdom Secretary of State for Defence
#   acting through the Defence Evaluation and Research Agency
#   (DERA).  It is made available to Recipients with a
#   royalty-free licence for its use, reproduction, transfer
#   to other parties and amendment for any purpose not excluding
#   product development provided that any such use et cetera
#   shall be deemed to be acceptance of the following conditions:-
#
#       (1) Its Recipients shall ensure that this Notice is
#       reproduced upon any copies or amended versions of it;
#
#       (2) Any amended version of it shall be clearly marked to
#       show both the nature of and the organisation responsible
#       for the relevant amendment or amendments;
#
#       (3) Its onward transfer from a recipient to another
#       party shall be deemed to be that party's acceptance of
#       these conditions;
#
#       (4) DERA gives no warranty or assurance as to its
#       quality or suitability for any purpose and DERA accepts
#       no liability whatsoever in relation to any use to which
#       it may be put.
#
# $TenDRA$
#


$LINKAGE = "C++";
$NAMESPACE = "std";

+USE "cpp", "exception", "except";

%%
// CLASS RETURNED BY TYPEID OPERATOR
class type_info {
    // Implementation dependent details
    class __base_info {};
    int __code;
    const char *__name;
    __base_info *__base;
public :
    virtual ~type_info();
    bool operator==(const type_info &) const;
    bool operator!=(const type_info &) const;
    bool before(const type_info &) const;
    const char *name() const;
private :
    type_info(const type_info &);
    type_info &operator=(const type_info &);
};

// EXCEPTION THROWN BY BAD DYNAMIC_CAST
class bad_cast : public exception {
    // Implementation dependent details
public :
    bad_cast() throw();
    bad_cast(const bad_cast &) throw();
    bad_cast &operator=(const bad_cast &) throw();
    virtual ~bad_cast() throw();
    virtual const char *what() const throw();
};

// EXCEPTION THROWN BY BAD TYPEID
class bad_typeid : public exception {
    // Implementation dependent details
public :
    bad_typeid() throw();
    bad_typeid(const bad_typeid &) throw();
    bad_typeid &operator=(const bad_typeid &) throw();
    virtual ~bad_typeid() throw();
    virtual const char *what() const throw();
};
%%
