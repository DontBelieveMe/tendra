<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<!--
  $Id$
-->

<chapter id="C2">
  <title>Structure of TDF</title>

  <para>
    Each piece of TDF program is classified as being of a particular
    <code>SORT</code>. Some pieces of TDF are <code>LABEL</code>s, some are
    <code>TAG</code>s, some are <code>ERROR_TREATMENT</code>s and so on (to list
    some of the more transparently named <code>SORT</code>s). The
    <code>SORT</code>s of the arguments and result of each construct of the TDF
    format are specified. For instance, <replaceable>plus</replaceable> is defined to
    have three arguments - an <code>ERROR_TREATMENT</code> and two
    <code>EXP</code>s (short for &ldquo;expression&rdquo;) - and to produce an
    <code>EXP</code>; <replaceable>goto</replaceable> has a single <code>LABEL</code>
    argument and produces an <code>EXP</code>. The specification of the
    <code>SORT</code>s of the arguments and results of each construct
    constitutes the syntax of the TDF format. When TDF is represented as a
    parsed tree it is structured according to this syntax.  When it is
    constructed and read it is in terms of this syntax.
  </para>

  <section id="C2S1">
    <title>The overall structure</title>
    <para>
      A separable piece of TDF is called a <code>CAPSULE</code>. A producer
      generates a <code>CAPSULE</code>; the TDF linker links
      <code>CAPSULE</code>s together to form a <code>CAPSULE</code>; and the
      final translation process turns a <code>CAPSULE</code> into an object
      file.
    </para>

    <para>
      The structure of capsules is designed so that the process of linking two
      or more capsules consists almost entirely of copying large byte-aligned
      sections of the source files into the destination file, without changing
      or even examining these sections. Only a small amount of interface
      information has to be modified and this is made easily accessible. The
      translation process only requires an extra indirection to account for this
      interface information, so it is also fast. The description of TDF at the
      capsule level is almost all about the organisation of the interface
      information.
    </para>

    <para>
      There are three major kinds of entity which are used inside a capsule to
      name its constituents. The first are called tags; they are used to name
      the procedures, functions, values and variables which are the components
      of the program. The second are called tokens; they identify pieces of TDF
      which can be used for substitution - a little like macros. The third are
      the alignment tags, used to name alignments so that circular types can be
      described. Because these internal names are used for linking pieces of TDF
      together, they are collectively called <replaceable>linkable
      entities</replaceable>. The interface information relates these linkable
      entities to each other and to the world outside the capsule.
    </para>

    <para>
      The most important part of a capsule, the part which contains the real
      information, consists of a sequence of groups of units. Each group
      contains units of the same kind, and all the units of the same kind are in
      the same group. The groups always occur in the same order, though it is
      not necessary for each kind to be present.
    </para>

      <figure>
		<title>Capsule groups</title>
          <graphic fileref="images/capsule4.gif"/>
      </figure>

    <para>
      The order is as follows:
    </para>

      <orderedlist>
        <listitem>
          <para>
            <replaceable>tld</replaceable> unit. Every capsule has exactly one tld
            unit. It gives information to the TDF linker about those items in
            the capsule which are visible externally.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>versions</replaceable> unit. These units contain information
            about the versions of TDF used. Every capsule will have at least one
            such unit.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>tokdec</replaceable> units. These units contain declarations
            for tokens. They bear the same relationship to the following tokdef
            units that C declarations do to C definitions. However, they are not
            necessary for the translator, and the current ANSI C producer does
            not provide them by default.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>tokdef</replaceable> units. These units contain definitions
            of tokens.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>aldef</replaceable> units. These units give the definitions
            of alignment tags.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>diagtype</replaceable> units. These units give diagnostic
            information about types.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>tagdec</replaceable> units. These units contain declarations
            of tags, which identify values, procedures and run-time objects in
            the program. The declarations give information about the size,
            alignment and other properties of the values. They bear the same
            relationship to the following tagdef units that C declarations do to
            C definitions.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>diagdef</replaceable> units. These units give diagnostic
            information about the values and procedures defined in the capsule.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>tagdef</replaceable> units. These units contain the
            definitions of tags, and so describe the procedures and the values
            they manipulate.
          </para>
        </listitem>

        <listitem>
          <para>
            <replaceable>linkinfo</replaceable> units. These units give information
            about the linking of objects.
          </para>
        </listitem>
      </orderedlist>

    <para>
      This organisation is imposed to help installers, by ensuring that the
      information needed to process a unit has been provided before that unit
      arrives. For example, the token definitions occur before any tag
      definition, so that, during translation, the tokens may be expanded as the
      tag definitions are being read (in a capsule which is ready for
      translation all tokens used must be defined, but this need not apply to an
      arbitrary capsule).
    </para>

    <para>
      The tags and tokens in a capsule have to be related to the outside world.
      For example, there might be a tag standing for
      <code>printf</code>, used in the appropriate way inside the
      capsule. When an object file is produced from the capsule the identifier
      <replaceable>printf</replaceable> must occur in it, so that the system linker
      can associate it with the correct library procedure. In order to do this,
      the capsule has a table of tags at the capsule level, and a set of
      external links which provide external names for some of these tags.
	</para>

      <figure>
		<title>Capsule tags</title>
          <graphic fileref="images/capsule1.gif"/>
      </figure>

    <para>
      In just the same way, there are tables of tokens and alignment tags at the
      capsule level, and external links for these as well.
    </para>

    <para>
      The tags used inside a unit have to be related to these capsule tags, so
      that they can be properly named. A similar mechanism is used, with a table
      of tags at the unit level, and links between these and the capsule level
      tags.
	</para>

      <figure>
		<title>Unit tags</title>
          <graphic fileref="images/capsule2.gif"/>
      </figure>

    <para>
      Again the same technique is used for tokens and alignment tags.
    </para>

    <para>
      It is also necessary for a tag used in one unit to refer to the same thing
      as a tag in another unit. To do this a tag at the capsule level is used,
      which may or may not have an external link.
	</para>

      <figure>
		<title>Links from multiple units</title>
          <graphic fileref="images/capsule3.gif"/>
      </figure>

    <para>
      The same technique is used for tokens and alignment tags.
    </para>

    <para>
      So when the TDF linker is joining two capsules, it has to perform
      the following tasks:
	</para>

      <itemizedlist>
        <listitem>
          <para>
            It creates new sets of capsule level tags, tokens and alignment tags
            by identifying those which have the same external name, and
            otherwise creating different entries.
          </para>
        </listitem>

        <listitem>
          <para>
            It similarly joins the external links, suppressing any names which
            are no longer to be external.
          </para>
        </listitem>

        <listitem>
          <para>
            It produces new link tables for the units, so that the entities used
            inside the units are linked to the new positions in the capsule
            level tables.
          </para>
        </listitem>

        <listitem>
          <para>
            It re-organises the units so that the correct order is achieved.
          </para>
        </listitem>
      </itemizedlist>

    <para>
      This can be done without looking into the interior of the units (except
      for the <code>tld</code> unit), simply copying the units into
      their new place.
    </para>

    <para>
      During the process of installation the values associated with the linkable
      entities can be accessed by indexing into an array followed by one
      indirection. These are the kinds of object which in a programming language
      are referred to by using identifiers, which involves using hash tables for
      access. This is an example of a general principle of the design of TDF;
      speed is required in the linking and installing processes, if necessary at
      the expense of time in the production of TDF.
    </para>
  </section>

  <section id="C2S2">
    <title>Tokens</title>

    <para>
      Tokens are used (applied) in the TDF at the point where substitutions are
      to be made. Token definitions provide the substitutions and usually reside
      on the target machine and are linked in there.
    </para>

    <para>
      A typical token definition has parameters from various <code>SORT</code>s
      and produces a result of a given <code>SORT</code>. As an example of a
      simple token definition, written here in a C-like notation, consider the
      following.
	</para>

      <programlisting language="tdf">
      EXP ptr_add (EXP par0, EXP par1, SHAPE par2)
      {
          add_to_ptr(
              par0,
              offset_mult(
                  offset_pad(
                      alignment(par2),
                      shape_offset(par2)),
                  par1))</programlisting>

	<para>
      This defines the token, <replaceable>ptr_add</replaceable>, to produce something
      of <code>SORT</code> <code>EXP</code>. It has three parameters, of
      <code>SORT</code>s <code>EXP</code>, <code>EXP</code> and
      <code>SHAPE</code>. The <replaceable>add_to_ptr</replaceable>,
      <replaceable>offset_mult</replaceable>, <replaceable>offset_pad</replaceable>,
      <replaceable>alignment</replaceable> and <replaceable>shape_offset</replaceable>
      constructions are TDF constructions producing respectively an
      <code>EXP</code>, an <code>EXP</code>, an <code>EXP</code>, an
      <code>ALIGNMENT</code> and an <code>EXP</code>.
    </para>

    <para>
      A typical use of this token is:
	</para>

      <programlisting language="tdf">
      ptr_add(
          obtain_tag(tag41),
          contents(integer(~signed_int), obtain_tag(tag62)),
          integer(~char))</programlisting>

    <para>
      The effect of this use is to produce the TDF of the definition with
      <replaceable>par0</replaceable>, <replaceable>par1</replaceable> and
      <replaceable>par2</replaceable> substituted by the actual parameters.
    </para>

    <para>
      There is no way of obtaining anything like a side-effect. A token
      without parameters is therefore just a constant.
    </para>

    <para>
      Tokens can be used for various purposes. They are used to make the TDF
      shorter by using tokens for commonly used constructions
      (<replaceable>ptr_add</replaceable> is an example of this use). They are used to
      make target dependent substitutions (<replaceable>~char</replaceable> in the use
      of <replaceable>ptr_add</replaceable> is an example of this, since
      <replaceable>~char</replaceable> may be signed or unsigned on the target).
    </para>

    <para>
      A particularly important use is to provide definitions appropriate to the
      translation of a particular language. Another is to abstract those
      features which differ from one ABI to another. This kind of use requires
      that sets of tokens should be standardised for these purposes, since
      otherwise there will be a proliferation of such definitions.
    </para>
  </section>

  <section id="C2S3">
    <title>Tags</title>
    <para>
      Tags are used to identify the actual program components. They can be
      declared or defined. A declaration gives the <code>SHAPE</code> of a tag
      (a <code>SHAPE</code> is the TDF analogue of a type). A definition gives
      an <code>EXP</code> for the tag (an <code>EXP</code> describes how the
      value is to be made up).
    </para>
  </section>

  <section id="C2S4">
    <title>Extending the format</title>
    <para>
      TDF can be extended for two major reasons.
    </para>

    <para>
      First, as part of the evolution of TDF, new features will from time to
      time be identified. It is highly desirable that these can be added without
      disturbing the current encoding, so that old TDF can still be installed by
      systems which recognise the new constructions. Such changes should only be
      made infrequently and with great care, for stability reasons, but
      nevertheless they must be allowed for in the design.
    </para>

    <para>
      Second, it may be required to add extra information to TDF to permit
      special processing. TDF is a way of describing programs and it clearly may
      be used for other reasons than portability and distribution. In these uses
      it may be necessary to add extra information which is closely integrated
      with the program. Diagnostics and profiling can serve as examples. In
      these cases the extra kinds of information may not have been allowed for
      in the TDF encoding.
    </para>

    <para>
      Some extension mechanisms are described below and related to these
      reasons:
    </para>

      <itemizedlist>
        <listitem>
          <para>
            The encoding of every <code>SORT</code> in TDF can be extended
            indefinitely (except for certain auxiliary <code>SORT</code>s).
            This mechanism should only be used for extending standard TDF to the
            next standard, since otherwise extensions made by different groups
            of people might conflict with each other. See <link
            linkend="C8S3.3">Extendable integer encoding</link>.
          </para>
        </listitem>

        <listitem>
          <para>
            Basic TDF has three kinds of linkable entity and seven kinds of
            unit. It also contains a mechanism for extending these so that other
            information can be transmitted in a capsule and properly related to
            basic TDF. The rules for linking this extra information are also
            laid down. See <link linkend="C5S11.1">make_capsule</link>.
          </para>
        </listitem>

        <listitem>
          <para>
            If a new kind of unit is added, it can contain any information, but
            if it is to refer to the tags and tokens of other units it must use
            the linkable entities. Since new kinds of unit might need extra
            kinds of linkable entity, a method for adding these is also
            provided.  All this works in a uniform way, with capsule level
            tables of the new entities, and external and internal links for
            them.
          </para>
        </listitem>

        <listitem>
          <para>
            If new kinds of unit are added, the order of groups must be the same
            in any capsules which are linked together. As an example of the use
            of this kind of extension, the diagnostic information is introduced
            in just this way. It uses two extra kinds of unit and one extra kind
            of linkable entity. The extra units need to refer to the tags in the
            other units, since these are the object of the diagnostic
            information.  This mechanism can be used for both purposes.
          </para>
        </listitem>

        <listitem>
          <para>
            The parameters of tokens are encoded in such a way that foreign
            information (that is, information which cannot be expressed in the
            TDF <code>SORT</code>s) can be supplied. This mechanism should only
            be used for the second purpose, though it could be used to
            experiment with extensions for future standards. See <link
            linkend="C8S3"><code>BITSTREAM</code></link>.
          </para>
        </listitem>
      </itemizedlist>
  </section>
</chapter>
