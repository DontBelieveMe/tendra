<?xml version="1.0" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

	<!ENTITY cpu "<acronym>CPU</acronym>">
	<!ENTITY tdf "<acronym>TDF</acronym>">
	<!ENTITY sql "<acronym>SQL</acronym>">
	<!ENTITY dsl "<acronym>DSL</acronym>">
	<!ENTITY ir "<acronym>IR</acronym>">
	<!ENTITY pltdf "<acronym>PL_TDF</acronym>">
	<!ENTITY andfutils "<application><acronym>ANDF</acronym>utils</application>">
	<!ENTITY tcc "<application>tcc</application>">
	<!ENTITY gcc "<application>gcc</application>">
	<!ENTITY tnc "<application>tnc</application>">
	<!ENTITY trans "<application>Trans</application>">
	<!ENTITY lpi "<acronym>LPI</acronym>">
	<!ENTITY api "<acronym>API</acronym>">
	<!ENTITY tendra "Ten<acronym>DRA</acronym>">
	<!ENTITY theproject "<orgname>The Ten<acronym>DRA</acronym> Project</orgname>">
]>

<article>
	<articleinfo>
		<title>Inlining languages for &tendra;</title>

		<author>
			<firstname>Katherine</firstname>
			<surname>Flavel</surname>
			<affiliation>&theproject;</affiliation>
		</author>

		<pubdate>2007</pubdate>

		<copyright>
			<year>2007</year>

			<holder>&theproject;</holder>
		</copyright>

		<abstract>A design is proposed which provides the ability to inline
			foreign languages at specific points in the grammar of a language
			being compiled. A mechanism for languages (both inlined and
			otherwise) to provide machine-specific features is added to &tdf;.
			Together, these provide a system capable of expressing inlined
			assembly. An overview of implementation and a schedule are
			given.</abstract>
	</articleinfo>

	<section>
		<title>Introduction</title>

		<para>This proposal outlines a scheme by which we may work towards
			providing support for inlined assembly. This scheme consists of
			several independent features which can be used together
			collectively to provide this support. Within each feature, there
			are unresolved choices for various different options; the purpose
			of this proposal is not to decide these minutiae, but rather to lay
			out the scheme itself, which keeps the effects of these unresolved
			issues isolated from one another.</para>

		<para>The syntax of such an extension is not discussed in this proposal.
			Rather, the focus here is on the underlying architecture, and the
			division of information between various components of the
			system.</para>

		<para>Purity control: this proposal discusses the proposed
			implementation of <emphasis>a</emphasis> &tendra;-based system, not
			about &tcc; specifically. It is beyond the scope of this proposal
			to lay out where non-portable features should go, or if they might
			be cause to create a separate interface in conjunction to &tcc;.
			Such decisions depend on the direction of the project as a whole;
			this proposal deals only with the mechanism for the features
			under discussion, rather than proposing where those features are
			to be implemented.</para>

		<para>This proposal does not discuss the syntax for assemblies
			supported; one of its aims is to provide a syntax-independent
			architecture. It is this architecture which is discussed.</para>

		<para>The proposal serves to act as a placeholder representing various
			ways in which assembly may be provided, illustrating one
			specific scheme. This permits discussion of other issues to
			remain on-topic to those issues, without becoming distracted
			by otherwise unresolved points regarding possible mechanisms
			for embedding languages.</para>

		<section>
			<title>The current situation</title>

			<para>Historically, programs did not inline assembly. Routines written
				in assembly were kept in separate source files, provided with the
				support code required so that those routines may be called and
				return data, and linked into a program as any other object.
				The main use-case for moving to inlined assembly appears to have
				been the convenience gained by eliminating the need for that
				supporting code by making use of the C compiler to set up and
				return from functions. The author may then concentrate on the
				(usually relatively few) lines of code in assembly which do the
				real work, and leave such menial tasks to the compiler.</para>

			<para>Presumably as a result of this convenience, much code now
				exists which uses inlined assembly - particularly operating
				system kernels. &tendra; currently provides no support for the
				extensions which other compilers (most notably &gcc;) have
				implemented and popularised.</para>

			<para><xref linkend="C99"/> suggests implementations may provide
				inlined languages as a common extension. See sections
				J.5.9 <quote>The <code>FORTRAN</code> keyword</quote> and
				J.5.10 <quote>The <code>asm</code> keyword</quote> for
				details.</para>
		</section>

		<section>
			<title>Feature requirements</title>

			<para>This is a highly sought-after feature given interest in &tendra;
				as a compiler for operating systems. It's one of the
				<quote>famous</quote> features which appear on comparison lists
				when products are summarised; people expect it to be present.
				This document, however, does not serve to rationalise an
				argument for providing this support - it merely proposes an
				implementation should the support be required.</para>

			<para>Implementation in the straightforward sense (of embedding a
				string of assembly into the &ir;) looks trivial at first glance,
				but on closer inspection turns out to be wholly unsatisfying.
				Some points to resolve are:</para>

			<itemizedlist>
				<listitem>
					<para>Which assembly syntax to use</para>
				</listitem>

				<listitem>
					<para>How to relate platform support with &tdf;. Given
						the intention of portability, this is a large area
						to address.</para>
				</listitem>

				<listitem>
					<para>Syntax analysis occurring during installation -
						whilst this is not an issue for compilers who's
						&ir; is non-portable, for &tendra; this would allow
						syntax errors to pass unnoticed until a user downloads
						and installs distributed &tdf;. In practise, testing
						by a developer would avoid this.</para>
				</listitem>

				<listitem>
					<para>Minimising extensions to &tdf;. Adding new tokens
						should be avoided where possible; constantly extending
						&tdf; with sets of largely similar tokens for each
						architecture directly violates the original design
						goal of providing a language-neutral &ir;.</para>
				</listitem>

				<listitem>
					<para>Maintainability both in terms of complexity, and
						scalability of feature additions relative to the number
						of developers involved with the project.</para>
				</listitem>
			</itemizedlist>

			<para>This proposal attempts to address the above points.</para>
		</section>

		<section>
			<title>Use cases</title>

			<para>The use-cases for inlining assembly are not particularly
				surprising. There appear to be two main groups:</para>

			<variablelist>
				<varlistentry>
					<term>Technical cases</term>

					<listitem>
						<para>These are the usual use-cases for inlining assembly
							for any compiler, and will not be repeated
							here.</para>

						<para>The general motivation seems to be that assembly
							language is required for accessing machine-specific
							operations, for example to read a specific &cpu;
							register, to call a specific opcode for atomicity,
							or for syscalls. For such small tasks, it seems
							cumbersome to go through a function call sequence
							just for that single operation.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>Marketing</term>

					<listitem>
						<para>Compilers are seen to be either
							<quote>system</quote> compilers (that is, supplied
							with an operating system, and used to compile that
							operating system), or as <quote>application</quote>
							compilers (that is, used to compile applications).
							In some historical cases (notably HP-UX), these
							have been separate products, often confusing and
							irritating users with incompatibilities. Hence it
							is desirable that the same compiler may be used for
							both.</para>

						<para>While &tendra; was originally intended to be used
							for both system and application code (indeed two
							third-party usability analyses were undertaken), it
							was intended to do so for C only.</para>

						<para>Given the technical motivations of convenience
							outlayed above, the ability to inline assembly
							language is one of the <quote>checkboxes</quote>
							people look for in feature support.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

	<section>
		<title>Scheme proposed</title>

		<para>This proposal first generalises the problem, and then goes on to
			suggest a specific case for providing support for assembly
			languages. This scheme is broken down into two stages:
			<xref linkend="embedding"/>, which is not assembly-specific,
			and <xref linkend="code"/>.</para>

		<para>Before addressing these stages, quick recap of &tdf;'s approach
			as an &ir;: &tdf; is designed to express the semantics of the
			concepts provided by multiple languages, rather than expressing a
			superset of processor functionality. This is an important
			distinction, and runs contrary to the design of most other &ir;s.
			<xref linkend="tdfspec"/> gives a deeper explanation.</para>

		<para>Language-specific entities in &tdf; are categorised under two
			groups: &lpi; (Language Programming Interface) and &api;
			(Application Programming Interface). Introducing new &lpi;s
			is relatively rare, and is intended to provide a means for
			a specific producer to output <quote>higher-level</quote> code
			closer to its own concepts.</para>

		<para>&tdf; &api;s cover most of the requirements needed for
			language-specific features (for example, <code>setjmp()</code> in
			C). It is important to note that these &api;s do not necessarily
			correlate to function calls within the language (although
			<code>setjmp()</code> happens to).</para>

		<section id="tokens">
			<title>Token organisation</title>

			<para>Language-specific concepts are grouped within &tdf; under
				their own &api; sections (for example, <code>setjmp</code>
				for C). Concepts used by many languages are available to all as
				<quote>generic</quote> tokens. <xref linkend="tdfreg"/>
				gives a listing of these language-specific
				tokens. Tokens serve as parametric substitutions; these
				are strict functional applications. See
				<xref linkend="tdfspec"/> for a detailed explanation of the
				purposes of tokens.</para>

			<para>For the purposes of inlined languages, no tokens of the
				following classes are proposed to be added:
				<emphasis>Target dependency tokens</emphasis>
				(where <emphasis>all</emphasis> installers define all tokens),
				<emphasis>Basic mapping tokens</emphasis> (likewise), and
				<emphasis>&tdf; Interface tokens</emphasis>
				(which are support routines private to other &tdf;
				tokens). See <xref linkend="tdfreg"/> for details of these
				classes.</para>

			<para>Tokens are added as both a new &lpi; and a new &api; for
				inlined assembly. The details of these are discussed in
				<xref linkend="code"/>. Portable inlined languages need
				neither.</para>
		</section>

		<section id="embedding">
			<title>Embedding a language</title>

			<para>Within the region of embedded language (whatever the
				mechanism for introducing that region may be; here
				<code>__lang()</code> is given as an example), the
				compiler switches to a parser which can parse that
				particular language. Hence several such parsers may be
				provided, each providing an alternate language, or dialect
				of that language.</para>

			<programlisting language="C">__lang("logo") {
	REPEAT 4 [ FORWARD 10 RIGHT 90 ]
}</programlisting>

			<para>That language's parser outputs its own tree of &tdf;,
				which is grafted into the host language's tree at the
				point where <code>__lang()</code> was encountered.</para>

			<para>The parser for the embedded language generates output
				of that language as a tree of &tdf; tokens, which is of
				equal status to the &tdf; tokens output from the main
				parser. Hence from the perspective of the &tdf; generated,
				there needn't be any knowledge that alternate languages
				were used, other than by inspecting the contents of those
				tokens. If that embedded language happened to be FORTRAN,
				it would contain FORTRAN-specific &tdf; tokens. If it
				were C, it would contain C-specific &tdf; tokens, and so
				on.</para>

			<para>After this tree grafting, the syntax for the embedded
				language is now gone; the content is expressed as &tdf;
				(even if it uses some language-specific tokens). Therefore
				installers will not be aware of the original syntax;
				this is discussed in <xref linkend="code"/>. Note also
				that this permits the same &tdf; to be expressed by multiple
				syntaxes - hence for assembly, we could provide both
				AT&amp;T <emphasis>and</emphasis> Intel syntax, using the
				same installers for both.</para>

			<para>Externally-executed programs may be used to perform
				parsing of embedded regions, as long as they output &tdf;
				in some form.</para>

			<para>Regarding the mechanism for entering embedded regions,
				<code>__lang()</code> could be enabled by a
				<code>#pragma</code> of some sort, or as a compiler
				option. Alternative suggestions include delimiting
				regions along the lines of:</para>

<programlisting language="C">#pragma TenDRA embed lisp
	...
#pragma TenDRA embed end</programlisting>

			<para>Other than the syntax used for defining regions of
				embedded languages, this scheme is equally applicable
				to host languages other than C.</para>
		</section>

		<section id="code">
			<title>Code generation</title>

			<para>The problem of code generation now becomes <quote>we have
				a tree of multiple-language &tdf;: how do we output code
				for a specific machine?</quote> Obviously for portable languages
				this is no particular problem. Hence the remainder of this
				proposal focuses on extending the &tdf; token register with
				assembly-specific tokens, <emphasis>not</emphasis> embedding
				a string of assembly as a single token. The distinction is
				critical, since it implies that embedded languages were
				already parsed away at an earlier stage.</para>

			<para>The proposal for extending &tdf; with an <quote>assembly
				language</quote> token section (&tdf; currently has several
				existing language-specific sections) involves expressing these
				as a <quote>superset of assembly machines</quote>, rather than
				as several distinct machines. For example, this would
				provide generic <quote>write to a register</quote> operations.
				When this comes to be translated into machine-specific assembly,
				it becomes the job of &trans; to
				assert that the requested register actually exists. In this
				manner, &tdf; does not need to keep being extended with each
				new machine supported.</para>

			<para>Under this proposal, the &tdf; Token
				Register<xref linkend="tdfreg"/> is to be extended under two
				sections. Firstly, &lpi; tokens (chapter 6):
				There is no need for much to be added here, because our
				<quote>superset assembly</quote> consists almost entirely
				of function calls. However, it is used to provide fundamental
				concepts such as <quote>register</quote> (which would be passed
				in arguments to &api; calls), <quote>address</quote>,
				<quote>offset</quote> and so forth.</para>

			<para>The author suggests a prefix of <quote>~s.</quote> for &lpi;
				tokens, to correspond to <quote>.s</quote> files.</para>

			<para>The contents of these tokens (for example, register names)
				are encoded opaquely either as BITSTREAM or BYTESTREAM as
				appropriate. These contents are understood by each &trans;
				implementation supporting that token.</para>

			<para>Secondly, the &api; (chapter 7) is to be extended
				to provide each assembly instruction. These are viewed as an
				analogue of standard library functions in other
				languages.</para>

			<para>With this approach, the code generation for various machines
				(<quote>&trans; implementations</quote>) is free to bail out
				if it is unable to generate code for the requested tokens.
				This would usually indicate that the code being installed was
				written for a different assembly language.</para>
		</section>

		<section>
			<title>Questions</title>

			<variablelist>
				<varlistentry>
					<term>Why not use &tnc; <quote>preprocessing</quote>
						<xref linkend="tdfreg"/> to get target-specific
						things?</term>

					<listitem>
						<para>Quoting section 6.1:</para>

						<blockquote>Target specific versions of this capsule
							are obtained by transformation, using the
							<quote>preprocessing</quote> action of the &tdf;
							tool &tnc;, with definitions of the target
							dependency and C mapping tokens that are provided
							with the target installer.</blockquote>

						<para>This is used (amongst other things) for providing
							machine-specific constants - for example, the
							maximum value that may be stored in an integer.</para>

						<para>Unfortunately, this mechanism cannot be used to
							provide replacements such as making registers
							become machine-specific, as replacements can only
							occur by replacing tokens with more &tdf;, which must
							also be portable tokens (even if the
							<emphasis>values</emphasis> of those tokens are
							not).</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>What is the advantage of having a full set of
						assembly tokens as opposed to just one?
						<xref linkend="maide"/></term>

					<listitem>
						<para>The advantage is twofold. Firstly, we need only
							extend the set if one assembly provides a feature
							which is not already present for other assemblies.
							For example, register windows are specific to
							the UltraSPARC.</para>

						<para>Secondly, re-use means we can share code between
							&trans; implementations. This possibly allows for
							simple peephole optimisations to be centralised for
							multiple &trans; implementations. For example, most
							assemblies have a <quote>jump</quote> instruction,
							although the specifics may vary.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>How would you handle special purpose
						registers? <xref linkend="maide"/></term>

					<listitem>
						<para>It is tempting to create new tokens for general
							purpose instructions which have special purpose
							operands. However, under the scheme proposed, no new
							tokens need be defined; to restrict operations on
							specific registers, &trans; implementations would
							carry their own assertions stating in essence
							<quote>you can't perform this instruction with that
							register</quote> semantic checks.</para>

						<para>Note that each &trans; implements only a subset
							of the available assembly tokens.</para>

						<para>Therefore all these special-purpose features are
							restrictive, rather than permissive.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>Would the frontend syntax follow platform
						conventions or &tdf; conventions?
						<xref linkend="maide"/></term>

					<listitem>
						<para>The short answer here is that it doesn't matter:
							we can add as many parsers as we like for each
							syntax, without the added cost of separate
							backends.</para>

						<para>By having the &tdf; assembly tokens be a
							<quote>processor superset</quote>, we are able
							to duplicate implementations without needing to
							implement additional sets of tokens for each
							syntax.</para>

						<para>Likewise, each syntax need only implement a
							subset of its assembly - this is attractive as a
							pragmatic route to getting existing software to
							compile, based on the observation that most uses
							of assembly seem to be short snippets for specific
							purposes (for example, atomic operations for
							semaphores) - in this situation, only the few
							instructions used by that particular fragment
							need be implemented.</para>

						<para>This gives the situation of being able to
							practically support many languages by way of
							subsets, and nicely avoids the <quote>which
							syntax</quote> dilemma by providing any and all
							syntaxes. Adding more syntaxes should be as
							trivial as providing a lexer and grammar for
							the new syntax; the actions underling the grammar
							may be shared by all syntaxes for that
							language.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>Will platform specific tokens be logically
						separated in some form from portable tokens?
						<xref linkend="maide"/></term>

					<listitem>
						<para>Optionally, with their own group of &tdf; tokens
							per platform; if there's no chance they'll be used
							elsewhere (i.e. they are a concept specific to one
							processor), then it makes no sense to group them
							with the <quote>generic assembly</quote>
							tokens.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>Could inlined assembly be output by a producer
						to perform platform-specific
						optimisations? <xref linkend="maide"/></term>

					<listitem>
						<para>Producers of any language should not be aware of
							platform-specific optimisations. Having them emit
							inlined assembly may seem tempting, but &tdf;
							already provides a simpler (and portable) mechanism
							to achieve the same: an &lpi; token may be defined
							for the language construct of interest, which is
							installed accordingly per machine.</para>

						<para>These &lpi; tokens are replaced with
							machine-specific tokens by the installers. This way
							portability is maintained, since &lpi; tokens are
							expected to be present in all installers. Note that
							these replacements are also portable, but would
							vary from each other in terms of which algorithms
							suit particular architectures.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section>
			<title>Conclusion</title>

			<para>In summary:</para>

			<itemizedlist>
				<listitem>
					<para>Assembly is parsed out before it reaches
						&trans;. What remains is a set of tokens which form
						an interface between components of the compiler.
						&trans; implementations may therefore become as complex
						as required (both in terms of optimisation and in
						strictness) without affecting other &trans;es.</para>
				</listitem>

				<listitem>
					<para>&tdf; is extended with tokens which are a
						<quote>processor superset</quote> - as opposed to &tdf;
						itself which is a <quote>language
						superset</quote>.</para>
				</listitem>

				<listitem>
					<para>The proposal appears to be maintainable - i.e. it
						scales without needing to duplicate effort. It seems
						practical to implement.</para>
				</listitem>

				<listitem>
					<para>Furthermore, it gives &trans; the chance to know
						about side effects and other things or assembly
						instructions, as opposed to having to deal with opaque
						closures that can't be parallelised or otherwise
						integrated with high level languages.</para>
				</listitem>

				<listitem>
					<para>The scheme seems elegant in that the various logic is
						in the component where it belongs: &trans; knows about
						the semantics of assembly, but only for its own
						machine, and so forth.</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section>
		<title>Implementation</title>

		<para>The implementation affects the frontend of the compiler (since it
			introduces a new concept to the language); this need not
			necessarily affect the parser or lexer for the host languages.
			For each embedded language, a parsing mechanism must be provided;
			these may be provided by external programs, with a little glue code.
			Each of these returns a &tdf; tree; these trees are grafted on to
			the tree produced by the host language. This grafting code also
			belongs in the compiler frontend. Additionally, for non-portable
			languages, the &tdf; Token Register and the &trans; implementations
			are to be extended.</para>

		<section>
			<title>Implementation roadmap</title>

			<para>The implementation proposed lends itself naturally to
				incremental development, grouped within each of the areas
				affected.<footnote>
					<para>Perhaps as far as top-down versus bottom-up
					approaches go, this is <quote>inside-out</quote>, since
					the parsers and code generation are specifically not
					discussed.</para>
				</footnote> These features should be able to be developed
				independently of each other (save for the dependencies they
				form), and are also intended to provide useful features at each
				step along the way.</para>

			<para>This incremental development forms a clear roadmap,
				concentrating on one item at a time without affecting unrelated
				parts of the system. This minimised impact to the rest of the
				project. The order of implementation proposed is:</para>

			<orderedlist>
				<listitem>
					<para>To get the framework for <xref linkend="embedding"/>
						in place, &pltdf; makes a perfect example. It does not
						require extending the token register, and a compiler to
						generate &tdf; is already implemented (provided by
						&andfutils;), and so those distractions may be
						avoided.</para>

					<para>Hence work here is on dealing with the compiler's
						lexer and parser, in order to <quote>break out</quote>
						for embedded regions.</para>
				</listitem>

				<listitem>
					<para>Furthering the implementation to additionally
						support &tnc;'s <quote>&tdf; notation</quote> gives
						another portable language, permitting generalisation of
						the system for multiple languages. Again, since &tnc;
						generates only existing &tdf; tokens, the register is
						not to be extended at this stage. As for &pltdf;, an
						implementation of &tnc; is provided by
						&andfutils;.</para>
				</listitem>

				<listitem>
					<para>With two languages in place, the system should be able
						to be generalised under a realistic &api;. Further
						implementations of languages are expected to be more
						complex than the initial two, and so having this &api;
						in place helps contain that complexity.</para>
				</listitem>

				<listitem>
					<para>The &tnc; and &pltdf; implementations are converted to
						use the &api; formed.</para>
				</listitem>

				<listitem>
					<para>We now have <code>__lang</code> (or whichever syntax)
						in place, and the rest of the framework required for
						<xref linkend="embedding"/>. Now work may begin on
						<xref linkend="code"/>, which begins by designing the
						extended tokens required for each language
						introduced. Care should be taken in their design, if
						we are going to reuse them well.</para>
				</listitem>
			</orderedlist>
		</section>

		<section>
			<title>Features provided</title>

			<para>The most notable features provided by this scheme are
				itemised below:</para>

			<itemizedlist>
				<listitem>
					<para>Various different languages may be inlined. These may
						be either alternate frontends to the same set of actions
						(for example, multiple alternate syntaxes for assembly),
						or they may be entirely distinct languages.</para>
				</listitem>

				<listitem>
					<para>Inlined languages may optionally provide machine-specific
						features which would not otherwise be accessible to the
						C implementation.</para>
				</listitem>

				<listitem>
					<para>Machine-specific features are implemented using an
						existing mechanism (namely that language), hence we do
						not need to invent new assembly languages.</para>
				</listitem>

				<listitem>
					<para>&trans; implementations need only implement a subset
						of the available features.</para>
				</listitem>

				<listitem>
					<para>Areas of non-portability are minimised throughout the
						system. This reduces the set of various semantics which
						need to be kept track of (namely out of &tdf;).</para>
				</listitem>

				<listitem>
					<para>Duplication is reduced, therefore developer effort is
						minimised, meaning the project can reasonably maintain
						support for multiple platforms</para>
				</listitem>
			</itemizedlist>
		</section>

		<section>
			<title>Side-effects</title>

			<para>Side-effects of the implementation produce desirable features
				other than the original goal of <quote>inlined assembly</quote>.
				These features are inherent to the architecture of the scheme
				proposed, and may be capitalised on both to assist the
				implementation, and as features in their own rights.</para>

			<itemizedlist>
				<listitem>
					<para>Embedding other languages has various use-cases.
						&pltdf; would be rather suited for micro-optimisation
						in generated code, for example.</para>
				</listitem>

				<listitem>
					<para>A modular system made accessible via a library
						interface could be attractive to developers of
						<quote>little languages</quote>; these would form
						&dsl;s for the host language.</para>
				</listitem>

				<listitem>
					<para>Providing different syntaxes for assemblies is
						straightforward and low-cost, and widens the
						userbase.</para>
				</listitem>

				<listitem>
					<para>Since it is our installers which <quote>render</quote>
						the assembly (rather than passing it through as-is),
						semantic analysis of assembly may be undertaken.</para>
				</listitem>

				<listitem>
					<para>If semantic analysis of assembly is performed,
						embedded assembly may share the same optimisation
						as the usual generated code.</para>
				</listitem>

				<listitem>
					<para>One use-case would be for &tendra; as a tool to
						convert assembly from one syntax to another.</para>
				</listitem>

				<listitem>
					<para>With a little further framework, it would be
						possible to provide embedded languages as
						host languages in their own rights.</para>
				</listitem>
			</itemizedlist>

			<para>Higher-level languages may also be embedded under this scheme.
				For example, embedding SQL could be implemented by rendering the
				SQL syntax down to C &tdf; tokens (namely to call the SQL
				library) before &trans; is reached. This makes for an interesting
				alternative to preprocessing source to embed SQL.</para>
		</section>

		<section>
			<title>Axioms observed</title>

			<para>Given the above scheme the following axioms hold:</para>

			<itemizedlist>
				<listitem>
					<para>Parsing of inlined languages is performed during compilation
						(as opposed to a string of assembly passed to installers).</para>
				</listitem>

				<listitem>
					<para>Installers may be as complex as they need (with
						machine-specific details, that is), without bringing
						complexity to other areas of code.</para>
				</listitem>

				<listitem>
					<para>Semantic checks are performed in the component which most
						naturally understands them (namely assembly is checked by
						installers).</para>
				</listitem>

				<listitem>
					<para>&tdf; tokens may contain nonsensical items (such as
						references to registers which do not exist.</para>
				</listitem>

				<listitem>
					<para>Nonsensical items present are checked for validity on
						a specific implementation during installation.</para>
				</listitem>

				<listitem>
					<para>An installer need not implement all features present in
						the intermediate <quote>superset</quote> assembly...</para>
				</listitem>

				<listitem>
					<para>...therefore we cannot statically check all possible
						assembly expressed by &tdf;
						unless there is an installer which implements all features.
						Such an installer would not represent a real processor,
						and would be unable to perform semantic checks.</para>

					<para>Therefore we cannot statically check all possible
						assembly expressed by &tdf;...</para>
				</listitem>

				<listitem>
					<para>...however the subset implemented by an installer
						may be checked for permissible semantics by that
						installer.</para>

					<para>Therefore in order to check a subset which is being
						used, it needs to be run through the installer for that
						machine.</para>

					<para>This subset may be the entire capabilities for that
						machine, but (as explained above) it cannot represent
						all possible assembly languages.</para>
				</listitem>

				<listitem>
					<para>Features not implemented by installers but
						present in the &tdf; tree will cause errors during
						installation.</para>

					<para>Usually these would either be <quote>attempting to
						install assembly written for a different machine</quote>
						or a user error in writing the assembly.</para>
				</listitem>
			</itemizedlist>

			<para>From these, it can be seen (perhaps unsurprisingly) that
				while we can identify all reasonable errors, static analysis
				of the correctness of assembly cannot be performed before
				installation (because the target machine is unknown), but
				rather only after installation, which restricts the analysis
				to the capabilities of one particular target machine.</para>

			<para>Whether an installer actually performs this analysis is
				a decision of the authors of that installer.</para>
		</section>
	</section>

	<bibliography>
		<biblioentry id="tdfspec">
			<abbrev>Spec</abbrev>
			<corpauthor>The &tendra; Project</corpauthor>
			<title>&tdf; Specification</title>
			<bibliosource class="uri"><ulink
				url="http://docs.tendra.org/reference/specification/"/></bibliosource>
		</biblioentry>

		<biblioentry id="tdfreg">
			<abbrev>Reg</abbrev>
			<corpauthor>The &tendra; Project</corpauthor>
			<title>&tdf; Token Register</title>
			<bibliosource class="uri"><ulink
				url="http://docs.tendra.org/reference/register/"/></bibliosource>
		</biblioentry>

		<biblioentry id="C99">
			<abbrev>C99</abbrev>
			<title><acronym>ISO</acronym>/<acronym>IEC</acronym> 9899:1999</title>
			<pubdate>01/12/1999</pubdate>
			<bibliosource class="uri"><ulink
				url="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf"/>
				(Committee Draft)</bibliosource>
		</biblioentry>

		<biblioentry id="maide">
			<abbrev>Freudenberg</abbrev>
			<author>
				<firstname>Madeleine</firstname>
				<surname>Freudenberg</surname>
			</author>
			<publisher>Personal communication</publisher>
			<date>September 2007</date>
		</biblioentry>
	</bibliography>
</article>

