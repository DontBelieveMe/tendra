<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<!--
	$Id$
-->

<chapter>
	<title>The Language</title>

	<section>
		<title>Semantics</title>

		<para>The basic philosophy of PL_TDF is to provide the <quote>glue</quote>
			constructors of TDF automatically, while still allowing the programmer
			to use the significant constructors in their most general form. By
			<quote>glue</quote> constructors, I mean those like make_link, make_group etc.
			which are there to provide tedious, but vital, constructions concerned
			with linking and naming. The <quote>significant</quote> constructors really come in
			two groups, depending on their resulting SORTs. There are those SORTs
			like TOKDEC, whose SORTs are purely syntactic and can't be used as
			results of token applications or _cond constructions. On the other
			hand, the first-class SORTs, like EXP, can be used in those situations
			and generally have a much richer set of constructors.	These
			first-class SORTs are precisely those which have SORTNAMEs.	These
			SORTNAMEs appear in PL_TDF as expansions of &lt;Sortname&gt;:</para>

			<programlisting language="bnf">&lt;Sortname&gt; ::= ACCESS
&lt;Sortname&gt; ::= AL_TAG
&lt;Sortname&gt; ::= ALIGNMENT
&lt;Sortname&gt; ::= BITFIELD_VARIETY
&lt;Sortname&gt; ::= BOOL
&lt;Sortname&gt; ::= ERROR_TREATMENT
&lt;Sortname&gt; ::= EXP
&lt;Sortname&gt; ::= FLOATING_VARIETY
&lt;Sortname&gt; ::= LABEL
&lt;Sortname&gt; ::= NAT
&lt;Sortname&gt; ::= NTEST
&lt;Sortname&gt; ::= ROUNDING_MODE
&lt;Sortname&gt; ::= SHAPE
&lt;Sortname&gt; ::= SIGNED_NAT
&lt;Sortname&gt; ::= STRING
&lt;Sortname&gt; ::= TAG
&lt;Sortname&gt; ::= TRANSFER_MODE
&lt;Sortname&gt; ::= VARIETY</programlisting>

		<para>All of the significant constructors are expanded by non-terminals with
			names related to their resulting SORT e.g. all EXPs are expanded by
			&lt;Exp&gt; and all TOKDECs are expanded by &lt;Tokdec&gt;. Any
			first-class SORT can be expanded by using the constructor names given
			in the TDF specification, provided that the parameter SORTs are also
			first-class. For example, the following are all valid expansions of
			&lt;Exp&gt; :</para>

<!-- TODO <comment> perhaps, or a table -->
			<programlisting language="bnf">make_top
return(E)									where E is an expansion of &lt;Exp&gt;
goto(L)										where L is an expansion of &lt;Label&gt;
assign(E1, E2)						 where E1 and E2 are expansions of &lt;Exp&gt;</programlisting>

		<para>Any such use of TDF constructors will be checked for the
			SORT-correctness of their parameters. I will denote such a constructor
			as an &lt;exp_constructor&gt;; similarly for all the other first-class
			sorts.</para>

		<para>Any of the first-class sorts may also be expanded by a token
			application. Tokens in PL_TDF are given &lt;ident&gt; names by
			&lt;Tokdef&gt; or &lt;Tokdec&gt; which must occur before their use in
			applications. In applications, these names will be denoted by
			&lt;exp_token&gt;, &lt;shape_token&gt; etc. , depending on the result
			sort of their introduction.</para>

		<para>The principle of "no use before declaration" also applies to
			&lt;ident&gt; names given to TAGs.</para>
	</section>

	<section>
		<title>Program</title>

		<para>The root expansion of a PL_TDF program is given by
			&lt;Program&gt;:</para>

		<programlisting language="bnf">&lt;Program&gt; ::= &lt;ElementList&gt; Keep ( &lt;Item&gt;-List-Opt )

&lt;ElementList&gt; ::= &lt;Element&gt; ;
&lt;ElementList&gt; ::= &lt;Element&gt; ; &lt;ElementList&gt;

&lt;Element&gt; ::= &lt;Tokdec&gt;
&lt;Element&gt; ::= &lt;Tokdef&gt;
&lt;Element&gt; ::= &lt;Tagdec&gt;
&lt;Element&gt; ::= &lt;Tagdef&gt;
&lt;Element&gt; ::= &lt;Altagdef&gt;
&lt;Element&gt; ::= &lt;Structdef&gt;
&lt;Element&gt; ::= &lt;Procdef&gt;

&lt;Item&gt; ::= &lt;tag&gt;
&lt;Item&gt; ::= &lt;token&gt;
&lt;item&gt; ::= &lt;altag&gt;</programlisting>

		<para>A &lt;Program&gt; consists of a list of definitions and declarations
			giving meaning to various &lt;ident&gt;s, as TAGs, TOKENs and
			AL_TAGs. The &lt;Item&gt;-List-Opt indicates which of these names
			will be externally available via CAPSULE_LINKs; in addition any
			other names which are declared but not defined will also be linked
			externally.</para>

		<para>A &lt;Program&gt; will produce a single TDF CAPSULE.</para>
	</section>

	<section>
		<title>Tokdec</title>

		<para>A &lt;Tokdec&gt; introduces an &lt;ident&gt; as a TOKEN:</para>

		<programlisting language="bnf">&lt;Tokdec&gt; ::= Tokdec &lt;ident&gt;&lt;Signature&gt;: [ &lt;TokDecPar&gt;-List-Opt ] &lt;ResultSort&gt;

&lt;ResultSort&gt; ::= &lt;Sortname&gt;
&lt;TokDecPar&gt; ::= &lt;Sortname&gt;
&lt;TokDecPar&gt; ::= TOKEN [ &lt;TokDecPar&gt;-List-Opt ] &lt;ResultSort&gt;
&lt;Signature&gt; ::= &lt;String&gt;-Opt</programlisting>

		<para>This produces a TOKDEC in a tokdec UNIT of the CAPSULE.	Further
			uses of the introduced &lt;ident&gt; will be treated as a
			&lt;x-token&gt; where x is given by the &lt;ResultSort&gt;.</para>
	</section>

	<section id="tokdef">
		<title>Tokdef</title>

		<para>A &lt;Tokdef&gt; defines an &lt;ident&gt; as a TOKEN; this
			&lt;ident&gt; may have previously been introduced by a
			&lt;Tokdec&gt;:</para>

		<programlisting language="bnf">&lt;Tokdef&gt; ::= Tokdef &lt;ident&gt;&lt;Signature&gt; = &lt;Tok_Defn&gt;

&lt;Tok_Defn&gt; ::= [ &lt;TokDefPar&gt;-List-Opt ] &lt;ResultSort&gt; &lt;result_sort&gt;
	&lt;TokDefPar&gt; ::= &lt;ident&gt; : &lt;TokDecPar&gt;
&lt;Signature&gt; ::= &lt;String&gt;-Opt</programlisting>

		<para>This produces a TOKDEF in a tokdef UNIT of the CAPSULE. The
			expansion of &lt;result_sort&gt; depends on &lt;ResultSort&gt;,
			e.g. if &lt;ResultSort&gt; is EXP then &lt;result_sort&gt; ::=
			&lt;Exp&gt; and so on.</para>

		<para>Each of the &lt;ident&gt;s in the &lt;TokDefPar&gt;s will be
			names for tokens whose scope is &lt;result_sort&gt;. A use of such
			a name within its scope will be expanded as a parameterless token
			application of the appropriate sort given by its
			&lt;TokDecPar&gt;. Note that this is still true if the
			&lt;TokDecPar&gt; is a TOKEN - if a &lt;TokDefPar&gt; is:</para>

		<programlisting language="bnf">x: TOKEN[ LABEL ]EXP</programlisting>

		<para>then x[L] is expanded as:</para>

		<programlisting language="bnf">exp_apply_token( token_apply_token(x, ()), L)</programlisting>

		<para>&lt;Tok_defn&gt; also occurs in an expansion of &lt;Token&gt;, as
			a parameter of a token application.</para>
	</section>

	<section>
		<title>Tagdec</title>

		<para>A &lt;Tagdec&gt; introduces an &lt;ident&gt; as a TAG:</para>

		<programlisting language="bnf">&lt;Tagdec&gt; ::= &lt;DecType&gt; &lt;ident&gt; &lt;Signature&gt; &lt;Access&gt;-Opt : &lt;Shape&gt;

&lt;DecType&gt; ::= Vardec
&lt;DecType&gt; ::= Iddec
&lt;DecType&gt; ::= Commondec
&lt;Signature&gt; ::= &lt;String&gt;-Opt</programlisting>

		<para>This produces a TAGDEC in a tagdec UNIT of the CAPSULE, using a
			make_id_tagdec for the Iddec option, a make_var_tagdec for the
			Vardec option and a common_tagdec for the Commondec option.</para>

		<para>The &lt;Shape&gt;s in both &lt;Tagdec&gt;s and &lt;Tagdef&gt;s
			will produce SHAPE TOKENs in a tagdef UNIT; these may be applied
			in various shorthand operations on TAG &lt;ident&gt;s.</para>
	</section>

	<section>
		<title>Tagdef</title>

		<para>A &lt;Tagdef&gt; defines an &lt;ident&gt; as a TAG. This
			&lt;ident&gt; may have previously been introduced by a
			&lt;Tagdec&gt;; if it has not the &lt; : &lt;Shape&gt; &gt;-Opt
			below must not be empty and a TAGDEC will be produced for it.</para>

			<programlisting language="bnf">&lt;Tagdef&gt; ::= Var &lt;ident&gt;&lt;Signature&gt; &lt; : &lt;Shape&gt; &gt;-Opt &lt; = &lt;Exp&gt;&gt;-Opt</programlisting>

		<para>Produces a make_var_tagdef.</para>

		<programlisting language="bnf">&lt;Tagdef&gt; ::= Common &lt;ident&gt; &lt;Signature&gt;&lt; : &lt;Shape&gt; &gt;-Opt &lt; = &lt;Exp&gt; &gt;-Opt</programlisting>

		<para>Produces a common_tagdef.</para>

		<programlisting language="bnf">&lt;Tagdef&gt; ::= Let &lt;ident&gt;&lt;Signature&gt; &lt; : &lt;Shape&gt; &gt;-Opt = &lt;Exp&gt;</programlisting>

		<para>Produces a make_id_tagdef.</para>

		<programlisting language="bnf">&lt;Tagdef&gt; ::= String &lt;ident&gt; &lt;Variety&gt;-Opt =&lt;string&gt;</programlisting>

		<para>This is a shorthand for producing names which have the properties
			of C strings. The &lt;Variety&gt;-Opt gives the variety of the
			characters with the string, an empty option giving unsigned chars.
			The TDF produced is a make_var_tagdef initialised by a
			make_nof_int. This means that given a String definition:</para>

		<programlisting language="bnf">String format = "Result = %d\n"</programlisting>

		<para>the tag &lt;ident&gt;, format, could be used straightforwardly as
			the first parameter of printf, for example.</para>
	</section>

	<section>
		<title>Altagdef</title>

		<para>An &lt;Altagdef&gt; defines an &lt;ident&gt; as an AL_TAG:</para>

		<programlisting language="bnf">&lt;Altagdef&gt; ::= Al_tagdef &lt;ident&gt; = &lt;Alignment&gt;</programlisting>

		<para>This produces an AL_TAGDEF in an al_tagdef UNIT of the CAPSULE. The
			&lt;ident&gt; concerned can be previously used in as an expansion of
			&lt;Alignment&gt;.</para>
	</section>

	<section>
		<title>Structdef</title>

		<para>A &lt;Structdef&gt; defines a TOKEN for a structure SHAPE,
			together with two TOKENs for each field of the structure to allow
			easy access to the offsets and contents of the field:</para>

		<programlisting language="bnf">&lt;Structdef&gt; ::= Struct &lt;Structname&gt; ( &lt;Field&gt;-List )

&lt;Structname&gt; ::= &lt;ident&gt;

&lt;Field&gt; ::= &lt;Fieldname&gt; : &lt;Shape&gt;

&lt;Fieldname&gt; ::= &lt;ident&gt;</programlisting>

		<para>This produces a TOKDEF in a tokdef UNIT defining
			&lt;Structname&gt; as a SHAPE token whose expansion is an EXP
			OFFSET(a1,a2) where the OFFSET is the size of the structure with
			standard TDF padding and offset addition of the component SHAPEs
			and sizes (note that this may not correspond precisely with C
			sizes).Each &lt;Fieldname&gt; will produce two TOKENs. The first
			is named by &lt;Fieldname&gt; itself and is a [EXP]EXP which gives
			the value of the field of its structure parameter. The second is
			named by prefixing &lt;Fieldname&gt; by the.-symbol and is an [
			]EXP giving the OFFSET of the field from the start of the
			structure.	Thus given:</para>

		<programlisting language="bnf">Struct Complex (re: Double, im: Double)</programlisting>

		<para>Complex is a TOKEN for a SHAPE defining two Doubles; re[E] and
			im[E] will extract the components of E where E is an EXP of shape
			Complex; .re and.im give EXP OFFSETs of the the two fields from
			the start of the structure.</para>
	</section>

	<section id="procdef">
		<title>Procdef</title>

		<para>A &lt;Procdef&gt; defines a TAG to be a procedure; it is
			simply an abreviation of a an Iddec &lt;Tagdef&gt;:</para>

		<programlisting language="bnf">&lt;Procdef&gt; ::= Proc &lt;ident&gt; = &lt;Proc_Defn&gt;

&lt;Proc_Defn&gt; ::= &lt;Simple_Proc&gt;
&lt;Proc_Defn&gt; ::= &lt;General_Proc&gt;

&lt;Simple_Proc&gt; ::= &lt;Shape&gt; ( &lt;TagShAcc&gt;-List-Opt &lt;VarIntro&gt;-Opt ) &lt;ClosedExp&gt;

&lt;TagShAcc&gt; ::= &lt;Parametername&gt; &lt;Access&gt;-Opt : &lt;Shape&gt;

&lt;Parametername&gt; ::= &lt;ident&gt;

&lt;VarIntro&gt; ::= Varpar &lt;Varparname&gt; : &lt;Alignment&gt;

&lt;Varparname&gt; ::= &lt;ident&gt;

&lt;General_Proc&gt; ::= General &lt;Shape&gt; ( &lt;For_Callers&gt;; &lt;For_Callees&gt;) &lt;ProcProps&gt;-Opt &lt;ClosedExp&gt;

&lt;For_Callers&gt; ::= &lt;TagShAcc&gt;-List-Opt &lt;...&gt;-Opt

&lt;For_Callees&gt; ::= &lt;TagShAcc&gt;-List-Opt &lt;...&gt;-Opt

&lt;ProcProps&gt; ::= &lt;untidy&gt;-Opt &lt;check_stack&gt;-Opt</programlisting>

		<para>A &lt;Procdef&gt; produces a TAGDEF in a tagdef UNIT and and,
			possibly, a TAGDEC in a tagdef UNIT.</para>

		<para>A &lt;Simple_Proc&gt; produces a make_proc with the obvious
			operands. The scope of the tag names introduced by
			&lt;Parametername&gt; and &lt;Varparname&gt; is the
			&lt;ClosedExp&gt; (see <link linkend="control-structure">section
			3.3</link>).</para>

		<para>A &lt;General_Proc&gt; produces a make_general_proc with
			formal caller parameters given by &lt;For_callers&gt; and the
			formal callee parameters given by &lt;For_callees&gt;; in both
			cases the &lt;...&gt; option says that the procedure can be called
			with a variable number of parameters. The scope of the tag names
			are the same as for &lt;Simple_Proc&gt;.</para>
	</section>

</chapter>

