<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<!--
	$Id$
-->

<chapter>
	<title>The Language</title>

	<para>The basic philosophy of PL_TDF is to provide the <quote>glue</quote>
		constructors of TDF automatically, while still allowing the programmer
		to use the significant constructors in their most general form. By
		<quote>glue</quote> constructors, I mean those like make_link, make_group etc.
		which are there to provide tedious, but vital, constructions concerned
		with linking and naming. The <quote>significant</quote> constructors really come in
		two groups, depending on their resulting SORTs. There are those SORTs
		like TOKDEC, whose SORTs are purely syntactic and can't be used as
		results of token applications or _cond constructions. On the other
		hand, the first-class SORTs, like EXP, can be used in those situations
		and generally have a much richer set of constructors.	These
		first-class SORTs are precisely those which have SORTNAMEs.	These
		SORTNAMEs appear in PL_TDF as expansions of &lt;Sortname&gt;:
		<programlisting>
&lt;Sortname&gt; ::= ACCESS
&lt;Sortname&gt; ::= AL_TAG
&lt;Sortname&gt; ::= ALIGNMENT
&lt;Sortname&gt; ::= BITFIELD_VARIETY
&lt;Sortname&gt; ::= BOOL
&lt;Sortname&gt; ::= ERROR_TREATMENT
&lt;Sortname&gt; ::= EXP
&lt;Sortname&gt; ::= FLOATING_VARIETY
&lt;Sortname&gt; ::= LABEL
&lt;Sortname&gt; ::= NAT
&lt;Sortname&gt; ::= NTEST
&lt;Sortname&gt; ::= ROUNDING_MODE
&lt;Sortname&gt; ::= SHAPE
&lt;Sortname&gt; ::= SIGNED_NAT
&lt;Sortname&gt; ::= STRING
&lt;Sortname&gt; ::= TAG
&lt;Sortname&gt; ::= TRANSFER_MODE
&lt;Sortname&gt; ::= VARIETY</programlisting>
		All of the significant constructors are expanded by non-terminals with
		names related to their resulting SORT e.g. all EXPs are expanded by
		&lt;Exp&gt; and all TOKDECs are expanded by &lt;Tokdec&gt;. Any
		first-class SORT can be expanded by using the constructor names given
		in the TDF specification, provided that the parameter SORTs are also
		first-class. For example, the following are all valid expansions of
		&lt;Exp&gt; :
<!-- TODO <comment> perhaps, or a table -->
		<programlisting>
make_top
return(E)									where E is an expansion of &lt;Exp&gt;
goto(L)										where L is an expansion of &lt;Label&gt;
assign(E1, E2)						 where E1 and E2 are expansions of &lt;Exp&gt;</programlisting>
		Any such use of TDF constructors will be checked for the
		SORT-correctness of their parameters. I will denote such a constructor
		as an &lt;exp_constructor&gt;; similarly for all the other first-class
		sorts.</para>

	<para>Any of the first-class sorts may also be expanded by a token
		application. Tokens in PL_TDF are given &lt;ident&gt; names by
		&lt;Tokdef&gt; or &lt;Tokdec&gt; which must occur before their use in
		applications. In applications, these names will be denoted by
		&lt;exp_token&gt;, &lt;shape_token&gt; etc. , depending on the result
		sort of their introduction.</para>

	<para>The principle of "no use before declaration" also applies to
		&lt;ident&gt; names given to TAGs.</para>

	<section id="S7">
		<title>Program</title>

		<para>The root expansion of a PL_TDF program is given by
			&lt;Program&gt;:
			<programlisting>
&lt;Program&gt; ::= &lt;ElementList&gt; Keep ( &lt;Item&gt;-List-Opt )

&lt;ElementList&gt; ::= &lt;Element&gt; ;
&lt;ElementList&gt; ::= &lt;Element&gt; ; &lt;ElementList&gt;

&lt;Element&gt; ::= &lt;Tokdec&gt;
&lt;Element&gt; ::= &lt;Tokdef&gt;
&lt;Element&gt; ::= &lt;Tagdec&gt;
&lt;Element&gt; ::= &lt;Tagdef&gt;
&lt;Element&gt; ::= &lt;Altagdef&gt;
&lt;Element&gt; ::= &lt;Structdef&gt;
&lt;Element&gt; ::= &lt;Procdef&gt;

&lt;Item&gt; ::= &lt;tag&gt;
&lt;Item&gt; ::= &lt;token&gt;
&lt;item&gt; ::= &lt;altag&gt;</programlisting>
			A &lt;Program&gt; consists of a list of definitions and declarations
			giving meaning to various &lt;ident&gt;s, as TAGs, TOKENs and
			AL_TAGs. The &lt;Item&gt;-List-Opt indicates which of these names
			will be externally available via CAPSULE_LINKs; in addition any
			other names which are declared but not defined will also be linked
			externally.</para>

		<para>A &lt;Program&gt; will produce a single TDF CAPSULE.</para>

		<section id="S8">
			<title>Tokdec</title>

			<para>A &lt;Tokdec&gt; introduces an &lt;ident&gt; as a TOKEN:
				<programlisting>
&lt;Tokdec&gt; ::= Tokdec &lt;ident&gt;&lt;Signature&gt;: [ &lt;TokDecPar&gt;-List-Opt ] &lt;ResultSort&gt;

&lt;ResultSort&gt; ::= &lt;Sortname&gt;
&lt;TokDecPar&gt; ::= &lt;Sortname&gt;
&lt;TokDecPar&gt; ::= TOKEN [ &lt;TokDecPar&gt;-List-Opt ] &lt;ResultSort&gt;
&lt;Signature&gt; ::= &lt;String&gt;-Opt</programlisting>
				This produces a TOKDEC in a tokdec UNIT of the CAPSULE.	Further
				uses of the introduced &lt;ident&gt; will be treated as a
				&lt;x-token&gt; where x is given by the &lt;ResultSort&gt;.</para>
		</section>

		<section id="S9">
			<title>Tokdef</title>

			<para>A &lt;Tokdef&gt; defines an &lt;ident&gt; as a TOKEN; this
				&lt;ident&gt; may have previously been introduced by a
				&lt;Tokdec&gt;:
				<programlisting>
&lt;Tokdef&gt; ::= Tokdef &lt;ident&gt;&lt;Signature&gt; = &lt;Tok_Defn&gt;

&lt;Tok_Defn&gt; ::= [ &lt;TokDefPar&gt;-List-Opt ] &lt;ResultSort&gt; &lt;result_sort&gt;
	&lt;TokDefPar&gt; ::= &lt;ident&gt; : &lt;TokDecPar&gt;
&lt;Signature&gt; ::= &lt;String&gt;-Opt</programlisting>
				This produces a TOKDEF in a tokdef UNIT of the CAPSULE. The
				expansion of &lt;result_sort&gt; depends on &lt;ResultSort&gt;,
				e.g. if &lt;ResultSort&gt; is EXP then &lt;result_sort&gt; ::=
				&lt;Exp&gt; and so on.</para>

			<para>Each of the &lt;ident&gt;s in the &lt;TokDefPar&gt;s will be
				names for tokens whose scope is &lt;result_sort&gt;. A use of such
				a name within its scope will be expanded as a parameterless token
				application of the appropriate sort given by its
				&lt;TokDecPar&gt;. Note that this is still true if the
				&lt;TokDecPar&gt; is a TOKEN - if a &lt;TokDefPar&gt; is:
				<programlisting>
x: TOKEN[ LABEL ]EXP</programlisting>
				then x[L] is expanded as:
				<programlisting>
exp_apply_token( token_apply_token(x, ()), L)</programlisting>
				&lt;Tok_defn&gt; also occurs in an expansion of &lt;Token&gt;, as
				a parameter of a token application.</para>
		</section>

		<section id="S10">
			<title>Tagdec</title>

			<para>A &lt;Tagdec&gt; introduces an &lt;ident&gt; as a TAG:
				<programlisting>
&lt;Tagdec&gt; ::= &lt;DecType&gt; &lt;ident&gt; &lt;Signature&gt; &lt;Access&gt;-Opt : &lt;Shape&gt;

&lt;DecType&gt; ::= Vardec
&lt;DecType&gt; ::= Iddec
&lt;DecType&gt; ::= Commondec
&lt;Signature&gt; ::= &lt;String&gt;-Opt</programlisting>
				This produces a TAGDEC in a tagdec UNIT of the CAPSULE, using a
				make_id_tagdec for the Iddec option, a make_var_tagdec for the
				Vardec option and a common_tagdec for the Commondec option.</para>

			<para>The &lt;Shape&gt;s in both &lt;Tagdec&gt;s and &lt;Tagdef&gt;s
				will produce SHAPE TOKENs in a tagdef UNIT; these may be applied
				in various shorthand operations on TAG &lt;ident&gt;s.</para>
		</section>

		<section id="S11">
			<title>Tagdef</title>

			<para>A &lt;Tagdef&gt; defines an &lt;ident&gt; as a TAG. This
				&lt;ident&gt; may have previously been introduced by a
				&lt;Tagdec&gt;; if it has not the &lt; : &lt;Shape&gt; &gt;-Opt
				below must not be empty and a TAGDEC will be produced for it.
				<programlisting>
&lt;Tagdef&gt; ::= Var &lt;ident&gt;&lt;Signature&gt; &lt; : &lt;Shape&gt; &gt;-Opt &lt; = &lt;Exp&gt;&gt;-Opt</programlisting>
				Produces a make_var_tagdef.
				<programlisting>
&lt;Tagdef&gt; ::= Common &lt;ident&gt; &lt;Signature&gt;&lt; : &lt;Shape&gt; &gt;-Opt &lt; = &lt;Exp&gt; &gt;-Opt</programlisting>
				Produces a common_tagdef.
				<programlisting>
&lt;Tagdef&gt; ::= Let &lt;ident&gt;&lt;Signature&gt; &lt; : &lt;Shape&gt; &gt;-Opt = &lt;Exp&gt;</programlisting>
				Produces a make_id_tagdef.
				<programlisting>
&lt;Tagdef&gt; ::= String &lt;ident&gt; &lt;Variety&gt;-Opt =&lt;string&gt;</programlisting>
				This is a shorthand for producing names which have the properties
				of C strings. The &lt;Variety&gt;-Opt gives the variety of the
				characters with the string, an empty option giving unsigned chars.
				The TDF produced is a make_var_tagdef initialised by a
				make_nof_int. This means that given a String definition:
				<programlisting>
String format = "Result = %d\n"</programlisting>
				the tag &lt;ident&gt;, format, could be used straightforwardly as
				the first parameter of printf - see <link linkend="S41">Section 4
				(Example PL_TDF programs)</link>.</para>
		</section>

		<section id="S12">
			<title>Altagdef</title>

			<para>An &lt;Altagdef&gt; defines an &lt;ident&gt; as an AL_TAG:
			<programlisting>
&lt;Altagdef&gt; ::= Al_tagdef &lt;ident&gt; = &lt;Alignment&gt;</programlisting>
			This produces an AL_TAGDEF in an al_tagdef UNIT of the CAPSULE. The
			&lt;ident&gt; concerned can be previously used in as an expansion of
			&lt;Alignment&gt;.</para>
		</section>

		<section id="S13">
			<title>Structdef</title>

			<para>A &lt;Structdef&gt; defines a TOKEN for a structure SHAPE,
				together with two TOKENs for each field of the structure to allow
				easy access to the offsets and contents of the field:
				<programlisting>
&lt;Structdef&gt; ::= Struct &lt;Structname&gt; ( &lt;Field&gt;-List )

&lt;Structname&gt; ::= &lt;ident&gt;

&lt;Field&gt; ::= &lt;Fieldname&gt; : &lt;Shape&gt;

&lt;Fieldname&gt; ::= &lt;ident&gt;</programlisting>
				This produces a TOKDEF in a tokdef UNIT defining
				&lt;Structname&gt; as a SHAPE token whose expansion is an EXP
				OFFSET(a1,a2) where the OFFSET is the size of the structure with
				standard TDF padding and offset addition of the component SHAPEs
				and sizes (note that this may not correspond precisely with C
				sizes).Each &lt;Fieldname&gt; will produce two TOKENs. The first
				is named by &lt;Fieldname&gt; itself and is a [EXP]EXP which gives
				the value of the field of its structure parameter. The second is
				named by prefixing &lt;Fieldname&gt; by the.-symbol and is an [
				]EXP giving the OFFSET of the field from the start of the
				structure.	Thus given:
				<programlisting>
Struct Complex (re: Double, im: Double)</programlisting>
				Complex is a TOKEN for a SHAPE defining two Doubles; re[E] and
				im[E] will extract the components of E where E is an EXP of shape
				Complex; .re and.im give EXP OFFSETs of the the two fields from
				the start of the structure.</para>
		</section>

		<section id="S14">
			<title>Procdef</title>

			<para>A &lt;Procdef&gt; defines a TAG to be a procedure; it is
				simply an abreviation of a an Iddec &lt;Tagdef&gt;:
				<programlisting>
&lt;Procdef&gt; ::= Proc &lt;ident&gt; = &lt;Proc_Defn&gt;

&lt;Proc_Defn&gt; ::= &lt;Simple_Proc&gt;
&lt;Proc_Defn&gt; ::= &lt;General_Proc&gt;

&lt;Simple_Proc&gt; ::= &lt;Shape&gt; ( &lt;TagShAcc&gt;-List-Opt &lt;VarIntro&gt;-Opt ) &lt;ClosedExp&gt;

&lt;TagShAcc&gt; ::= &lt;Parametername&gt; &lt;Access&gt;-Opt : &lt;Shape&gt;

&lt;Parametername&gt; ::= &lt;ident&gt;

&lt;VarIntro&gt; ::= Varpar &lt;Varparname&gt; : &lt;Alignment&gt;

&lt;Varparname&gt; ::= &lt;ident&gt;</programlisting>
				<programlisting>
&lt;General_Proc&gt; ::= General &lt;Shape&gt; ( &lt;For_Callers&gt;; &lt;For_Callees&gt;) &lt;ProcProps&gt;-Opt &lt;ClosedExp&gt;

&lt;For_Callers&gt; ::= &lt;TagShAcc&gt;-List-Opt &lt;...&gt;-Opt

&lt;For_Callees&gt; ::= &lt;TagShAcc&gt;-List-Opt &lt;...&gt;-Opt

&lt;ProcProps&gt; ::= &lt;untidy&gt;-Opt &lt;check_stack&gt;-Opt</programlisting>
				A &lt;Procdef&gt; produces a TAGDEF in a tagdef UNIT and and,
				possibly, a TAGDEC in a tagdef UNIT.</para>

			<para>A &lt;Simple_Proc&gt; produces a make_proc with the obvious
				operands. The scope of the tag names introduced by
				&lt;Parametername&gt; and &lt;Varparname&gt; is the
				&lt;ClosedExp&gt; (see <link linkend="S36">section
				3.3</link>).</para>

			<para>A &lt;General_Proc&gt; produces a make_general_proc with
				formal caller parameters given by &lt;For_callers&gt; and the
				formal callee parameters given by &lt;For_callees&gt;; in both
				cases the &lt;...&gt; option says that the procedure can be called
				with a variable number of parameters. The scope of the tag names
				are the same as for &lt;Simple_Proc&gt;.</para>
		</section>
	</section>

	<section id="S15">
		<title>First-class SORT expansions</title>

		<para>All of the first-class sorts have similar expansions for native
			TDF constructions and for token applications. I shall take
			&lt;Shape&gt; as the paradigm sort and allow the reader to conjugate
			the following for the the other sorts.</para>

		<para>Those first-class sorts which include the _cond constructions
			denote them in the same way:
			<programlisting>
&lt;Shape&gt; ::= SHAPE ? ( &lt;Exp&gt;, &lt;Shape&gt;, &lt;Shape&gt; )</programlisting>
			This produces a shape_cond with the obvious parameters.</para>

		<para>Each constructor for &lt;Shape&gt; with parameters which are
			first-class sorts can be expanded:
			<programlisting>
&lt;Shape&gt; ::= &lt;shape_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt</programlisting>
			Each &lt;constructor_param&gt; will be the first_class SORT
			expansion, required by the &lt;shape_constructor&gt; as in the TDF
			specification eg the constructor, pointer, requires a
			&lt;constructor_param&gt; ::= &lt;Alignment&gt;.</para>

		<para>Any &lt;ident&gt; which is declared to be a
			&lt;shape_token&gt; by a TOKDEF or TOKDEC can be expanded:
			<programlisting>
&lt;Shape&gt; ::= &lt;shape_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
			This will produce a shape_apply_token with the appropriate
			parameters. Each &lt;token_param&gt; will be the first-class SORT
			expansion required by the SORT given by the &lt;TokDecPar&gt; of the
			TOKDEF or TOKDEC which introduced &lt;shape_token&gt;.</para>

		<section id="S16">
			<title>Access</title>

			<para>
			<programlisting>
&lt;Access&gt; ::= ACCESS ? ( &lt;Exp&gt; , &lt;Access&gt; , &lt;Access&gt; )
&lt;Access&gt; ::= &lt;access_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Access&gt; ::= &lt;access_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
			There are no expansions of &lt;Access&gt; other than the standard
			ones.</para>
		</section>

		<section id="S17">
			<title>Al_tag</title>

			<para>
			<programlisting>
&lt;Al_tag&gt; ::= &lt;al_tag_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
			The standard token expansion.
			<programlisting>
&lt;Al_tag&gt; ::= &lt;ident&gt;</programlisting>
			Any &lt;ident&gt; found as an expansion of &lt;Al_tag&gt; will be
			declared as the name for an AL_TAG.</para>
		</section>

		<section id="S18">
			<title>Alignment</title>

			<para>
				<programlisting>
&lt;Alignment&gt; ::= ALIGNMENT ? ( &lt;Exp&gt; , &lt;Alignment&gt; , &lt;Alignment&gt; )
&lt;Alignment&gt; ::= &lt;alignment_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Alignment&gt; ::= &lt;alignment_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Alignment&gt; ::= &lt;Al_tag&gt;</programlisting>
				This results in an obtain_al_tag of the AL_TAG.
				<programlisting>
&lt;Alignment&gt; ::= ( &lt;Alignment&gt;-List-Opt )</programlisting>
				The &lt;Alignment&gt;s in the &lt;Alignment&gt;-List are united
				using unite_alignments. The empty option results in the top
				ALIGNMENT.</para>
		</section>

		<section id="S19">
			<title>Bitfield_variety</title>

			<para>
				<programlisting>
&lt;Bitfield_variety&gt; ::= BITFIELD_VARIETY ? ( &lt;Exp&gt; , &lt;Bitfield_variety&gt;, &lt;Bitfield_variety&gt;)
&lt;Bitfield_variety&gt; ::= &lt;bitfield_variety_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Bitfield_variety&gt; ::= &lt;bitfield_variety__token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Bitfield_variety&gt; ::= &lt;BfSign&gt;-Opt &lt;Nat&gt;
	&lt;BfSign&gt; ::= &lt;Bool&gt;
	&lt;BfSign&gt; ::= Signed
	&lt;BfSign&gt; ::= Unsigned</programlisting>
				This expands to bfvar_bits. The empty default on the sign is
				Signed.</para>
		</section>

		<section id="S20">
			<title>Bool</title>

			<para>
				<programlisting>
&lt;Bool&gt; ::= BOOL ? ( &lt;Exp&gt; , &lt;Bool&gt;, &lt;Bool&gt;)
&lt;Bool&gt; ::= &lt;bool_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Bool&gt; ::= &lt;bool_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				There are no expansions of &lt;Bool&gt; other than the standard
				ones.</para>
		</section>

		<section id="S21">
			<title>Error_treatment</title>

			<para>
				<programlisting>
&lt;Error_treatment&gt; ::= ERROR_TREATMENT ?
																												 ( &lt;Exp&gt; , &lt;Error_treatment&gt;, &lt;Error_treatment&gt;)
	&lt;Error_treatment&gt; ::= &lt;error_treatment_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
	&lt;Error_treatment&gt; ::= &lt;error_treatment__token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Error_treatment&gt; ::= &lt;Label&gt;</programlisting>
				This gives an error_jump to the label.
				<programlisting>
&lt;Error_treatment&gt; ::= [ &lt;Error_code&gt;-List]
	&lt;Error_code&gt; ::= overflow
	&lt;Error_code&gt; ::= nil_access
	&lt;Error_code&gt; ::= stack_overflow</programlisting>
				Produces trap with the &lt;Error_code&gt;s as arguments.</para>
		</section>

		<section id="S22">
			<title>xp</title>

			<para>
				<programlisting>
&lt;Exp&gt; ::= &lt;ExpTerm&gt;
&lt;Exp&gt; ::= &lt;ExpTerm&gt; &lt;BinaryOp&gt; &lt;ExpTerm&gt;</programlisting>
				The &lt;BinaryOp&gt;s include the arithmetic, offset, logical
				operators and assignment and are given in table 1. In this
				expansion, any error_treatments are taken to be wrap.</para>

			<table frame="all">
				<tgroup cols="4" colsep="1" rowsep="1">
					<thead>
						<row>
							<entry>&lt;BinaryOp&gt;</entry>
							<entry>TDF constructor</entry>
							<entry>&lt;BinaryOp&gt;</entry>
							<entry>TDF constructor</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>And</entry>
							<entry>and</entry>
							<entry>Or</entry>
							<entry>or</entry>
						</row>
						<row>
							<entry>Xor</entry>
							<entry>xor</entry>
							<entry>*+.</entry>
							<entry>add_to_ptr</entry>
						</row>
						<row>
							<entry>*-*</entry>
							<entry>subtract_ptrs</entry>
							<entry>.*</entry>
							<entry>offset_mult</entry>
						</row>
						<row>
							<entry>.+.</entry>
							<entry>offset_add</entry>
							<entry>.-.</entry>
							<entry>offset_subtract</entry>
						</row>
						<row>
							<entry>./</entry>
							<entry>offset_div_by_int</entry>
							<entry>./.</entry>
							<entry>offset_div</entry>
						</row>
						<row>
							<entry>.max.</entry>
							<entry>offset_max</entry>
							<entry>%</entry>
							<entry>rem2</entry>
						</row>
						<row>
							<entry>%1</entry>
							<entry>rem1</entry>
							<entry>*</entry>
							<entry>mult</entry>
						</row>
						<row>
							<entry>+</entry>
							<entry>plus</entry>
							<entry>-</entry>
							<entry>minus</entry>
						</row>
						<row>
							<entry>/</entry>
							<entry>div2</entry>
							<entry>/1</entry>
							<entry>div1</entry>
						</row>
						<row>
							<entry>&lt;&lt;</entry>
							<entry>shift_left</entry>
							<entry>&gt;&gt;</entry>
							<entry>shift_right</entry>
						</row>
						<row>
							<entry>F*</entry>
							<entry>floating_mult</entry>
							<entry>F+</entry>
							<entry>floating_plus</entry>
						</row>
						<row>
							<entry>F-</entry>
							<entry>floating_minus</entry>
							<entry>F/</entry>
							<entry>floating_div</entry>
						</row>
						<row>
							<entry>=</entry>
							<entry>assign</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

			<para>The names like *+. (i.e. add_to_ptr) do have a certain logic;
				the * indicates that the left operand must be a pointer expression
				and the. that the other is an offset</para>

			<para>The further expansions of &lt;Exp&gt; are all
				&lt;ExpTerm&gt;s</para>

			<section id="S23">
				<title>ExpTerm</title>

				<para>
				<programlisting>
&lt;ExpTerm&gt; ::= EXP ? ( &lt;Exp&gt; , &lt;Exp&gt;, &lt;Exp&gt;)
&lt;ExpTerm&gt; ::= &lt;exp_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;ExpTerm&gt; ::= &lt;exp_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;ExpTerm&gt; ::= &lt;ClosedExp&gt;</programlisting>
	For &lt;ClosedExp&gt;, see <link linkend="S36">section 3.3</link>.
				<programlisting>
&lt;ExpTerm&gt; ::= ( &lt;Exp&gt; )
&lt;ExpTerm&gt; ::= - ( &lt;Exp&gt; )</programlisting>
				The negate constructor.
				<programlisting>
&lt;ExpTerm&gt; ::= Sizeof ( &lt;Shape&gt; )</programlisting>
				This produces the EXP OFFSET for an index multiplier for arrays of
				&lt;Shape&gt;. It is the shape_offset of &lt;Shape&gt; padded up
				to its alignment.
				<programlisting>
&lt;ExpTerm&gt; ::= &lt;Tag&gt;</programlisting>
				This produces an obtain_tag.
				<programlisting>
&lt;ExpTerm&gt; ::= * &lt;ident&gt;</programlisting>
				The &lt;ident&gt; must have been declared as a variable TAG and
				the construction produces a contents operation with its declared
				SHAPE.
				<programlisting>
&lt;ExpTerm&gt; ::= * ( &lt;Shape&gt; ) &lt;ExpTerm&gt;</programlisting>
				This produces a contents operation with the given &lt;Shape&gt;.
				<programlisting>
&lt;ExpTerm&gt; ::= &lt;Assertion&gt;</programlisting>
				For &lt;Assertion&gt;, see <link linkend="S37">section 3.3.1</link>
				<programlisting>
&lt;ExpTerm&gt; ::= Case &lt;Exp&gt; ( &lt;RangeDest&gt;-List )
	&lt;RangeDest&gt; ::= &lt;Signed_Nat&gt; &lt; : &lt;Signed_Nat&gt; &gt;-Opt -&gt; &lt;Label&gt;</programlisting>
				This produces a case operation.
				<programlisting>
&lt;ExpTerm&gt; ::= Cons [ &lt;Exp&gt; ] ( &lt; &lt;Offset&gt; : &lt;Exp&gt; &gt;-List )
	&lt;Offset&gt; ::= &lt;Exp&gt;</programlisting>
				This produces a make_compound with the [ &lt;Exp&gt; ] as the size
				and fields given by &lt; &lt;Offset&gt; : &lt;Exp&gt; &gt;-List.
				<programlisting>
&lt;ExpTerm&gt; ::= [ &lt;Variety&gt; ] &lt;ExpTerm&gt;</programlisting>
				This produces a change_variety with a wrap error_treatment.
				<programlisting>
&lt;ExpTerm&gt; ::= &lt;Signed_Nat&gt; ( &lt;Variety&gt; )</programlisting>
				This produces a make_int of the &lt;Signed_Nat&gt; with the given
				variety.
				<programlisting>
&lt;ExpTerm&gt; ::= &lt;floating_denotation&gt; &lt; E &lt;Signed_Nat&gt; &gt;-Opt &lt;Rounding_Mode&gt;-Opt
&lt;ExpTerm&gt; ::= - &lt;floating_denotation&gt; &lt; E &lt;Signed_Nat&gt; &gt;-Opt &lt;Rounding_Mode&gt;-Opt</programlisting>
				Produces a make_floating.
				<programlisting>
&lt;ExpTerm&gt; ::= &lt;ProcVal&gt; [ &lt;Shape&gt; ] ( &lt;Exp&gt;-List-Opt &lt; Varpar &lt;Exp&gt; &gt;-Opt)

&lt;ProcVal&gt; ::= &lt;Tag&gt;
&lt;ProcVal&gt; ::= ( &lt;Exp&gt; )</programlisting>
				Produces an apply_proc with the given parameters returning the
				given &lt;Shape&gt;.
				<programlisting>
	&lt;ExpTerm&gt; ::=						 &lt;ProcVal&gt; [ &lt;Shape&gt; ]
	[ &lt;Act_Callers&gt;-Opt ; &lt;Act_Callees&gt;-Opt &lt;; &lt;Postlude&gt;&gt;-Opt ]
	&lt;ProcProps&gt;-Opt
&lt;Act_Callers&gt; ::= &lt;&lt;Exp&gt; &lt;: &lt;ident&gt;&gt;-Opt&gt;-List &lt;...&gt;-Opt
&lt;Act_Callees&gt; ::= &lt;Exp&gt;-List &lt;...&gt;-Opt
&lt;Act_Callees&gt; ::= Dynamic ( &lt;Exp&gt; , &lt;Exp&gt; ) &lt;...&gt;-Opt
&lt;Act_Callees&gt; ::= Same
&lt;Postlude&gt; ::= &lt;Exp&gt;</programlisting>
				Produces an apply_general_proc with the actual caller parameters
				given by &lt;Act_Callers&gt; and the calle parameters given by
				&lt;Act_Callees&gt;; the &lt;...&gt; option indicates that the
				procedure is expecting a variable number of parameters. Any
				&lt;ident&gt;s introduced in &lt;Act_Callers&gt; are in scope in
				&lt;Postlude&gt;.
				<programlisting>
&lt;Exp&gt; ::= &lt;ProcVal&gt; Tail_call [ &lt;Act_Callees&gt;-Opt ]</programlisting>
				Produces a tail_call with the callee parameters given and same
				caller parameters as those of the calling procedure.
				<programlisting>
&lt;ExpTerm&gt; ::= Proc &lt;Proc_defn&gt;</programlisting>
				Produces a make_proc. For &lt;Proc_defn&gt;, see
				<link linkend="S14">section 3.1.7</link> <programlisting>
&lt;ExpTerm&gt; ::= &lt;String&gt; ( &lt;Variety&gt; )</programlisting>
				Produces a make_nof_int of the given variety.
				<programlisting>
&lt;ExpTerm&gt; ::= # &lt;String&gt;</programlisting>
				This produces a TDF fail_installer; this construction is useful
				for narrowing down SHAPE errors detected by the translator.</para>
			</section>
		</section>

		<section id="S24">
			<title>Floating_variety</title>

			<para>
				<programlisting>
&lt;Floating_variety&gt; ::= FLOATING_VARIETY ?
	( &lt;Exp&gt; , &lt;Floating_variety&gt;, &lt;Floating_variety&gt;)
&lt;Floating_variety&gt; ::= &lt;floating_variety_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Floating_variety&gt; ::= &lt;floating_variety__token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard constructions.
				<programlisting>
&lt;Floating_variety&gt; ::= Float</programlisting>
				An IEEE 32 bit floating variety.
				<programlisting>
&lt;Floating_variety&gt; ::= Double</programlisting>
				An IEEE 64 bit floating variety.</para>
		</section>

		<section id="S25">
			<title>Label</title>

			<para>
				<programlisting>
&lt;Label&gt; ::= &lt;label_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard token application.
				<programlisting>
&lt;Label&gt; ::= &lt;ident&gt;</programlisting>
				The &lt;ident&gt; will be declared as a LABEL, whose scope is the
				current procedure.</para>
		</section>

		<section id="S26">
			<title>Nat</title>

			<para>
				<programlisting>
&lt;Nat&gt; ::= NAT ? ( &lt;Exp&gt; , &lt;Nat&gt;, &lt;Nat&gt;)
&lt;Nat&gt; ::= &lt;nat_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Nat&gt; ::= &lt;nat_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Nat&gt; ::= &lt;integer_denotation&gt;</programlisting>
				Produces a make_nat on the integer
				<programlisting>
&lt;Nat&gt; ::= &lt;character&gt;</programlisting>
				Produces a make_nat on the ASCII value of the character.</para>
		</section>

		<section id="S27">
			<title>Ntest</title>

			<para>
				<programlisting>
&lt;Ntest&gt; ::= NTEST ? ( &lt;Exp&gt; , &lt;Ntest&gt;, &lt;Ntest&gt;)
&lt;Ntest&gt; ::= &lt;ntest_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Ntest&gt; ::= &lt;ntest_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Ntest&gt; ::= !&lt;</programlisting>
				Produces not_less_than.
				<programlisting>
&lt;Ntest&gt; ::= !&lt;=</programlisting>
				Produces not_less_than_or_equal.
				<programlisting>
&lt;Ntest&gt; ::= !=</programlisting>
				Produces not_equal.
				<programlisting>
&lt;Ntest&gt; ::= !&gt;</programlisting>
				Produces not_greater_than.
				<programlisting>
&lt;Ntest&gt; ::= !&gt;=</programlisting>
				Produces not_greater_than_or_equal.
				<programlisting>
&lt;Ntest&gt; ::= !Comparable</programlisting>
				Produces not_comparable.
				<programlisting>
&lt;Ntest&gt; ::= &lt;</programlisting>
				Produces less_than.
				<programlisting>
&lt;Ntest&gt; ::= &lt;=</programlisting>
				Produces less_than_or_equal.
				<programlisting>
&lt;Ntest&gt; ::= ==</programlisting>
				Produces equal.
				<programlisting>
&lt;Ntest&gt; ::= &gt;</programlisting>
				Produces greater_than.
				<programlisting>
&lt;Ntest&gt; ::= &gt;=</programlisting>
				Produces greater_than_or_equal.</para>
		</section>

		<section id="S28">
			<title>Rounding_mode</title>

			<para>
				<programlisting>
&lt;Rounding_mode&gt; ::= ROUNDING_MODE?
	( &lt;Exp&gt; , &lt;Rounding_mode&gt;, &lt;Rounding_mode&gt;)
&lt;Rounding_mode&gt; ::= &lt;ntest_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Rounding_mode&gt; ::= &lt;ntest_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				There are no constructions for &lt;Rounding_mode&gt; other than
				the standard ones.</para>
		</section>

		<section id="S29">
			<title>Shape</title>

			<para>
				<programlisting>
&lt;Shape&gt; ::= SHAPE ? ( &lt;Exp&gt; , &lt;Shape&gt;, &lt;Shape&gt;)
&lt;Shape&gt; ::= &lt;shape_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Shape&gt; ::= &lt;shape_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Shape&gt; ::= Float</programlisting>
				The shape for an IEEE 32 bit float.
				<programlisting>
&lt;Shape&gt; ::= Double</programlisting>
				The shape for an IEEE 64 bit float.
				<programlisting>
&lt;Shape&gt; ::= &lt;Sign&gt;-Opt Int
	&lt;Sign&gt; ::= Signed
	&lt;Sign&gt; ::= Unsigned</programlisting>
				The shape for a 32 bit signed or unsigned integer. The default is
				signed.
				<programlisting>
&lt;Shape&gt; ::= &lt;Sign&gt;-Opt Long</programlisting>
				The shape for a 32 bit signed or unsigned integer.
				<programlisting>
&lt;Shape&gt; ::= &lt;Sign&gt;-Opt Short</programlisting>
				The shape for a 16 bit signed or unsigned integer.
				<programlisting>
&lt;Shape&gt; ::= &lt;Sign&gt;-Opt Char</programlisting>
				The shape for a 8 bit signed or unsigned integer.
				<programlisting>
&lt;Shape&gt; ::= Ptr &lt;Shape&gt;</programlisting>
				The SHAPE pointer(alignment(&lt;Shape&gt;)).</para>
		</section>

		<section id="S30">
			<title>Signed_Nat</title>

			<para>
				<programlisting>
&lt;Signed_Nat&gt; ::= SIGNED_NAT ? ( &lt;Exp&gt; , &lt;Signed_Nat&gt;, &lt;Signed_Nat&gt;)
&lt;Signed_Nat&gt; ::= &lt;signed_nat_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Signed_Nat&gt; ::= &lt;signed_nat_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Signed_Nat&gt; ::= &lt;integer_denotation&gt;
&lt;Signed_Nat&gt; ::= - &lt;integer_denotation&gt;</programlisting>
				This produces a make_signed_nat on the integer value.
				<programlisting>
&lt;Signed_Nat&gt; ::= &lt;character&gt;
&lt;Signed_Nat&gt; ::= - &lt;character&gt;</programlisting>
				This produces a make_signed_nat on the ASCII value of the
				character.
				<programlisting>
&lt;Signed_Nat&gt; ::= LINE</programlisting>
				This produces a make_signed_nat on the current line number of the
				file being compiled - useful for writing test programs.
				<programlisting>
&lt;Signed_Nat&gt; ::= + &lt;Nat&gt;
&lt;Signed_Nat&gt; ::= - &lt;Nat&gt;</programlisting>
				This produces an appropriately signed &lt;Signed_Nat&gt; from a
				&lt;Nat&gt;.</para>
		</section>

		<section id="S31">
			<title>String</title>

			<para>
				<programlisting>
&lt;String&gt; ::= STRING? ( &lt;Exp&gt; , &lt;String&gt;, &lt;String&gt;)
&lt;String&gt; ::= &lt;string_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;String&gt; ::= &lt;string_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions
				<programlisting>
&lt;String&gt; ::= &lt;string&gt;</programlisting>
				Produces a make_string.</para>
		</section>

		<section id="S32">
			<title>Tag</title>
			<para>
				<programlisting>
&lt;Tag&gt; ::= &lt;tag_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard token application.
				<programlisting>
&lt;Tag&gt; ::= &lt;ident&gt;</programlisting>
				This gives an obtain_tag; the &lt;ident&gt; must been declared as
				a TAG either globally or locally.</para>
		</section>

		<section id="S33">
			<title>Token</title>

			<para>TOKEN is rather a limited first-class sort. There is no
				explicit construction given for token_apply_token, since the only
				place where it can occur is in an expansion of a token parameter
				of another token; here it is produced implicitly. The only place
				where &lt;Token&gt; is expanded is in an actual TOKEN parameter of
				a token application; other uses (e.g. as in &lt;shape_token&gt;)
				are always &lt;ident&gt;s.
				<programlisting>
&lt;Token&gt; ::= &lt;ident&gt;</programlisting>
				The &lt;ident&gt; must have been declarered by a &lt;Tokdec&gt; or
				&lt;Tokdec&gt; or is a formal parameter of TOKEN.
				<programlisting>
&lt;Token&gt; ::= Use &lt;Tok_Defn&gt;</programlisting>
				This produces a use_tokdef. For &lt;Tok_Defn&gt; see
				<link linkend="S9">section 3.1.2</link>. The critical use of this
				construction is to provide an actual TOKEN parameter to a token
				application where the &lt;Tok_Defn&gt; contains uses of tags or
				labels local to a procedure.</para>
		</section>

		<section id="S34">
			<title>Transfer_mode</title>
			<para>
				<programlisting>
&lt;Transfer_mode&gt; ::= TRANSFER_MODE ? ( &lt;Exp&gt; , &lt;Transfer_mode&gt;, &lt;Transfer_mode&gt;)
&lt;Transfer_mode&gt; ::= &lt;transfer_mode_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Transfer_mode&gt; ::= &lt;transfer_mode_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				There are no expansions for &lt;Transfer_mode&gt; other than the
				standard expansions.</para>
		</section>

		<section id="S35">
			<title>Variety</title>
			<para>
				<programlisting>
&lt;Variety&gt; ::= VARIETY ? ( &lt;Exp&gt; , &lt;Variety&gt;, &lt;Variety&gt;)
&lt;Variety&gt; ::= &lt;variety_constructor&gt; &lt; ( &lt;constructor_param&gt;-List ) &gt;-Opt
&lt;Variety&gt; ::= &lt;variety_token&gt; &lt; [ &lt;token_param&gt;-List ] &gt;-Opt</programlisting>
				The standard expansions.
				<programlisting>
&lt;Variety&gt; ::= &lt;Signed_Nat&gt; : &lt;Signed_Nat&gt;</programlisting>
				This produces var_limits.
				<programlisting>
&lt;Variety&gt; ::= &lt;Sign&gt;-Opt Int
&lt;Variety&gt; ::= &lt;Sign&gt;-Opt Long
&lt;Variety&gt; ::= &lt;Sign&gt;-Opt Short
&lt;Variety&gt; ::= &lt;Sign&gt;-Opt Char</programlisting>
				This produces the variety of the appropriate integer shape.</para>
		</section>
	</section>

	<section id="S36">
		<title>Control structure and local declarations</title>

		<para>The control and declaration structure is given by
			&lt;ClosedExp&gt;:
			<programlisting>
&lt;ClosedExp&gt; ::= { &lt;ExpSeq&gt; }

&lt;ExpSeq&gt; ::= &lt;Exp&gt;-Opt
&lt;ExpSeq&gt; ::= &lt;ExpSeq&gt; ; &lt;Exp&gt;-Opt</programlisting>
			This produces a TDF sequence if there is more than one
			&lt;Exp&gt;-Opt; if there is only one it is simply the production
			for &lt;Exp&gt;-Opt; any empty &lt;Exp&gt;-Opt produce make_top.
			<programlisting>
&lt;ClosedExp&gt; ::= &lt;ConditionalExp&gt;
&lt;ClosedExp&gt; ::= &lt;RepeatExp&gt;
&lt;ClosedExp&gt; ::= &lt;LabelledExp&gt;
&lt;ClosedExp&gt; ::= &lt;Local_Defn&gt;</programlisting>
			The effect of these, together with the expansion of
			&lt;Assertion&gt; is given below.</para>

		<section id="S37">
			<title>ConditionalExp and Assertion</title>

			<para>
				<programlisting>
&lt;ConditionalExp&gt; ::= ? { &lt;ExpSeq&gt; | &lt;LabelSetting&gt;-Opt &lt;ExpSeq&gt; }

&lt;LabelSetting&gt; ::= : &lt;Label&gt; :</programlisting>
				This produces a TDF conditional. The scope of a LABEL
				&lt;ident&gt; which may be introduced by &lt;Label&gt; is the
				first &lt;ExpSeq&gt;. A branch to the second half of the
				conditional will usually be made by the failure of an
				&lt;Assertion&gt; ( ie a TDF _test) in the first half.
				<programlisting>
&lt;Assertion&gt; ::= &lt;Query&gt; ( &lt;Exp&gt; &lt;Ntest&gt; &lt;Exp&gt; &lt;FailDest&gt;-Opt )

&lt;Query&gt; ::= ?</programlisting>
				The assertion will be translated as an integer_test
				<programlisting>
&lt;Query&gt; ::= F?</programlisting>
				The assertion will be translated as a floating_test with a wrap
				error_treatment.
				<programlisting>
&lt;Query&gt; ::= *?</programlisting>
				The assertion will be translated as a pointer_test.
				<programlisting>
&lt;Query&gt; ::=.?</programlisting>
				The assertion will be translated as an offset_test.
				<programlisting>
&lt;Query&gt; ::= P?</programlisting>
				The assertion will be translated as a proc_test.
				<programlisting>
&lt;FailDest&gt; ::= | &lt;Label&gt;</programlisting>
				The &lt;Assertion&gt; will produce the appropriate _test on its
				component &lt;Exp&gt;s. If the test fails, then control will pass
				to the &lt;FailDest&gt;-Opt. If &lt;FailDest&gt;-Opt is not empty,
				this is the &lt;Label&gt;. Otherwise, the &lt;Assertion&gt; must
				be in the immediate context of a &lt;ConditionalExp&gt; or
				&lt;RepeatExp&gt; with an empty &lt;LabelSetting&gt;-Opt; in which
				case this is treated as an anonymous label and control passes to
				there. For example, the following &lt;Conditional&gt; delivers the
				maximum of two integers:
				<programlisting>
?{ ?(a &gt;= b); a | b }</programlisting>
				This is equivalent to:
				<programlisting>
?{ ?(a &gt;= b | L ); a | :L: b }</programlisting>
				without the hassle of having to invent the LABEL name, L.</para>
		</section>

		<section id="S38">
			<title>RepeatExp</title>

			<para>
				<programlisting>
&lt;RepeatExp&gt; ::= Rep &lt;Starter&gt;-Opt { &lt;LabelSetting&gt;-Opt &lt;ExpSeq&gt; }

&lt;Starter&gt; = ( &lt;ExpSeq&gt; )</programlisting>
				This produces a TDF repeat. The loop will usually repeat by an
				&lt;Assertion&gt; failing to the &lt;LabelSetting&gt;-Opt; an
				empty &lt;LabelSetting&gt;-Opt will follow the same conventions as
				one in a &lt;Conditional&gt;. An empty &lt;Starter&gt;-Opt will
				produce make_top.</para>
		</section>

		<section id="S39">
			<title>LabelledExp</title>

			<para>
				<programlisting>
&lt;LabelledExp&gt; ::= Labelled { &lt;ExpSeq&gt; &lt;Places&gt; }

&lt;Places&gt; ::= &lt;Place&gt;
&lt;Places&gt; ::= &lt;Places&gt; &lt;Place&gt;

&lt;Place&gt; ::= | : &lt;Label&gt; : &lt;ExpSeq&gt;</programlisting>
				This produces a TDF labelled with the obvious parameters. The
				scope of any LABEL &lt;idents&gt; introduced by the &lt;Label&gt;s
				is the &lt;LabelledExp&gt;.</para>
		</section>

		<section id="S40">
			<title>Local_Defn</title>

			<para>A &lt;Local_Defn&gt; introduces an &lt;ident&gt; as a TAG for
				the scope of the component &lt;ClosedExp&gt;. Any containing an
				&lt;Access&gt; visible is also available globally - however it
				will only make sense in the constructor env_offset.
				<programlisting>
&lt;Local_Defn&gt; ::= Var &lt;ident&gt; &lt;Access&gt;-Opt &lt;VarInit&gt; &lt;ClosedExp&gt;

&lt;VarInit&gt; ::= = &lt;Exp&gt;</programlisting>
				This &lt;Local_Defn&gt; produces a TDF variable with the obvious
				parameters.
				<programlisting>
&lt;Local_Defn&gt; ::= Var &lt;ident&gt; &lt;Access&gt;-Opt : &lt;Shape&gt; &lt;VarInit&gt;-Opt &lt;ClosedExp&gt;</programlisting>
				Also a TDF variable. An empty &lt;VarInit&gt;-Opt gives
				make_value(&lt;Shape&gt;) as the initialisation to the variable.
				Using this form of variable definition also has the advantage of
				allowing one to use the simple form of the contents operation (*
				in <link linkend="S22">section 3.2.7</link>).
				<programlisting>
&lt;Local_Defn&gt; ::= Let &lt;ident&gt; &lt;Access&gt;-Opt = &lt;Exp&gt; &lt;ClosedExp&gt;</programlisting>
				This produces a TDF identify with the obvious parameters.</para>
		</section>
	</section>
</chapter>

