<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="control-structure">
	<title>Control structure and local declarations</title>

	<para>The control and declaration structure is given by
		&lt;ClosedExp&gt;:</para>

	<programlisting language="bnf">&lt;ClosedExp&gt; ::= { &lt;ExpSeq&gt; }

&lt;ExpSeq&gt; ::= &lt;Exp&gt;-Opt
&lt;ExpSeq&gt; ::= &lt;ExpSeq&gt; ; &lt;Exp&gt;-Opt</programlisting>

	<para>This produces a &tdf; sequence if there is more than one
		&lt;Exp&gt;-Opt; if there is only one it is simply the production
		for &lt;Exp&gt;-Opt; any empty &lt;Exp&gt;-Opt produce make_top.</para>

	<programlisting language="bnf">&lt;ClosedExp&gt; ::= &lt;ConditionalExp&gt;
&lt;ClosedExp&gt; ::= &lt;RepeatExp&gt;
&lt;ClosedExp&gt; ::= &lt;LabelledExp&gt;
&lt;ClosedExp&gt; ::= &lt;Local_Defn&gt;</programlisting>

	<para>The effect of these, together with the expansion of
		&lt;Assertion&gt; is given below.</para>

	<section id="conditionalexp-and-assertion">
		<title>ConditionalExp and Assertion</title>

		<programlisting language="bnf">&lt;ConditionalExp&gt; ::= ? { &lt;ExpSeq&gt; | &lt;LabelSetting&gt;-Opt &lt;ExpSeq&gt; }

&lt;LabelSetting&gt; ::= : &lt;Label&gt; :</programlisting>

		<para>This produces a &tdf; conditional. The scope of a LABEL
			&lt;ident&gt; which may be introduced by &lt;Label&gt; is the
			first &lt;ExpSeq&gt;. A branch to the second half of the
			conditional will usually be made by the failure of an
			&lt;Assertion&gt; ( ie a &tdf; _test) in the first half.</para>

			<programlisting language="bnf">&lt;Assertion&gt; ::= &lt;Query&gt; ( &lt;Exp&gt; &lt;Ntest&gt; &lt;Exp&gt; &lt;FailDest&gt;-Opt )

&lt;Query&gt; ::= ?</programlisting>

			<para>The assertion will be translated as an integer_test</para>

			<programlisting language="bnf">&lt;Query&gt; ::= F?</programlisting>

			<para>The assertion will be translated as a floating_test with a wrap
				error_treatment.</para>

			<programlisting language="bnf">&lt;Query&gt; ::= *?</programlisting>

			<para>The assertion will be translated as a pointer_test.</para>

			<programlisting language="bnf">&lt;Query&gt; ::=.?</programlisting>

			<para>The assertion will be translated as an offset_test.</para>

			<programlisting language="bnf">&lt;Query&gt; ::= P?</programlisting>

			<para>The assertion will be translated as a proc_test.</para>

			<programlisting language="bnf">&lt;FailDest&gt; ::= | &lt;Label&gt;</programlisting>

			<para>The &lt;Assertion&gt; will produce the appropriate _test on its
				component &lt;Exp&gt;s. If the test fails, then control will pass
				to the &lt;FailDest&gt;-Opt. If &lt;FailDest&gt;-Opt is not empty,
				this is the &lt;Label&gt;. Otherwise, the &lt;Assertion&gt; must
				be in the immediate context of a &lt;ConditionalExp&gt; or
				&lt;RepeatExp&gt; with an empty &lt;LabelSetting&gt;-Opt; in which
				case this is treated as an anonymous label and control passes to
				there. For example, the following &lt;Conditional&gt; delivers the
				maximum of two integers:</para>

			<programlisting language="bnf">?{ ?(a &gt;= b); a | b }</programlisting>

			<para>This is equivalent to:</para>

			<programlisting language="bnf">?{ ?(a &gt;= b | L ); a | :L: b }</programlisting>

			<para>without the hassle of having to invent the LABEL name, L.</para>
	</section>

	<section>
		<title>RepeatExp</title>

		<programlisting language="bnf">&lt;RepeatExp&gt; ::= Rep &lt;Starter&gt;-Opt { &lt;LabelSetting&gt;-Opt &lt;ExpSeq&gt; }

&lt;Starter&gt; = ( &lt;ExpSeq&gt; )</programlisting>

		<para>This produces a &tdf; repeat. The loop will usually repeat by an
			&lt;Assertion&gt; failing to the &lt;LabelSetting&gt;-Opt; an
			empty &lt;LabelSetting&gt;-Opt will follow the same conventions as
			one in a &lt;Conditional&gt;. An empty &lt;Starter&gt;-Opt will
			produce make_top.</para>
	</section>

	<section>
		<title>LabelledExp</title>

		<programlisting language="bnf">&lt;LabelledExp&gt; ::= Labelled { &lt;ExpSeq&gt; &lt;Places&gt; }

&lt;Places&gt; ::= &lt;Place&gt;
&lt;Places&gt; ::= &lt;Places&gt; &lt;Place&gt;

&lt;Place&gt; ::= | : &lt;Label&gt; : &lt;ExpSeq&gt;</programlisting>

		<para>This produces a &tdf; labelled with the obvious parameters. The
			scope of any LABEL &lt;idents&gt; introduced by the &lt;Label&gt;s
			is the &lt;LabelledExp&gt;.</para>
	</section>

	<section>
		<title>Local_Defn</title>

		<para>A &lt;Local_Defn&gt; introduces an &lt;ident&gt; as a TAG for
			the scope of the component &lt;ClosedExp&gt;. Any containing an
			&lt;Access&gt; visible is also available globally - however it
			will only make sense in the constructor env_offset.</para>

		<programlisting language="bnf">&lt;Local_Defn&gt; ::= Var &lt;ident&gt; &lt;Access&gt;-Opt &lt;VarInit&gt; &lt;ClosedExp&gt;

&lt;VarInit&gt; ::= = &lt;Exp&gt;</programlisting>

		<para>This &lt;Local_Defn&gt; produces a &tdf; variable with the obvious
			parameters.</para>

		<programlisting language="bnf">&lt;Local_Defn&gt; ::= Var &lt;ident&gt; &lt;Access&gt;-Opt : &lt;Shape&gt; &lt;VarInit&gt;-Opt &lt;ClosedExp&gt;</programlisting>

		<para>Also a &tdf; variable. An empty &lt;VarInit&gt;-Opt gives
			make_value(&lt;Shape&gt;) as the initialisation to the variable.
			Using this form of variable definition also has the advantage of
			allowing one to use the simple form of the contents operation (*
			in <link linkend="exp">section 3.2.7</link>).</para>

		<programlisting language="bnf">&lt;Local_Defn&gt; ::= Let &lt;ident&gt; &lt;Access&gt;-Opt = &lt;Exp&gt; &lt;ClosedExp&gt;</programlisting>

		<para>This produces a &tdf; identify with the obvious parameters.</para>
	</section>
</chapter>

