
/*
 * Automatically generated by lexi version 2.0
 */

#ifndef LEXI_GENERATED_HEADER_lexi__INCLUDED
#define LEXI_GENERATED_HEADER_lexi__INCLUDED



	#include <stdio.h>

	#include "hash.h"

	typedef struct lex_state lex_state;

	enum {
		lex_eof     = EOF,
		lex_append  = HASH_APPEND,
		lex_prepend = HASH_PREPEND,
		lex_replace = HASH_ASSIGN,
		lex_name,
		lex_string,
		lex_unknown_token
	};

	struct lex_state {
		FILE *file;
		char ref[1024];
		char buf[1024];
		char *bufp;
		char *refp;
	};

/*
 * This struct holds state for the lexer; its representation is
 * private, but present here for ease of allocation.
 */
struct lexi_state {
	int (*zone)(struct lexi_state *);

	/*
	 * Lexi's buffer is a simple stack.
	 */
	int buffer[1];
	int buffer_index;
	lex_state lex_state;
};

/* Read a character */
int lexi_readchar(struct lexi_state *state);

/* Push a character to lexi's buffer */
void lexi_push(struct lexi_state *state, const int c);

/* Pop a character from lexi's buffer */
int lexi_pop(struct lexi_state *state);

/* Flush lexi's buffer */
void lexi_flush(struct lexi_state *state);

#ifndef LEXI_EOF
#define LEXI_EOF -1
#endif

enum lexi_groups {
	lexi_group_white = 0x1,
	lexi_group_ident = 0x2,
	lexi_name_white = 0,
	lexi_string_white = 0,
	lexi_comment_white = 0
};

/* true if the given character is present in the given group */
int lexi_group(enum lexi_groups group, int c);

/* Identify a token */
int lexi_read_token(struct lexi_state *state);

/* Initialise a lexi_state structure */
void lexi_init(struct lexi_state *state, lex_state lex_state);



	void lex_init(struct lexi_state *state, FILE *f);

#endif

