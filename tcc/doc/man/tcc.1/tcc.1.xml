<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [
	<!ENTITY P.opt "<option>-P</option>">
	<!ENTITY c.opt "<option>-c</option>">
	<!ENTITY d.opt "<option>-d</option>">
	<!ENTITY i.opt "<option>-i</option>">
	<!ENTITY H.opt "<option>-H</option>">
	<!ENTITY w.opt "<option>-w</option>">
	<!ENTITY p.opt "<option>-p</option>">
	<!ENTITY M.opt "<option>-M</option>">
	<!ENTITY C.opt "<option>-C</option>">
	<!ENTITY G.opt "<option>-G</option>">
	<!ENTITY b.opt "<option>-b</option>">
	<!ENTITY g.opt "<option>-g</option>">
	<!ENTITY q.opt "<option>-q</option>">
	<!ENTITY v.opt "<option>-v</option>">
	<!ENTITY k.opt "<option>-k</option>">
	<!ENTITY V.opt "<option>-V</option>">
	<!ENTITY A.opt "<option>-A</option>&str.arg;">
	<!ENTITY Z.opt "<option>-Z</option>&str.arg;">
	<!ENTITY z.opt "<option>-z</option>&str.arg;">
	<!ENTITY u.opt "<option>-u</option>&str.arg;">
	<!ENTITY h.opt "<option>-h</option>&str.arg;">
	<!ENTITY B.opt "<option>-B</option>&str.arg;">
	<!ENTITY j.opt "<option>-j</option>&str.arg;">
	<!ENTITY l.opt "<option>-l</option>&str.arg;">
	<!ENTITY U.opt "<option>-U</option>&str.arg;">
	<!ENTITY O.opt "<option>-O</option>&str.arg;">
	<!ENTITY I.opt "<option>-I</option>&dir.arg;">
	<!ENTITY J.opt "<option>-J</option>&dir.arg;">
	<!ENTITY L.opt "<option>-L</option>&dir.arg;">
	<!ENTITY e.opt "<option>-e</option>&file.arg;">
	<!ENTITY f.opt "<option>-f</option>&file.arg;">
	<!ENTITY Y.opt "<option>-Y</option>&file.arg;">
	<!ENTITY F.opt "<option>-F</option>&letter.arg;">
	<!ENTITY P.opt "<option>-P</option>&letter.arg;&ellipsis.lit;">
	<!ENTITY o.opt "<option>-o</option>&nbsp;&file.arg;">
	<!ENTITY N.opt "<option>-N</option>&ident.arg;&colon.lit;&dir.arg;">
	<!ENTITY K.opt "<option>-K</option>&str.arg;&comma.lit;&ellipsis.lit;">

	<!ENTITY s1.opt "<option>-s</option>">
	<!ENTITY s2.opt "<option>-s</option>&letter.arg;&colon.lit;&suffix.arg;">
	<!ENTITY X1.opt "<option>-X</option>&str.arg;">
	<!ENTITY X2.opt "<option>-X:</option>&str.arg;">
	<!ENTITY D1.opt "<option>-D</option>&macro.arg;">
	<!ENTITY D2.opt "<option>-D</option>&macro.arg;&equal.lit;<replaceable>defn</replaceable>">
	<!ENTITY E1.opt "<option>-E</option>">
	<!ENTITY E2.opt "<option>-E</option>&letter.arg;&colon.lit;&file.arg;">
	<!ENTITY S1.opt "<option>-S</option>">
	<!ENTITY S2.opt "<option>-S</option>&letter.arg;&comma.lit;&file.arg;&comma.lit;&ellipsis.lit;">
	<!ENTITY S3.opt "<option>-S</option>&letter.arg;&colon.lit;&file.arg;">
	<!ENTITY W1.opt "<option>-W</option>&letter.arg;&comma.lit;&str.arg;&comma.lit;&ellipsis.lit;">
	<!ENTITY W2.opt "<option>-W</option>&letter.arg;&colon.lit;&str.arg;">

	<!ENTITY MA.opt "<option>-MA</option>">
	<!ENTITY dn.opt "<option>-dn</option>">
	<!ENTITY dy.opt "<option>-dy</option>">
	<!ENTITY cc.opt "<option>-cc</option>">
	<!ENTITY vb.opt "<option>-vb</option>">
	<!ENTITY vd.opt "<option>-vd</option>">
	<!ENTITY ve.opt "<option>-ve</option>">
	<!ENTITY vt.opt "<option>-vt</option>">
	<!ENTITY ch.opt "<option>-ch</option>">
	<!ENTITY do.opt "<option>-do</option>&letter.arg;&nbsp;&file.arg;">
	<!ENTITY im.opt "<option>-im</option>">

	<!ENTITY dry.opt  "<option>-dry</option>">
	<!ENTITY wsl.opt  "<option>-wsl</option>">
	<!ENTITY im0.opt  "<option>-im0</option>">
	<!ENTITY sym1.opt "<option>-sym</option>">
	<!ENTITY sym2.opt "<option>-sym</option>&colon.lit;&nbsp;&str.arg;">
	<!ENTITY tidy.opt "<option>-tidy</option>">
	<!ENTITY prod.opt "<option>-prod</option>">
	<!ENTITY disp.opt "<option>-disp</option>">
	<!ENTITY dump.opt "<option>-dump</option>">
	<!ENTITY info.opt "<option>-info</option>">
	<!ENTITY nepc.opt "<option>-nepc</option>">
	<!ENTITY time.opt "<option>-time</option>">
	<!ENTITY temp.opt "<option>-temp</option>&nbsp;&dir.arg;">
	<!ENTITY work.opt "<option>-work</option>&nbsp;&dir.arg;">

	<!ENTITY query.opt   "<option>-query</option>">
	<!ENTITY quiet.opt   "<option>-quiet</option>">
	<!ENTITY target.opt  "<option>-target</option>&nbsp;&str.arg;">
	<!ENTITY disp_t.opt  "<option>-disp_t</option>">
	<!ENTITY version.opt "<option>-version</option>">
	<!ENTITY startup.opt "<option>-startup</option>&nbsp;&str.arg;">
	<!ENTITY special.opt "<option>-special</option>&nbsp;&str.arg;">
	<!ENTITY message.opt "<option>-message</option>&nbsp;&str.arg;">
	<!ENTITY verbose.opt "<option>-verbose</option>">
	<!ENTITY cc_only.opt "<option>-cc_only</option>">

	<!ENTITY not_ansi.opt      "<option>-not_ansi</option>">
	<!ENTITY api_check.opt     "<option>-api_check</option>">
	<!ENTITY keep_errors.opt   "<option>-keep_errors</option>">
	<!ENTITY show_errors.opt   "<option>-show_errors</option>">
	<!ENTITY make_up_names.opt "<option>-make_up_names</option>">
	<!ENTITY api_check_out.opt "<option>-api_check_out</option>&nbsp;&file.arg;">

	<!ENTITY no_startup_options.opt "<option>-no_startup_options</option>">
]>

<!-- $Id$ -->
<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<refmeta>
		<refentrytitle>tcc</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>tcc</refname>
		<refpurpose>User interface to the TDF system</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<cmdsynopsis>
			<command>tcc</command>

			<group choice="opt">
				<arg choice="plain">&E1.opt;</arg>
				<arg choice="plain">&F.opt;</arg>
				<arg choice="plain">&P.opt;</arg>
				<arg choice="plain">&S1.opt;</arg>
				<arg choice="plain">&c.opt;</arg>
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&disp.opt;</arg>
				<arg choice="plain">&disp_t.opt;</arg>
				<arg choice="plain">&dry.opt;</arg>
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&k.opt;</arg>
				<arg choice="plain">&prod.opt;</arg>
			</group>

			<sbr/>

			<arg choice="plain" rep="repeat">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tcc</command>

			<arg choice="plain">&ch.opt;</arg>

			<arg choice="opt">&api_check.opt;</arg>
			<arg choice="opt">&api_check_out.opt;</arg>
			<arg choice="opt">&im.opt;</arg>
			<arg choice="opt">&im0.opt;</arg>

			<!-- TODO: -im etc make sense for non-tchk use, too. need to test all these combinations... -->

			<sbr/>

			<arg choice="plain" rep="repeat">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tcc</command>

			<group choice="req">
				<arg choice="plain">&query.opt;</arg>
				<arg choice="plain">&version.opt;</arg>
				<arg choice="plain">&V.opt;</arg>
			</group>
		</cmdsynopsis>

		<para>Most options are common to both &ch.opt; and to normal use.
			For brevity, these are not repeated above:</para>

		<cmdsynopsis>
			<command>&nbsp;&nbsp;&nbsp;</command>


			<!-- Code options -->
			<arg choice="opt">&A.opt;</arg>
			<arg choice="opt">&C.opt;</arg>
			<group choice="opt">
				<arg choice="plain">&D1.opt;</arg>
				<arg choice="plain">&D2.opt;</arg>
			</group>
			<arg choice="opt">&U.opt;</arg>
			<arg choice="opt">&e.opt;</arg>
			<arg choice="opt">&f.opt;</arg>
			<arg choice="opt">&no_startup_options.opt;</arg>

			<sbr/>

			<arg choice="opt">&startup.opt;</arg>


			<!-- Print options -->
			<arg choice="opt">&H.opt;</arg>
			<arg choice="opt">&w.opt;</arg>
			<arg choice="opt">&dump.opt;</arg>
			<arg choice="opt">&info.opt;</arg>
			<arg choice="opt">&message.opt;</arg>
			<group choice="opt">
				<arg choice="plain">&q.opt;</arg>
				<arg choice="plain">&quiet.opt;</arg>
			</group>
			<arg choice="opt">&time.opt;</arg>
			<group choice="opt">
				<arg choice="plain">&v.opt;</arg>
				<arg choice="plain">&verbose.opt;</arg>
			</group>

			<sbr/>

			<arg choice="opt">&show_errors.opt;</arg>
			<arg choice="opt">&vb.opt;</arg>
			<arg choice="opt">&vd.opt;</arg>
			<arg choice="opt">&ve.opt;</arg>
			<arg choice="opt">&vt.opt;</arg>


			<!-- Dir options -->
			<arg choice="opt">&I.opt;</arg>
			<arg choice="opt">&J.opt;</arg>
			<arg choice="opt">&L.opt;</arg>
			<arg choice="opt">&N.opt;</arg>

			<sbr/>

			<arg choice="opt">&temp.opt;</arg>
			<arg choice="opt">&work.opt;</arg>


			<!-- Misc options -->
			<arg choice="opt">&B.opt;</arg>
			<arg choice="opt">&E2.opt;</arg>
			<arg choice="opt">&G.opt;</arg>
			<arg choice="opt">&K.opt;</arg>
			<group choice="opt">
				<arg choice="plain">&M.opt;</arg>
				<arg choice="plain">&MA.opt;</arg>
			</group>
			<arg choice="opt">&O.opt;</arg>
			<arg choice="opt">&P.opt;</arg>
			<arg choice="opt">&Y.opt;</arg>

			<sbr/>

			<arg choice="opt">&S2.opt;</arg>
			<group choice="opt">
				<arg choice="plain">&S1.opt;</arg>
				<arg choice="plain">&W1.opt;</arg>
			</group>
			<group choice="opt">
				<arg choice="plain">&W2.opt;</arg>
				<arg choice="plain">&X1.opt;</arg>
			</group>
			<arg choice="opt">&X2.opt;</arg>
			<arg choice="opt">&Z.opt;</arg>
			<arg choice="opt">&b.opt;</arg>
			<arg choice="opt">&g.opt;</arg>
			<arg choice="opt">&p.opt;</arg>

			<sbr/>

			<group choice="opt">
				<arg choice="plain">&dn.opt;</arg>
				<arg choice="plain">&dy.opt;</arg>
			</group>
			<arg choice="opt">&cc.opt;</arg>
			<arg choice="opt">&cc_only.opt;</arg>
			<arg choice="opt">&do.opt;</arg>
			<arg choice="opt">&h.opt;</arg>
			<arg choice="opt">&j.opt;</arg>
			<arg choice="opt">&keep_errors.opt;</arg>
			<arg choice="opt">&make_up_names.opt;</arg>

			<sbr/>

			<arg choice="opt">&l.opt;</arg>
			<arg choice="opt">&nepc.opt;</arg>
			<arg choice="opt">&not_ansi.opt;</arg>
			<arg choice="opt">&o.opt;</arg>
			<arg choice="opt">&s1.opt;</arg>
			<arg choice="opt">&s2.opt;</arg>
			<arg choice="opt">&special.opt;</arg>
			<arg choice="opt">&sym1.opt;</arg>
			<arg choice="opt">&sym2.opt;</arg>

			<sbr/>

			<arg choice="opt">&wsl.opt;</arg>
			<arg choice="opt">&target.opt;</arg>
			<arg choice="opt">&tidy.opt;</arg>
			<arg choice="opt">&u.opt;</arg>
			<arg choice="opt">&z.opt;</arg>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>&tcc; is the user interface to the &tdf; system.
			It is more fully documented in the &tcc-userguide.doc;.</para>

		<para>&tcc; accepts several types of arguments as &file.arg;.
			The formats of these files are automatically inferred from their
			names:</para>

		<table>
			<col align="center"/>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Suffix</th>
					<th>Context</th>
					<th>Format</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td>&c.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>C source files</td>
				</tr>

				<tr>
					<td>&i.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>Preprocessed C source files</td>
				</tr>

				<tr>
					<td>&C.ext;</td>
					<td><option>-Y</option><literal>c++</literal> only</td>
					<td>C++ source files</td>
				</tr>

				<tr>
					<td>&I.ext;</td>
					<td><option>-Y</option><literal>c++</literal> only</td>
					<td>Preprocessed C++ source files</td>
				</tr>

				<tr>
					<td>&j.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>Target-independent &tdf; capsules</td>
				</tr>

				<tr>
					<td>&ta.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>Archives of target-independent &tdf; capsules</td>
				</tr>

				<tr>
					<td>&t.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>Target-dependent &tdf; capsules</td>
				</tr>

				<tr>
					<td>&s.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>Assembly source files</td>
				</tr>

				<tr>
					<td>&d.ext;</td>
					<td role="na" align="center">&ndash;</td>
					<td>TenDRA dump files</td>
				</tr>

				<tr>
					<td>&K.ext;</td>
					<td><option>-Y</option><literal>c++</literal> only</td>
					<td>C++ spec files</td>
				</tr>

				<tr>
					<td>&p.ext;</td>
					<td><option>-Y</option><literal>tnc</literal> only</td>
					<td>&tdf; notation source files (<acronym>AKA</acronym>
						<quote>&tdf; text</quote>)</td>
				</tr>

				<tr>
					<td>&tpl.ext;</td>
					<td><option>-Y</option><literal>pl_tdf</literal> only</td>
					<td>&pl_tdf; source files</td>
				</tr>

				<tr>
					<td>other</td>
					<td role="na" align="center">&ndash;</td>
					<td>Binary object files (typically <filename>*.o</filename>
						and <filename>*.a</filename></td>
				</tr>
			</tbody>
		</table>

		<para>&tcc;'s purpose is to provide a convenient interface through which
			these files may be converted from one format to another. This is a
			broad function, and encompasses many situations; the exact details
			of each of these situations are beyond the scope of this manual.
			These are covered in depth in the &tcc-userguide.doc;.</para>

		<para>&tcc; is configured almost entirely at runtime&mdash;many of the
			options passed on the command line (in particular the
			<option>-Y</option> and <option>-X</option> options) draw their
			configurations from files on the filesystem.
			Alternate files may be specified, to provide a mechanism for
			user-specific customisation. This is discussed in &tccenv.5;.</para>
	</refsection>

	<refsection>
		<title>Compilation Stages</title>

		<para>The compilation process is as follows.</para>

		<orderedlist>
			<listitem>
				<para>&tdf; archives are split into their constituent target
					independent capsules.</para>
			</listitem>

			<listitem>
				<para>C source files (including preprocessed C) are compiled
					into target independent &tdf; capsules using &tdfc2;.
					(&tcpplus; does the same for C++ source files when
					<option>-Y</option><literal>c++</literal> is specified.)</para>
			</listitem>

			<listitem>
				<para>Target independent &tdf; capsules are linked, using &tld;,
					with the &tdf; libraries to produce target dependent &tdf;
					capsules.</para>
			</listitem>

			<listitem>
				<para>Target dependent &tdf; capsules are translated into
					assembly source files using one of &mipstrans;
					(q.v.&mdash;things are not quite so simple in this case), &trans386;
					etc.</para>
			</listitem>

			<listitem>
				<para>Assembly source files are compiled into binary
					object files using &as;.</para>
			</listitem>

			<listitem>
				<para>Binary object files are linked with the precompiled
					libraries, using &ld;, to produce a final executable.</para>
			</listitem>
		</orderedlist>

		<para>With the exception of binary object files, intermediate files are not
			preserved unless explicitly instructed.</para>

		<para>The standard file suffixes &c.ext;, &i.ext;, &C.ext;, &I.ext;,
			&j.ext;, &t.ext;, &s.ext;, &o.ext;, &d.ext;, &k.ext;, and &K.ext;,
			together with &p.ext; (pretty-printed &tdf; capsule) and &tpl.ext;
			(&pl_tdf; source file), are used to indicate file types in some
			options. Also the various compilation phases are identified by
			letters in some options.
			These are:</para>

		<table>
			<col align="center"/>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Code</th>
					<th>Context</th>
					<th>Phase</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>c</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>C to &tdf; producer</td>
				</tr>
				<tr>
					<td><code>p</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>C preprocessor</td>
				</tr>
				<tr>
					<td><code>x</code></td>
					<td><option>-Y</option><literal>c++</literal> only</td>
					<td>C++ to &tdf; producer</td>
				</tr>
				<tr>
					<td><code>g</code></td>
					<td><option>-Y</option><literal>c++</literal> only</td>
					<td>C++ preprocessor</td>
				</tr>
				<tr>
					<td><code>L</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>&tdf; linker (or builder)</td>
				</tr>
				<tr>
					<td><code>t</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>&tdf; translator</td>
				</tr>
				<tr>
					<td><code>a</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>System assembler</td>
				</tr>
				<tr>
					<td><code>l</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>System linker</td>
				</tr>
				<tr>
					<td><code>S</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>C++ spec linker</td>
				</tr>
				<tr>
					<td><code>e</code></td>
					<td><option>-Y</option><literal>compact</literal> only</td>
					<td>Compact-output error reporter</td>
				</tr>
				<tr>
					<td><code>u</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>TenDRA dump file linker</td>
				</tr>
				<tr>
					<td><code>d</code></td>
					<td role="na" align="center">&ndash;</td>
					<td>&tdf; pretty-printer</td>
				</tr>
			</tbody>
		</table>

		<para>Depending on the options given, compilation may halt at any stage.
			The options which effect halting are:</para>

		<variablelist>
			<varlistentry>
				<term>&E1.opt;</term>

				<listitem>
					<para>Invokes the C preprocessor only, putting the result
						into a file with a &i.ext; suffix if other
						options indicate that preprocessed C files are to be
						preserved, or onto the standard output otherwise.
						Similarly, C++ source files are preprocessed and put into
						files with &I.ext; suffixes.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&F.opt;</term>

				<listitem>
					<para>Tells &tcc; to stop after producing the files
						indicated by &letter.arg;, and to preserve these files.
						&letter.arg; is a single character corresponding to the
						suffix of the files to be preserved.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&P.opt;</term>

				<listitem>
					<para>Invokes the C preprocessor only, putting the result
						into a file with a &i.ext; suffix.
						The C++ preprocessor is similarly invoked for C++ source
						files, putting the result into a file with a
						&I.ext; suffix.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S1.opt;</term>

				<listitem>
					<para>Tells &tcc; to stop after producing an assembly source
						file.
						This is equivalent to <option>-Fs</option>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&c.opt;</term>

				<listitem>
					<para>Tells &tcc; to stop after producing
						the binary object files.
						This is equivalent to <option>-Fo</option>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&d.opt;</term>

				<listitem>
					<para>Halts the compilation after the creation of the
						dump files.	This is equivalent to
						<option>-Fd</option>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&disp.opt;</term>

				<listitem>
					<para>Runs the &tdf; pretty-printer on all files at
						stage 2 or 3 and then terminates.
						The results are put into files with &p.ext;
						suffixes.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&disp_t.opt;</term>

				<listitem>
					<para>Runs the pretty-printer on all files at stage 3 and
						then terminates.
						This differs from the <option>-disp</option> option in that
						it displays the &tdf; after linking with the target-dependent
						&tdf; libraries rather than before.
						The output is put into a file with a &p.ext; suffix.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&i.opt;</term>

				<listitem>
					<para>Tells &tcc; to stop after producing the target
						independent &tdf; capsules.
					 	This is equivalent to <option>-Fj</option>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&k.opt;</term>

				<listitem>
					<para>In intermodular checking mode, halts the
						compilation after the creation of the C++ spec files.
						This is equivalent to <option>-FK</option>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&prod.opt;</term>

				<listitem>
					<para>Specifies that &tcc; should stop after producing the
						target independent &tdf; capsules and combine them into a
						&tdf; archive.
						The default archive name is <filename>a.ta</filename>.</para>
				</listitem>
				<!-- TODO: emphasise why this is useful. it's the main TDF distribution mechanism -->
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Options</title>

		<para>The following options are supported by &tcc;.
			All options are scanned before input files are dealt with.
			The system variable <varname>TCCOPTS</varname>
			may be used to specify a list of options which are processed before the
			first command-line option.</para>

		<variablelist>
			<varlistentry>
				<term>&A.opt;</term>

				<listitem>
					<para>Asserts the predicate &str.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&B.opt;</term>

				<listitem>
					<para>Passed to the system linker.	The valid values of
						&str.arg; are target dependent.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&C.opt;</term>

				<listitem>
					<para>Not implemented and provided for &cc; compatibility only.
						It is meant to preserve comments when preprocessing.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&D1.opt;</term>
				<term>&D2.opt;</term>

				<!-- TODO: centralise shared options with tcppplus manpage somehow? -->
				<listitem>
					<para>Where &str.arg; is of the form &macro.arg; or
						&macro.arg;&equal.lit;<replaceable>defn</replaceable>,
						is equivalent to inserting the preprocessor directives
						<code>#define &macro.arg; 1</code> or
						<code>#define &macro.arg; <replaceable>defn</replaceable></code> at the
						start of each C source file.
						This is implemented by &tcc; writing this
						directive into a start-up file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&E2.opt;</term>

				<listitem>
					<para>Causes &file.arg; to be invoked as the executable for
						the compilation stage given by &letter.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&G.opt;</term>

				<listitem>
					<para>Provided for &cc; compatibility.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&H.opt;</term>

				<listitem>
					<para>Causes the names of files included by a
						<code>#include</code> directive to be printed.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&I.opt;</term>

				<listitem>
					<para>Tells the producers and preprocessors to search
						the directory &dir.arg; for included files.
						The directories are searched in the order given,
						followed by the system default directories.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&J.opt;</term>

				<listitem>
					<para>Tells the &tdf; linker to search the directory
						&dir.arg; for &tdf; libraries.
						The linker searches the directories in the order given,
						followed by the system default directories.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&K.opt;</term>

				<listitem>
					<para>Provided for &cc; compatibility.
						Specifies various installer options.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&L.opt;</term>

				<listitem>
					<para>Tells the system linker to search the directory
						&dir.arg; for libraries.
						It searches the directories in the order given, followed
						by the system default directories.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&M.opt;</term>
				<term>&MA.opt;</term>

				<listitem>
					<para>Specifies that the &tdf; linker should link all the
						given target independent &tdf; capsules into one.
						This is done between stages 2 and 3 above.
						The default name for the produced capsule is
						<filename>a.j</filename>.</para>

					<para>The &MA.opt; form additionally hides all the defined
						tag and token names from the resultant &tdf;, except
						the tag "main".
						&MA.opt; should only be used to compile complete
						programs.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&N.opt;</term>

				<listitem>
					<para>As &I.opt; except that the identifier &ident.arg; is
						associated with the directory &dir.arg; in the producer.</para>
				</listitem>
				<!-- TODO: explain what this means... -->
			</varlistentry>

			<varlistentry>
				<term>&O.opt;</term>

				<listitem>
					<para>This flag has no effect other than to cancel any
						previous diagnostics flag and is included only for
						compatibility with other compilers.
						All &tdf; optimisations are on by default.
						<!-- TODO: "diagnostics flag"? really? -->
						All optimisations are believed to be correct; any bug which
						occurs in the fully-optimised state
						is a genuine bug.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&P.opt;</term>

				<listitem>
					<para>Tells &tcc; to preserve those files indicated by
						&letter.arg;.
						Each &letter.arg; is a single character corresponding to the
						suffix of the files to be preserved.
						The &tcc; startup-file can be preserved as
						<filename>tcc_startup.h</filename> using <option>-Ph</option>.
						All intermediate files can be preserved using
						<option>-Pa</option>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S2.opt;</term>
				<term>&S3.opt;</term>

				<listitem>
					<para>The specifies that the list of input files &file.arg;
						all have type &letter.arg;, where &letter.arg; is a single
						character giving the normal suffix of the file type.
						This gives an alternative method of passing input files
						to &tcc;, one which does not depend on it having to
						recognise suffixes to find the type of a file.</para>

					<para>The &S3.opt; form is similar to the option above, but
						specifies a single input file, &file.arg;
						(which may contain a comma).</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&U.opt;</term>

				<listitem>
					<para>Is equivalent to inserting the preprocessor directive
						<code>#undef &str.arg;</code> at the start of each C source
						file.
						This is implemented by &tcc; writing this directive into a
						start-up file.
						The only macros built into the C to &tdf; producer are
						<code>__LINE__</code>, <code>__FILE__</code>,
						<code>__DATE__</code>, <code>__TIME__</code>,
						<code>__STDC__</code>, <code>__ANDF__</code> and
						<code>__TenDRA__</code>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&V.opt;</term>

				<listitem>
					<para>Causes all tools invoked by &tcc;
					to print their version numbers.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&W1.opt;</term>
				<term>&W2.opt;</term>

				<listitem>
					<para>This passes the list of options &str.arg; to the
						compilation phase indicated by &letter.arg;.</para>

					<para>The &W2.opt; form is similar to the option above, but
						specifies a single file &str.arg;
						(which may contain a comma).</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&X1.opt;</term>

				<listitem>
					<para>Specifies a compilation mode. The mode may be one of
						of the following:</para>

					<table>
						<col align="center"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Mode</th>
								<th>Meaning</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>a</code></td>
								<td>Lenient &ansi;</td>
							</tr>
							<tr>
								<td><code>c</code></td>
								<td>Strict &ansi; (default)</td>
							</tr>
							<tr>
								<td><code>p</code></td>
								<td>Strict &ansi; with some extra checks</td>
							</tr>
							<tr>
								<td><code>s</code></td>
								<td>Strict &ansi; with many extra checks</td>
							</tr>
							<tr>
								<td><code>t</code></td>
								<td>Traditional (pre-&ansi;) C</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&X2.opt;</term>

				<listitem>
					<para>Specifies an individual compilation option.
						See the &tcc-userguide.doc; for details.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&Y.opt;</term>

				<listitem>
					<para>Specifies the environment to use.	An environment is
						a file telling &tcc; to modify its defaults.
						If the full pathname of &env.arg; is
						not given, the file is searched for along the
						&tcc; environments path which is a list of directories
						separated by colons.
						This search path can be printed using
						<option>-vd</option>.</para>

					<para>There are certain standard environments, for example,
						<literal>ansi</literal>, representing the &ansi; &api; (this is
						the default &api; environment), <literal>posix</literal>
						represents the &posix; &api;, <literal>xpg3</literal> the
						&xpg3; &api;, and so on.
						The <literal>system</literal> environment allows
						&tcc; to behave like &cc;,
						using the system header files etc.
						See the &tcc-userguide.doc; and &tccenv.5;
						manual page for more details about environments.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&Z.opt;</term>

				<listitem>
					<para>Provided for &cc; compatibility.
						Specifies various installer options.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&api_check.opt;</term>

				<listitem>
					<para>Causes &tchk; to create an &api; usage analysis file,
						with default name <filename>a.api</filename>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&api_check_out.opt;</term>

				<listitem>
					<para>If an &api; usage analysis file is produced, call it
						&file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&b.opt;</term>

				<listitem>
					<para>Stops the library <filename>libc.a</filename> being
						used by the linker by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&cc.opt;</term>

				<listitem>
					<para>Causes &tcc; to invoke &cc; for its code production,
						using the C to &tdf; producer as a checking front-end to &cc;.
						This allows the checking capabilities of the front-end
						of the &tdf; compiler to be exploited on machines where no
						&tdf; back-end is available.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&cc_only.opt;</term>

				<listitem>
					<para>Causes &tcc; to invoke &cc; only.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&ch.opt;</term>

				<listitem>
					<para>Causes &tcc; to emulate the stand-alone static
						checker, &tchk;.
						Intermodular checks are enabled in this mode.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&dn.opt;</term>
				<term>&dy.opt;</term>

				<listitem>
					<para>Passed to the system linker.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&do.opt;</term>

				<listitem>
					<para>Sets the name of the default output file of type
						&letter.arg; to &file.arg;.
						For example, <option>-doh</option> can be used to set
						the name of the preserved start-up file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&dry.opt;</term>

				<listitem>
					<para>Makes &tcc; print information on what system commands
						it would execute with the given files and options (as in
						verbose mode) but not actually perform them.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&dump.opt;</term>

				<listitem>
					<para>Causes &tcc; to dump its current status.
						This option is only used during the actual compilation of
						&tcc;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&e.opt;</term>

				<listitem>
					<para>Is equivalent to inserting the preprocessor directive
						<code>#include "&file.arg;"</code> at the end of each C
						source file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&f.opt;</term>

				<listitem>
					<para>Is equivalent to inserting the preprocessor directive
						<code>#include "&file.arg;"</code> at the start of each C
						source file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&g.opt;</term>

				<listitem>
					<para>Tells &tcc; to produce diagnostic information
						compatible with the system debugger.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&h.opt;</term>

				<listitem>
					<para>Passed to the system linker.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&im.opt;</term>

				<listitem>
					<para>Enables intermodular checks.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&im0.opt;</term>

				<listitem>
					<para>Disables intermodular checks.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&info.opt;</term>

				<listitem>
					<para>Causes &tcc; to print information
						on the current &api;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&j.opt;</term>

				<listitem>
					<para>Tells the &tdf; linker to use the &tdf; library
						&str.arg;&tl.ext;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&keep_errors.opt;</term>

				<listitem>
					<para>By default, if an error occurs during the production
						of a file, &tcc; will remove it.
						This option will preserve such files.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&l.opt;</term>

				<listitem>
					<para>Tells the system linker to use the library
						<filename><literal>lib</literal>&str.arg;<literal>.a</literal></filename>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&make_up_names.opt;</term>

				<listitem>
					<para>Causes &tcc; to make up names for all intermediate
						files rather than forming them from the basenames of the
						input files.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&message.opt;</term>

				<listitem>
					<para>Causes &tcc; to print the message &str.arg;.</para>
				</listitem>
				<!-- TODO: explain rationalle (in distributable TDF archives as per -prod) -->
			</varlistentry>

			<varlistentry>
				<term>&nepc.opt;</term>

				<listitem>
					<para>Tells the C to &tdf; producer to allow certain
						non-portable constructs through.</para>
				</listitem>
				<!-- TODO: such as...? -->
			</varlistentry>

			<varlistentry>
				<term>&not_ansi.opt;</term>

				<listitem>
					<para>Tells the C to &tdf; producer to allow certain
						non-&ansi; features through.</para>
				</listitem>
				<!-- TODO: such as ...? -->
			</varlistentry>

			<varlistentry>
				<term>&no_startup_options.opt;</term>

				<listitem>
					<para>Ensures that no start-up or end-up options are passed
						to the C to &tdf; producer (unlikely to be useful).</para>
				</listitem>
				<!-- TODO: remove this? -->
			</varlistentry>

			<varlistentry>
				<term>&o.opt;</term>

				<listitem>
					<para>If a final executable is produced, call it
						&file.arg; (the default is <filename>a.out</filename>).
						Otherwise, if only one file is preserved, call it
						&file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&p.opt;</term>

				<listitem>
					<para>Produces profiling data for use with &prof; on those
						machines for which this command is available.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&q.opt;</term>
				<term>&quiet.opt;</term>

				<listitem>
					<para>Specifies that &tcc; should work silently.
						This is the default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&query.opt;</term>

				<listitem>
					<para>Causes &tcc; to print a list of all the options it
						recognises, together with a brief description of each.
						Since this list is automatically generated it is likely to
						be more accurate than this manual page.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s1.opt;</term>

				<listitem>
					<para>Passed to the system linker.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s2.opt;</term>

				<listitem>
					<para>Specifies that files with suffix &suffix.arg; are
						interpreted as having type indicated by
						&letter.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&show_errors.opt;</term>

				<listitem>
					<para>Makes &tcc; report on the command it was executing
						when an error occurred.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&special.opt;</term>

				<listitem>
					<para>Allows various internal options to be
						specified.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&startup.opt;</term>

				<listitem>
					<para>Causes &str.arg; to be printed to the &tcc; built-in
						start-up file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&sym1.opt;</term>
				<term>&sym2.opt;</term>

				<listitem>
					<para>Enables dump-linking (with mode specified by options
						in &str.arg;, if present).</para>
					<!-- TODO: document options for str -->
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&target.opt;</term>

				<listitem>
					<para>No effect (allowed for compatibility with &cc;
						on some systems).</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&temp.opt;</term>

				<listitem>
					<para>Specifies that &tcc; should use &dir.arg; as its
						temporary directory.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&tidy.opt;</term>

				<listitem>
					<para>Causes &tcc; to remove its intermediate files when
						they are no longer required rather than waiting to the end
						of the compilation.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&time.opt;</term>

				<listitem>
					<para>Makes &tcc; print information on what system commands
						it is executing (as with verbose mode) followed by the time
						taken for each.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&u.opt;</term>

				<listitem>
					<para>Passed to the system linker.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&v.opt;</term>
				<term>&verbose.opt;</term>

				<listitem>
					<para>Specifies that &tcc; should work in verbose mode,
						sending information on what system commands it is executing
						to the standard output.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&vb.opt;</term>

				<listitem>
					<para>Causes the name of each input file to be printed
						as it is processed.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&vd.opt;</term>

				<listitem>
					<para>Causes a dump of the environment information tcc
						got hold of.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&ve.opt;</term>

				<listitem>
					<para>Causes verbose information about tool chain
						environment to be printed.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&vt.opt;</term>

				<listitem>
					<para>Causes verbose information about tool chain
						invocation to be printed.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&version.opt;</term>

				<listitem>
					<para>Makes &tcc; report its version number.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&w.opt;</term>

				<listitem>
					<para>Suppresses all &tcc; warning messages.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&work.opt;</term>

				<listitem>
					<para>Specifies that all preserved intermediate files
						are placed in the directory &dir.arg;
						rather than where they are placed by default,
						in the current working directory.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&wsl.opt;</term>

				<listitem>
					<para>Tells the &tdf; translator to make all string
						literals writable.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&z.opt;</term>

				<listitem>
					<para>Passed to the system linker.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Files</title>

		<variablelist>
			<varlistentry>
				<term><filename>file.c</filename></term>

				<listitem>
					<para>C source file</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.i</filename></term>

				<listitem>
					<para>Preprocessed C source file</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.C</filename></term>

				<listitem>
					<para>C++ source file
						(only if <option>-Y</option><literal>c++</literal>
						is specified)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.I</filename></term>

				<listitem>
					<para>Preprocessed C++ source file
						(only if <option>-Y</option><literal>c++</literal>
						is specified)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.j</filename></term>

				<listitem>
					<para>Target independent &tdf; capsule</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.t</filename></term>

				<listitem>
					<para>Target dependent &tdf; capsule</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.s</filename></term>

				<listitem>
					<para>Assembly source file</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.o</filename></term>

				<listitem>
					<para>Binary object file</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.d</filename></term>

				<listitem>
					<para>TenDRA dump file</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.K</filename></term>

				<listitem>
					<para>C++ spec file
						(only if <option>-Y</option><literal>c++</literal>
						is specified)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.p</filename></term>

				<listitem>
					<para>Pretty-printed &tdf; capsule</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.tpl</filename></term>

				<listitem>
					<para>&pl_tdf; source file
						(only if <option>-Y</option><literal>pl_tdf</literal>
						is specified)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.ta</filename></term>

				<listitem>
					<para>&tdf; archive</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.G</filename></term>

				<listitem>
					<para>Binasm source file (Mips and Alpha only)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>file.T</filename></term>

				<listitem>
					<para>Assembler symbol table (Mips and Alpha only)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>a.out</filename></term>

				<listitem>
					<para>Default executable name</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>a.ta</filename></term>

				<listitem>
					<para>Default &tdf; archive name</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>a.d</filename></term>

				<listitem>
					<para>Default dump file name</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>a.api</filename></term>

				<listitem>
					<para>Default &api; usage analysis file name</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>a.j</filename></term>

				<listitem>
					<para>Default output file for merge-&tdf;-capsules
						option</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>tcc_startup.h</filename></term>

				<listitem>
					<para>Name of preserved &tcc; start-up file</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><filename>/tmp/tcc*</filename></term>

				<listitem>
					<para>Temporary directory (this may be changed using
						the <varname>TMPDIR</varname> system variable, see
						&tempnam.3;).</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&as;, &cc;, &ld;, &prof;, &disp;, &tchk;, &tdfc2;, &tcpplus;,
			&tld;, &trans-all; &tccenv.5;.</para>

		<para>&tcc-userguide.doc;.</para>
	</refsection>
</refentry>

