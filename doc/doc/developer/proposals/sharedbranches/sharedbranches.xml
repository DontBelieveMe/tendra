<?xml version="1.0" standalone="no"?>
<!DOCTYPE article SYSTEM "minidocbook.dtd" [

	<!ENTITY theproject "<orgname>The Ten<acronym>DRA</acronym> Project</orgname>">
]>

<!-- $Id$ -->

<article>

	<articleinfo>
		<title>Reorganising for Shared Code and Branching</title>

		<authorgroup>
			<author>
				<firstname>Katherine</firstname>
				<surname>Flavel</surname>
				<affiliation>&theproject;</affiliation>
			</author>
		</authorgroup>

		<pubdate>2008</pubdate>

		<copyright>
			<year>2008</year>
			<holder>&theproject;</holder>
		</copyright>

		<abstract>
			<para>A repository restructuring is proposed to simplify
				management of dependencies between projects within the
				repository.</para>
		</abstract>

		<revhistory role="version">
			<revision role="initialrevision">
				<date>1 Jan 2008</date>
				<revremark>Initial proposal.</revremark>
			</revision>
		</revhistory>
	</articleinfo>

	<section>
		<title>Introduction</title>

		<para>Modularising the repository has proved to be beneficial for
			development of standalone projects independently of each
			other. This has freed up compatibility for feature additions
			without fear of breaking dependant components for use
			elsewhere. This has also simplified development in terms
			of keeping the code affected by work on a specific project
			to within just that project's area.</para>

		<para>However, sharing common code between projects using
			the <code>svn:externals</code> mechanism, whilst theoretically
			sound, has proved to be cumbersome in practise. This proposal
			suggests a restructuring trading repository simplicity
			for a change in branching.</para>

		<para>A side-effect of this proposal includes a system to
			centralise management of any branches made of external
			projects (for which <code>svn:externals</code> may or
			may not be employed), kept in one location only.</para>
	</section>

	<section>
		<title>Proposal</title>

		<para>The scheme proposed is to keep all the projects under
			one trunk/tags/branches (they share common code). Tags for
			a stable release for one project would be a tag of the
			whole lot, but somebody using that tag would only be
			interested in that directory (the other projects
			would be in an indeterminate state).</para>

		<para>Stable releases would be tar'd up from that directory.
			Tars for releases would need to include their shared code;
			if producing a tar is the only issue,
			<command>make dist</command> could easily copy in that shared
			elements to the component's directory - perhaps a symlink
			would suffice for that, since tar can trivially traverse
			symlinks.</para>

		<para>The only downside I see is that a tag (or a branch) contains
			a lot of irrelevant code, but that seems mostly just cosmetic.
			The name of the tag should tell you what you're interested in.
			The diff beneath that component (and the shared code it uses)
			is the only relevant part.</para>
	</section>

	<section>
		<title>Criticism</title>

		<para>Three issues with the above:</para>

		<itemizedlist>
			<listitem>
				<para>Merging back changes from shared in multiple branches.
					This is unlikely to be a problem, due to the nature of
					branches being bug-fixes. Related changes should be
					synced up from trunk, anyway. In practise, I think this
					would be obvious case-by-case.</para>
			</listitem>

			<listitem>
				<para>Taring up releases need to include everything related
					to that component. That seems trivial to implement using
					a symlink, which is probably the most natural way, making
					it easiest to understand the relationship.</para>
			</listitem>

			<listitem>
				<para>The unrelated items in a branch may be confusing to
					developers. In practise I don't think it would be
					since the branch's name explains what is relevant.</para>
			</listitem>
		</itemizedlist>
	</section>

	<section>
		<title>External Vendors</title>

		<para>Since items may now me more easily shared between various
			projects, any external code employed may be stored adjacent to
			projects. Thus external code (for example, the documentation
			processing tools) may be kept in one central location under
			(say) <code>/trunk/vendor/doctools</code>, or (for example)
			a bundled bmake package, should we wish to provide that.</para>

		<para>These items may either be forked from their external projects
			and committed to our repository (as bmake would be, to continue
			the example), or brought in via <code>svn:externals</code>.
			An important point to note here is that if <code>svn:externals</code>
			is used, this would be one location for the entire repository,
			instead of multiple items throughout.</para>
	</section>

</article>

