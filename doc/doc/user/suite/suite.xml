<?xml version="1.0" standalone="no"?>
<!DOCTYPE article SYSTEM "minidocbook.dtd">

<!-- $Id$ -->

<article>

	<articleinfo>
		<title>TenDRA Suite Purpose Overview</title>

		<authorgroup>
			<author>
				<firstname>Rob</firstname>
				<surname>Andrews</surname>
			</author>

			<othercredit class="copyeditor">
				<firstname>Katherine</firstname>
				<surname>Flavel</surname>
				<affiliation><orgname>The TenDRA Project</orgname></affiliation>
			</othercredit>
		</authorgroup>

		<pubdate>1998</pubdate>

		<copyright>
			<year>2011</year>
			<year>2006</year>
			<holder>The TenDRA Project</holder>
		</copyright>

		<copyright>
			<!--
				I'm assuming this is copyright to Rob personally, as he
				says his TenDRA homepage (from which this text is taken)
				is unofficial.
			-->
			<!-- Crown Copyright (c) 1998 -->
			<year>1998</year>
			<holder>Rob Andrews</holder>
		</copyright>

		<revhistory>
			<revision role="docs">
				<date>2006-09-12</date>
				<authorinitials>kate</authorinitials>
				<revdescription>
					<para>Added suite purpose overview verbatim from Rob
						Andrews's unofficial TenDRA homepage.</para>
				</revdescription>
			</revision>

			<revision role="version">
				<!-- TODO: date? -->
				<date>1998</date>
				<authorinitials>ra</authorinitials>
				<revdescription>
					<para>Initial revision.</para>
				</revdescription>
			</revision>
		</revhistory>
	</articleinfo>

	<section id="what-is-tdf">
		<title>What is TDF?</title>

		<para>TDF (standing for TenDRA Distribution Format) is the compiler
			intermediate language, which lies at the heart of the TenDRA technology.
			Unlike most intermediate languages, which tend to be abstractions of
			assembler languages, TDF is an abstraction of high level languages. The
			current release is based on TDF Issue 4.0, with experimental extensions
			to handle debugging in languages such as C++ and Ada (these extensions
			are not used by default).</para>

		<para>The &tdf-spec.doc; gives a technical description of the TDF language.
			This is supplemented by the &tdf-diag.doc;. This is an extension to the core TDF
			specification, which describes how information sufficient to allow for
			the debugging of C programs can be embedded into a TDF capsule (it is
			this that the experimental extensions mentioned above are intended to
			replace).</para>

		<para>The companion document, &tdf-register.doc;, describes the globally
			reserved, &ldquo;standard tokens&rdquo;.</para>

		<para>The <ulink url="guide.html">Guide to the TDF specification</ulink>
			gives an overview and commentary on the TDF language, explaining some of
			the more difficult concepts.</para>

		<para>For those who know a bit of history, TDF was the technology adopted
			by OSF as their ANDF (Architecture Neutral Distribution Format), and TDF
			Issue 4.0 (Revision 1) is the base document for The Open Group XANDF
			standard. Thus the terms TDF, ANDF and XANDF are largely synonymous; TDF
			is used in documentation since it is the term closest to our
			hearts.</para>
	</section>

	<section id="what-is-tendra">
		<title>What is TenDRA?</title>

		<para>TenDRA is the name of the compiler technology built around the TDF
			intermediate language. The design and intended uses of TDF have affected
			how the TenDRA technology has developed. For example, the original
			emphasis of OSF's ANDF concept was on distribution, but this begged the
			question about program portablility. The current TenDRA technology is
			far more about portability than it is about distribution, although TDF
			could still be used as a distribution format.</para>

		<para>The rigid enforcement of an interface level between the compiler
			front-ends and the compiler back-ends, and the goal of producing target
			independent TDF (suitable for distribution) have produced a flexible,
			clean compiler technology. It has pulled many of the questions about
			program portability into sharp focus in a way that a more conventional
			compiler could not.</para>
	</section>

	<section id="using-the-tendra-compiler">
		<title>Using the TenDRA Compiler</title>

		<para>The main user interface to the TenDRA compiler, &tcc;,
			can be used as a direct replacement for the system compiler, &cc;.
			This is described in the &tcc-userguide.doc;.</para>

		<para>There is an alternative user interface, &tchk;,
			which just applies the static program checks and disables code
			generation. Thus &tchk; corresponds to &lint; in the same way that
			&tcc; corresponds to &cc;.</para>

		<para>The chief difference between &tcc; and other
			compilers is it the degree of preciseness it requires in specifying the
			compilation environment. This environment consists of two, largely
			orthogonal, components: the language checks to be applied, and the API
			to be checked against. For example, the <code>-Xc</code> option
			specifies ISO C with no extensions and no extra checks, the
			<code>-Xa</code> option specifies ISO C with common extensions, and
			<code>-Xs</code> specifies ISO C with no extensions and lots of extra
			checks. Similarly <code>-Yc89</code> specifies the ANSI C89 API (excluding
			Amendment 1), <code>-Yposix</code> specifies the POSIX 1003.1 API etc.
			It is also possible to make <application>tcc</application> use the system
			headers on the host machine by the use of the <code>-Ysystem</code>
			option. The <code>-Yc++</code> option is required to enable the C++
			facilities. The default mode is equivalent to <code>-Xc
			-Yc89.</code></para>

		<para>How to configure the C compiler checks is described in more detail
			in the &tchk.doc;.
			The extra checks available in C++ are described in the
			&tcpplus-userguide.doc;.</para>
	</section>

	<section id="tdf-producers">
		<title>TDF Producers</title>

		<para>A tool which compiles a high-level language to TDF, is called a
			<firstterm>producer</firstterm>. The TenDRA software contains producers
			for the C and C++ languages. The original TenDRA C producer
			(<application>tdfc</application>) has now been superseded by a new C producer
			(<application>tdfc2</application>) based on the C++ producer
			(<application>tcpplus</application>).</para>

		<para>The design of both producers has been guided by the goal of trying
			to ensure program portability by means of static program analysis. Some
			thoughts on this subject are set out in the document
			&tdf-portability.doc;.</para>

		<para>The first component of this is by ensuring that the language
			implemented by the producer accurately reflects the corresponding
			language standard (ISO C, including Amendment 1, or the draft ISO C++
			standard). The producers both include references to the standards
			documents within their error messages, so that a specific error can be
			tied to a specific clause within the standard. The producers have been
			tested using both the Plum Hall and Perennial C and C++ compiler
			validation suites.</para>

		<para>The C++ producer implements most of the language sections of the
			November 1997 draft ISO C++ standard. The known problem areas
			are:</para>

		<itemizedlist>
			<listitem>
				<para>Automatic inter-module instantiation of templates is not yet
					fully implemented.</para>
			</listitem>

			<listitem>
				<para>The current implementation of exception handling is not optimal
					with respect to performance.</para>
			</listitem>

			<listitem>
				<para>Temporaries are not always destroyed in precisely the right
					place.</para>
			</listitem>

			<listitem>
				<para>Partially constructed objects are not destroyed properly.</para>
			</listitem>

			<listitem>
				<para>The visibility of <application>friend</application> functions is not
					right.</para>
			</listitem>
		</itemizedlist>

		<para>(<code>&lt;new&gt;</code>, <code>&lt;typeinfo&gt;</code> and
			<code>&lt;exception&gt;</code>) have been implemented.
			If a complete implementation of the standard C++ library is required,
			it must be obtained from elsewhere.
			See the &tcpplus-userguide.doc; for more details.</para>
	</section>

	<section id="tdf-installers">
		<title>TDF Installers</title>

		<para>A tool which compiles TDF to a machine language, is called an
			<firstterm>installer</firstterm>. TDF installers for a number of Unix
			systems and processors are included within the release
			<!-- TODO: url to wiki suppot matrix -->
			(see the list of <ulink url="install.html#platforms">supported platforms</ulink>).
			Each installer consists of code from three levels:</para>

		<orderedlist>
			<listitem>
				<para>Code which is common to all installers. A large portion of each
					installer is derived from a common section, which reads the input
					TDF capsule and applies various TDF -&gt; TDF transformations to
					optimise the code. Each installer has a configuration file which
					indicates which of these transformations are appropriate to its
					particular processor.</para>
			</listitem>

			<listitem>
				<para>Code which is specific to a particular processor. Each installer
					also has some processor-specific code, which applies optimisations
					and other transformations, which are too tied to a particular
					processor to warrant inclusion in the common section. This section
					also includes register allocation.</para>
			</listitem>

			<listitem>
				<para>Code which is specific to a particular processor/operating
					system pair. Even within the installers for a single processor,
					there may be differences between different operating systems. These
					differences are usually cosmetic, such as the precise assembler
					format etc. of reliability and performance tuning, due to the
					differing priorities in building up an installer base. The Intel
					and SPARC installers are the most reliable and have been subject
					to the most performance tuning.</para>
			</listitem>
		</orderedlist>

		<para>All the installers fully support the C subset of TDF (i.e. code
			generated by the C producer). The Mips/Ultrix installer does not support
			the <code>initial_value</code> construct (used in dynamic
			initialisation), but otherwise all the installers fully support the C++
			subset. The Intel and SPARC installers fully support the entire TDF
			specification, as checked by the OSF AVS (ANDF Validation Suite).</para>
	</section>

	<section id="tdf-tools">
		<title>TDF Tools</title>

		<para>There are various tools included within the software for viewing,
			generating and transforming TDF.
			<command>tspec</command> excepted, the use of these components is
			integrated into the user interface, &tcc;,
			but they may also be called directly.</para>

		<variablelist>
			<varlistentry>
				<term>&tspec;</term>

				<listitem>
					<para>The API checking facilities of the TenDRA compiler are
						implemented by means of abstract interface specifications
						generated using the &tspec; tool.</para>

					<para>This tool and specifications for a number of common APIs are
						included with the release. Part of the installation process
						consists of pre-compiling the implementations of those APIs
						implemented on the target machine into TDF libraries. This
						is performed automatically using &tcc; to
						combine the &tspec; specification with
						the implementation given in the system headers.

					<!-- TODO see also: user/guides/tspec --></para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&tld;</term>

				<listitem>
					<para>&tld; is the TDF linker.
						It combines a number of TDF capsules into a single capsule.
						It also can be used to create and manipulate libraries
						of TDF capsules.</para>

					<para>This functionality is provided by &tcc;, but &tld; may be
						called directly.</para>

					<!-- TODO see also: user/guides/tld -->
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&disp;</term>

				<listitem>
					<para>&disp; is the TDF pretty printer.
						It translates the bitstream comprising a TDF capsule
						into a human readable form.</para>

					<para>This functionality is provided by &tcc;, but &disp;
						may be called directly.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&tnc;</term>

				<listitem>
					<para>&tnc; is the TDF notation compiler.
						It acts as a sort of TDF &ldquo;unstructured assembler&rdquo;,
						and can translate TDF capsules to and from a human readable
						form.</para>

					<para>This functionality is provided by &tcc;, but &tnc; may be
						called directly.</para>

					<!-- TODO see also: user/guides/tnc -->
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&tpl;</term>

				<listitem>
					<para>&tpl; is the PL_TDF compiler.
						It is a TDF &ldquo;structured assembler&rdquo; in the lineage of PL360.
						&tpl; provides a more user-friendly way of generating TDF
						capsules from scratch than that offered by &tnc;.</para>

					<para>This functionality is provided by &tcc;, but &tpl; may be
						called directly.</para>

					<!-- TODO see also: user/guides/tnc -->
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="compiler-writing-tools">
		<title>Compiler Writing Tools</title>

		<para>A number of compiler writing tools, which were used in the
			development of the TenDRA compiler technology are also bundled with the
			TenDRA software release. These include the following:</para>

		<!-- TODO: glossary or bibliography
		<variablelist>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
				href="../../glossary/entries/sid.xml"/>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
				href="../../glossary/entries/calculus.xml"/>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
				href="../../glossary/entries/make_tdf.xml"/>
			TODO: and make_err, lexi
		</variablelist>
		-->
	</section>
</article>

