<!DOCTYPE BOOK PUBLIC "-//FreeBSD//DTD DocBook V4.1-Based Extension//EN">

<book>
  <bookinfo>
    <title>tcc User's Guide</title>
    <pubdate>$TenDRA$</pubdate>
    <corpauthor>The TenDRA Documentation Team</corpauthor>
    <copyright>
      <year>2002</year>
      <holder>TenDRA Documentation Team</holder>
    </copyright>
    <copyright>
      <year>1997</year>
      <year>1998</year>
      <holder>Defence Evaluation and Research Agency (DERA)</holder>
    </copyright>
    <abstract>
      <para>Please email us at <email>docs@ten15.org</email> if you see any errors</para>
    </abstract>
  </bookinfo>

  <chapter id="C1">
    <title>The Function of tcc</title>

    <sect1 id="S1">
      <title>The Function of tcc</title>

      <para>Like most compilation systems, the TDF C system consists
        of a number of components which transform or combine various
        types of input files into output files. <command>tcc</command>
        is designed to be a compilation manager, coordinating these
        various components into a coherent compilation scheme. It is
        also the normal user's interface to the TDF system on Unix
        machines: direct use of the various components of the system
        is not recommended. Therefore it is worth familiarising
        oneself with <command>tcc</command> before attempting to use
        the TDF system.  To aid this familiarisation
        <command>tcc</command> has been designed to have the same look
        and feel as the system C compiler <command>cc</command>, but
        with added functionality to deal with the additional features
        of the TDF system.  This does not mean that
        <command>tcc</command> can be necessarily regarded as a direct
        replacement for <command>cc</command> ; the extra portability
        checks performed by the TDF system require the precise
        compilation environment to be specified to
        <command>tcc</command> in a way that it cannot be to
        <command>cc</command>.</para>

      <para>There are two basic components to this paper. The first
        describes the TDF compilation strategy and how it is
        implemented by <command>tcc</command>.  The second is a Quick
        Reference section at the end of the paper, which is intended
        to be a <command>tcc</command> user's manual. For even quicker
        reference, <command>tcc</command> will print a list of all its
        command-line options (with a brief description) if invoked
        with the <option>-query</option> option.</para>
    </sect1>
  </chapter>

  <chapter id="C2">
    <title>The TDF Compilation Strategy</title>

      <figure id="trad-scheme">
        <title>Traditional Compilation Path</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="trad_scheme" format="PNG">
          </imageobject>
        </mediaobject>
      </figure>

    <para>Before discussing <command>tcc</command> itself in detail,
      it is necessary to explain the compilation strategy that it is
      designed to implement.  This was discussed at length in [1]
      and is summarised in Fig. 2, which is taken from that paper.
      Readers are urged to consult [1].</para>

      <figure id="tdf-scheme">
        <title>TDF Compilation Path</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="tdf_scheme" format="PNG">
          </imageobject>
        </mediaobject>
      </figure>
  </chapter>

  <chapter id="C3">
    <title>The Overall Design of tcc</title>

    <para>Having discussed the compilation strategy
      <command>tcc</command> is designed to implement, let us move
      on to describe the details of this implementation.  The basic
      compilation path is shown in Fig.  3, which corresponds to
      Fig. 2.</para>

      <figure id="tcc-scheme">
        <title>Basic tcc Compilation Path</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="tcc_scheme" format="PNG">
          </imageobject>
        </mediaobject>
      </figure>

    <sect1 id="S3">
      <title>Specifying the API</title>

      <para>As we have seen, the API plays a far more concrete role in
        the TDF compilation strategy than in the traditional scheme.
        Therefore the API needs to be explicitly specified to
        <command>tcc</command> before any compilation takes place. As
        can be seen from Fig. 3, the API has three components.
        Firstly, in the target independent (or production) half of the
        compilation, there are the target independent headers which
        describe the API. Secondly in the target dependent (or
        installation) half, there is the API implementation for the
        particular target machine.  This is divided between the TDF
        libraries, derived from the system headers, and the system
        libraries. Specifying the API to <command>tcc</command>
        essentially consists of telling it what target independent
        headers, TDF libraries and system libraries to use. The
        precise way in which this is done is discussed below (in
        section 4.3).</para>
    </sect1>

    <sect1 id="S4">
      <title>The Main Compilation Path</title>

      <para>Once the API has been specified, the actual compilation
         can begin.  The default action of <command>tcc</command> is
         to perform production and installation consecutively on the
         same machine; any other action needs to be explicitly
         specified. So let us describe the entire compilation path
         from C source to executable shown in Fig. 3.</para>

      <orderedlist>
        <listitem>
          <para>The first stage is production. The C --&gt; TDF
            producer transforms each input C source file into a target
            independent TDF capsule, using the target independent
            headers to describe the API in abstract terms.  These
            target independent capsules will contain tokens to
            represent the uses of objects from the API, but these
            tokens will be left undefined.</para>
        </listitem>

        <listitem>
          <para>The second stage, which is also the first stage of the
            installation, is TDF linking. Each target independent
            capsule is combined with the TDF library describing the
            API implementation to form a target dependent TDF capsule.
            Recall that the TDF libraries contain the local
            definitions of the tokens left undefined by the producer,
            so the resultant target dependent capsule will contain
            both the uses of these tokens and the corresponding token
            definitions.</para>
        </listitem>

        <listitem>
          <para>The third stage of the compilation is for the TDF
            translator to transform each target dependent TDF capsule
            into an assembly source file for the appropriate target
            machine. Some TDF translators output not an assembly
            source file, but a binary object file. In this case the
            following assembler stage is redundant and the compilation
            skips to the system linking.</para>

        <listitem>
          <para>The next stage of the compilation is for each assembly
            source file to be translated into a binary object file by
            the system assembler.</para>
        </listitem>

        <listitem>
          <para>The final compilation phase is for the system linker
            to combine all the binary object files with the system
            libraries to form a single, final executable. Recall that
            the system libraries are the final constituent of the API
            implementation, so this stage completes the combination of
            the program with the API implementation started in stage
            2).</para>
        </listitem>
      </orderedlist>

      <para>Let us, for convenience, tabulate these stages, giving the
        name of each compilation tool (plus the corresponding
        executable name), a code letter which <command>tcc</command>
        uses to refer to this stage, and the input and output file
        types for the stage (also see 7.2).

        <informaltable frame="all">
          <tgroup cols="5" align="left" colsep="1" rowsep="1">
            <thead>
              <row>
                <entry>Number</entry>
                <entry>Tool</entry>
                <entry>Letter</entry>
                <entry>Input</entry>
                <entry>Output</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>1</entry>
                <entry>C producer (tdfc)</entry>
                <entry>c</entry>
                <entry>C source</entry>
                <entry>target ind. TDF</entry>
              </row>

              <row>
                <entry>2</entry>
                <entry>TDF linker (tld)</entry>
                <entry>L</entry>
                <entry>target ind. TDF</entry>
                <entry>target dep. TDF</entry>
              </row>

              <row>
                <entry>3</entry>
                <entry>TDF translator (trans)</entry>
                <entry>t</entry>
                <entry>target dep. TDF</entry>
                <entry>assembly source</entry>
              </row>

              <row>
                <entry>4</entry>
                <entry>assembler (as)</entry>
                <entry>a</entry>
                <entry>assembly source</entry>
                <entry>binary object</entry>
              </row>

              <row>
                <entry>5</entry>
                <entry>system linker (ld)</entry>
                <entry>l</entry>
                <entry>binary object</entry>
                <entry>executable</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        The executable name of the TDF translator varies, depending on
        the target machine. It will normally start, or end, however, in
        <command>trans</command>.  These stages are documented in more
        detail in sections 5.1 to 5.5.</para>

      <para>The code letters for the various compilation stages can be
        used in the <option>-W</option><option>tool</option><option>,
        </option><option>opt</option><option>,</option> ...
        command-line option to <command>tcc</command>. This passes the
        option(s) <option>opt</option> directly to the executable in
        the compilation stage identified by the letter
        <option>tool</option>. For example, <option>-Wl, -x</option>
        will cause the system linker to be invoked with the
        <option>-x</option> option. Similarly the
        <option>-E</option><option>tool</option><option>:
        </option><option>file</option> allows the executable to be
        invoked at the compilation stage <option>tool</option> to be
        specified as <option>file</option>. This allows the
        <command>tcc</command> user access to the compilation tools in
        a very direct manner.</para>
    </sect1>

    <sect1 id="S5">
      <title>Input File Types</title>

      <para>This compilation path may be joined at any point, and
        terminated at any point. The latter possibility is discussed
        below. For the former, <command>tcc</command> determines, for
        each input file it is given, to which of the file types it
        knows (C source, target independent TDF, etc.) this file
        belongs. This determines where in the compilation path
        described this file will start. The method used to determine
        the type of a file is the normal filename suffix
        convention:

        <itemizedlist>
          <listitem>
            <para>files ending in <command>.c</command> are understood
              to be C source files,</para>
          </listitem>

          <listitem>
            <para>files ending in <command>.j</command> are understood
              to be target independent TDF capsules,</para>
          </listitem>

          <listitem><para>files ending in <command>.t</command> are
            understood to be target dependent TDF capsules,</para>
          </listitem>

          <listitem><para>files ending in <command>.s</command> are
            understood to be assembly source files,</para>
          </listitem>

          <listitem><para>files ending in <command>.o</command> are
            understood to be binary object files,</para>
          </listitem>

          <listitem><para>files whose type cannot otherwise be
            determined are assumed to be binary object files,</para>
          </listitem>
        </itemizedlist>

        (for a complete list see 7.1). Thus, for example, we speak
        of &quot;<command>.j</command> files&quot; as a shorthand for
        &quot;target independent TDF capsules&quot;. Each file type
        recognised by <command>tcc</command> is assigned an
        identifying letter. For convenience, this corresponds to the
        suffix identifying the file type (<command>c</command> for C
        source files, <command>j</command> for target independent TDF
        capsules etc.).</para>

      <para>There is an alternative method of specifying input files,
        by means of the
        <option>-S</option><option>type</option><option>,
        </option><option>file</option><option>,</option> ...
        command-line option. This specifies that the file
        <option>file</option> should be treated as an input file of
        the type corresponding to the letter <option>type</option>,
        regardless of its actual suffix. Thus, for example,
        <option>-Sc,</option> <option>file</option> specifies that
        <option>file</option> should be regarded as a C source (or
        <command>.c</command>) file.</para>
    </sect1>

    <sect1 id="S6">
      <title>Intermediate and Output Files</title>

      <para>During the compilation, <command>tcc</command> makes up
        names for the output files of each of the compilation phases.
        These names are based on the input file name, but with the
        input file suffix replaced by the output file suffix (unless
        the <option>-make_up_names</option> command-line option is
        given, in which case the intermediate files are given names of
        the form <command>_tccnnnn.x</command>, where
        <command>nnnn</command> is a number which is incremented for
        each intermediate file produced, and <command>x</command> is
        the suffix corresponding to the output file type). Thus if the
        input file <command>file.c</command> is given, this will be
        transformed into <command>file.j</command> by the producer,
        which in turn will be transformed into
        <command>file.t</command> by the TDF linker, and so on. The
        system linker output file name can not be deduced in the same
        way since it is the result of linking a number of
        <command>.o</command> files. By default, as with
        <command>cc</command>, this file is called <command>a.out
        </command>.</para>

      <para>For most purposes these intermediate files are not
        required to be preserved; if we are compiling a single C
        source file to an executable, then the only output file we are
        interested in is the executable, not the intermediate files
        created during the compilation process.  For this reason
        <command>tcc</command> creates a temporary directory in which
        to put these intermediate files, and removes this directory
        when the compilation is complete. All intermediate files are
        put into this temporary directory except:

        <itemizedlist>
          <listitem><para>those which are an end product of the
            compilation (such as the executable),</para>
          </listitem>

          <listitem><para>those which are explicitly ordered to be
            preserved by means of command-line options,</para>
          </listitem>

          <listitem><para>binary object files, when more than one such
            file is produced (this is for compatibility with
            <command>cc</command>).</para>
          </listitem>
        </itemizedlist>

      <command>tcc</command> can be made to preserve intermediate
      files of various types by means of the
      <option>-P</option><option>type</option>... command-line option,
      which specifies a list of letters corresponding to the file
      types to be preserved. Thus for example <option>-Pjt</option>
      specifies that all TDF capsules produced, whether target
      independent or target dependent, (i.e. all <command>.j</command>
      and <command>.t</command> files) should be preserved.  The
      special form <option>-Pa</option> specifies that all
      intermediate files should be preserved. It is also possible to
      specify that a certain file type should not be preserved by
      preceding the corresponding letter by <option>-</option> in the
      <option>-P</option> option.  The only really useful application
      of this is to use <option>-P-o</option> to cancel the
      <command>cc</command> convention on preserving binary object
      files mentioned above.</para>

      <para>By default, all preserved files are stored in the current
        working directory. However the <option>-work</option>
        <option>dir</option> command-line option specifies that they
        should be stored in the directory <option>dir</option>.</para>

      <para>The compilation can also be halted at any stage. The
        <option>-F</option><option>type</option> option to
        <command>tcc</command> tells it to stop the compilation after
        creating the files of the type corresponding to the letter
        <option>type</option>.  Because any files of this type which
        are produced will be an end product of the compilation, they
        will automatically be preserved. For example,
        <option>-Fo</option> halts the compilation after the creation
        of the binary object, or <command>.o</command>, files (i.e.
        just before the system linking), and preserves all such files
        produced. A number of other <command>tcc</command> options are
        equivalent to options of the form
        <option>-F</option><option>type</option>:

        <itemizedlist>
          <listitem><para><option>-i</option> is equivalent to
            <option>-Fj</option> (i.e. just apply the producer),</para>
          </listitem>

          <listitem><para><option>-S</option> is equivalent to
            <option>-Fs</option> (<command>cc</command>
            compatibility),</para>
          </listitem>

          <listitem><para><option>-c</option> is equivalent to
            <option>-Fo</option> (<command>cc</command>
            compatibility).</para>
          </listitem>
        </itemizedlist>

        If more than one <option>-F</option> option (including the
        equivalent options just listed) is given, then
        <command>tcc</command> issues a warning. The stage coming
        first in the compilation path takes priority.</para>

      <para>If the compilation has precisely one end product output
        file, then the name of this file can be specified to be
        <option>file</option> by means of the <option>-o</option>
        <option>file</option> command-line option. If a
        <option>-o</option> <option>file</option> option is given
        when there is more than one end product, then the first such
        file produced will be called <option>file</option>, and all
        such files produced subsequently will cause
        <command>tcc</command> to issue a warning.</para>

      <figure id="fcc-files">
        <title>Full tcc Compilation Path</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="tcc_files" format="PNG">
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>

    <sect1 id="S7">
      <title>Other Compilation Paths</title>

      <para>So far we have been discussing the main
        <command>tcc</command> compilation path from C source to
        executable. This is however only part of the picture. The full
        complexity (almost) of all the possible compilation paths
        supported by <command>tcc</command> is shown in Fig. 4. This
        differs from Fig. 3 in that it only shows the left hand, or
        program, half of the main compilation diagram. The solid
        arrows show the default compilation paths; the shaded arrows
        are only followed if <command>tcc</command> is so instructed
        by means of command-line options. Let us consider those paths
        in this diagram which have not so far been mentioned.</para>

      <sect2 id="S8">
        <title>Preprocessing</title>

        <para>The first paths to be considered involve preprocessed C
          source files.  These form a distinct file type which
          <command>tcc</command> recognises by means of the
          <command>.i</command> file suffix. Input
          <command>.i</command> files are treated in exactly the same
          way as <command>.c</command> files; that is, they are fed
          into the producer.</para>

        <para><command>tcc</command> can be made to preprocess the C
          source files it is given by means of the <option>-P</option>
          and <option>-E</option> options. If the <option>-P</option>
          option is given then each <command>.c</command> file is
          transformed into a corresponding <command>.i</command> file
          by the TDF C preprocessor, <command>tdfcpp </command>. If
          the <option>-E</option> option is given then the output of
          <command>tdfcpp</command> is sent instead to the standard
          output. In both cases the compilation halts after the
          preprocessor has been applied. Preprocessing is discussed
          further in section 5.6.</para>
      </sect2>

      <sect2 id="S9">
        <title>TDF Archives</title>

        <para>The second new file type introduced in Fig. 4 is the TDF
          archive.  This is recognised by <command>tcc</command> by
          means of the <command>.ta</command> file suffix. Basically a
          TDF archive is a set of target independent TDF capsules
          (this is slightly simplified, see section 5.2.3 for more
          details). Any input TDF archives are automatically split
          into their constituent target independent capsules. These
          then join the main compilation path in the normal way.</para>

        <para>In order to create a TDF archive, <command>tcc</command>
          must be given the <option>-prod</option> command-line
          option. It will combine all the target independent TDF
          capsules it has into an archive, and the compilation will
          then halt. By default this archive is called
          <command>a.ta</command>, but another name may be specified
          using the <option>-o</option> option.</para>

        <para>The routines for splitting and building TDF archives are
          built into <command>tcc</command>, and are not implemented
          by a separate compilation tool (in particular, TDF archives
          are not <command>ar</command> archives).  Really TDF
          archives are a <command>tcc</command>-specific construction;
          they are not part of TDF proper.</para>
      </sect2>

      <sect2 id="S10">
        <title>TDF Notation</title>

        <para>TDF has the form of an abstract syntax tree which is
          encoded as a series of bits. In order to examine the
          contents of a TDF capsule it is necessary to translate it
          into an equivalent human readable form. Two tools are
          provided which do this. The TDF pretty printer,
          <command>disp</command>, translates TDF into text, whereas
          the TDF notation compiler, <command>tnc</command>, both
          translates TDF to text and text to TDF. The two textual
          forms of TDF are incompatible - <command>disp</command>
          output cannot be used as <command>tnc</command> input.
          <command>disp</command> is in many ways the more
          sophisticated decoder - it understands the TDF extensions
          used to handle diagnostics, for example - but it does not
          handle the text to TDF translation which
          <command>tnc</command> does.  By default
          <command>tnc</command> is a text to TDF translator, it needs
          to be passed the <option>-p</option> flag in order to
          translate TDF into text.  We refer to the textual form of
          TDF supported by <command>tnc</command> as TDF
          notation.</para>

        <para>By default, <command>tcc</command> uses
          <command>disp</command>. If it is given the
          <option>-disp</option> command-line option then all target
          independent TDF capsules (<command>.j</command> files) are
          transformed into text using <command>disp </command>. The
          <option>-disp_t</option> option causes all target dependent
          TDF capsules (<command>.t</command> files) to be transformed
          into text. In both cases the output files have a
          <command>.p</command> suffix, and the compilation halts
          after they are produced.</para>

        <para>In order for <command>tnc</command> to be used, the
          <option>-Ytnc</option> flag should be passed to
          <command>tcc</command>. In this case the
          <option>-disp</option> and the <option>-disp_t</option>
          option cause, not <command>disp</command>, but
          <command>tnc</command> <option>-p</option>, to be invoked.
          But this flag also causes <command>tcc</command> to
          recognise files with a <command>.p</command> suffix as TDF
          notation source files. These are translated by
          <command>tnc</command> into target independent TDF capsules,
          which join the main compilation path in the normal
          way.</para>

        <para>Similarly if the <option>-Ypl_tdf</option> flag is
          passed to <command>tcc</command> then it recognises files
          with a <command>.pl</command> suffix as PL_TDF source files.
          These are translated by the PL_TDF compiler,
          <command>pl</command>, into target independent TDF
          capsules.</para>

        <para><command>disp</command> and <command>tnc</command> are
          further discussed in section 5.7.</para>
      </sect2>

      <sect2 id="S11">
        <title>Merging TDF Capsules</title>

        <para>The final unexplored path in Fig. 4 is the ability to
          combine all the target independent TDF capsules into a
          single capsule. This is specified by means of the
          <option>-M</option> command-line option to
          <command>tcc</command>.  The combination of these capsules
          is performed by the TDF linker, <command>tld</command>.
          Whereas in the main compilation path <command>tld</command>
          is used to combine a single target independent TDF capsule
          with the TDF libraries to form a target dependent TDF
          capsule, in this case it is used to combine several target
          independent capsules into a single target independent
          capsule. By default the combined capsule is called
          <command>a.j</command>. The compilation will continue after
          the combination phase, with the resultant capsule rejoining
          the main compilation path.  This merging operation is
          further discussed in section 5.2.2.</para>

        <para>The only unresolved issue in this case is, if the
          <option>-M</option> option is given, to what
          <command>.j</command> files do the <option>-Fj</option> and
          the <option>-Pj</option> options refer? In fact,
          <command>tcc</command> takes them to refer to the merged TDF
          capsule rather than the capsules which are merged to form
          it. The <option>-Pa</option> option, however, will cause
          both sets of capsules to be preserved.</para>

        <para>To summarise, <command>tcc</command> has an extra three
          file types, and an extra three compilation tools (not
          including the TDF archive creating and splitting routines
          which are built into <command>tcc</command>). These
          are:

          <itemizedlist>
            <listitem><para>files ending in <command>.i</command> are
              understood to be preprocessed C source files,</para>
            </listitem>

            <listitem><para>files ending in <command>.ta</command> are
              understood to be TDF archives,</para>
            </listitem>

            <listitem><para>files ending in <command>.p</command> are
              understood to be TDF notation source files,</para>
            </listitem>
          </itemizedlist>

          and:

          <informaltable>
            <tgroup cols="5" align="left" colsep="1" rowsep="1">
              <thead>
                <row>
                  <entry>Number</entry>
                  <entry>Tool</entry>
                  <entry>Letter</entry>
                  <entry>Input</entry>
                  <entry>Output</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>6</entry>
                  <entry>C preprocessor (tdfcpp)</entry>
                  <entry>c</entry>
                  <entry>C source</entry>
                  <entry>preproc. C source</entry>
                </row>

                <row>
                  <entry>7a</entry>
                  <entry>pretty printer (disp)</entry>
                  <entry>d</entry>
                  <entry>TDF capsule</entry>
                  <entry>TDF notation</entry>
                </row>

                <row>
                  <entry>7b</entry>
                  <entry>reverse notation (tnc -p)</entry>
                  <entry>d</entry>
                  <entry>TDF capsule</entry>
                  <entry>TDF notation</entry>
                </row>

                <row>
                  <entry>8</entry>
                  <entry>notation compiler (tnc)</entry>
                  <entry>d</entry>
                  <entry>TDF notation</entry>
                  <entry>TDF capsule</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          (see 7.1 and 7.2 for complete lists).</para>
      </sect2>
    </sect1>

    <sect1 id="S12">
      <title>Finding out what tcc is doing</title>

      <para>With so many different file types and alternative
        compilation paths, it is often useful to be able to keep track
        of what <command>tcc</command> is doing. There are several
        command-line options which do this. The simplest is
        <option>-v</option> which specifies that
        <command>tcc</command> should print each command in the
        compilation process on the standard output before it is
        executed. The <option>-vb</option> option is similar, but only
        causes the name of each input file to be printed as it is
        processed.  Finally the <option>-dry</option> option specifies
        that the commands should be printed (as with
        <option>-v</option>) but not actually executed. This can be
        used to experiment with <command>tcc</command> to find out
        what it would do in various circumstances.</para>

      <para>Occasionally an unclear error message may be printed by
        one of the compilation tools. In this case the
        <option>-show_errors</option> option to <command>tcc</command>
        might be useful. It causes <command>tcc</command> to print the
        command it was executing when the error occurred. By default,
        if an error occurs during the construction of an output file,
        the file is removed by <command>tcc</command>. It can however
        be preserved for examination using the
        <option>-keep_errors</option> option. This applies not only to
        normal errors, but also to exceptional errors such as the user
        interrupting <command>tcc</command> by pressing
        <command>^C</command>, or one of the compilation tools
        crashing. In the latter case, <command>tcc</command> will also
        remove any core file produced, unless the
        <option>-keep_errors</option> option is specified.</para>

      <para>For purposes of configuration control, the
        <option>-version</option> flag will cause
        <command>tcc</command> to print its version number. This will
        typically be of the form:

        <screen>
          tcc: Version: 4.0, Revision: 1.5, Machine: hp
        </screen>

        giving the version and revision number, plus the target
        machine identifier.  The <option>-V</option> flag will also
        cause each compilation tool to print its version number (if
        appropriate) as it is invoked.<para>
    </sect1>
  </chapter>

  <chapter id="C4">
    <title>tcc Environments</title>

    <para>In addition to command-line options, there is a second
      method of specifying <command>tcc</command>'s behaviour, namely
      <command>tcc</command> environments.  An environment is just a
      file consisting of lines of the form:

      <screen>
  	*IDENTIFIER &quot;text&quot;
      </screen>

      where <command>*</command> stands for one of the environment
      prefixes, <command>+</command>, <command>&lt;</command> and
      <command>&gt;</command> (in fact <command>?</command> is also a
      valid environment prefix. It is used to query the values
      represented by environmental identifiers.  If <command>tcc
      </command> is invoked with the <option>-Ystatus</option>
      command-line option it will print the values of all the
      environmental identifiers it recognises).  Any line in the
      environment not beginning with one of these characters is
      ignored. <command>IDENTIFIER</command> will be one of the
      environmental identifiers recognised by <command>tcc</command>,
      the environment prefix will tell <command>tcc</command> how to
      modify the value given by this identifier, and
      <command>text</command> what to modify it by.</para>

    <para>The simplest environmental identifiers are those which are
      used to pass flags to <command>tcc</command> and the various
      components of the compilation system. The line:

      <screen>
  	+FLAG &quot;text&quot;
      </screen>

      causes <command>text</command> to be interpreted by
      <command>tcc</command> as if it was a command-line option.
      Similarly:

      <screen>
  	+FLAG_TDFC &quot;text&quot;
      </screen>

      causes <command>text</command> to be passed as an option to
      <command>tdfc</command>.  There are similar environmental
      identifiers for each of the components of the compilation system
      (see 7.6 for a complete list).</para>

      <para>The second class of environmental identifiers are those
      corresponding to simple string variables. Only the form:

      <screen>
  	+IDENTIFIER &quot;text&quot;
      </screen>

      is allowed. This will set the corresponding variable to
      <command>text</command>.  The permitted environmental
      identifiers and the corresponding variables are:

      <screen>
      <command>ENVDIR</command>  the default environments directory
      (see section 4.1),
  	MACHINE		the target machine type (see section 4.2),
  	PORTABILITY	the producer portability table (see section 5.1.3),
  	TEMP		the default temporary directory (see section 6.4),
  	VERSION		the target machine version (Mips only, see section 5.3.4).
      </screen>
    </para>

    <para>The final class of environmental identifiers are those
      corresponding to lists of strings. Firstly
      <command>text</command> is transformed into a list of strings, b
      say, by splitting at any spaces, then the list corresponding to
      the identifier, a say, is modified by this value.  How this
      modification is done depends on the environment prefix:

      <itemizedlist>
        <listitem><para>if the prefix is <command>+</command> then a = b,</para>
        <listitem><para>if the prefix is <command>&gt;</command> then a = a + b,</para>
        <listitem><para>if the prefix is <command>&lt;</command> then a = b + a,</para>
      </itemizedlist>
  
      where + denotes concatenation of lists. The lists represented in this
      way include those giving the pathnames of the executables of the various
      compilation components (plus default flags). These are given by the
      identifiers <command>TDFC</command>, <command>TLD</command>, etc. (see 7.6 for
      a complete list). The other lists can be divided between those affecting
      the producer, the TDF linker, and the system linker respectively (see
      sections 5.1, 5.2 and 5.5 for more details):
  
        <screen>
    	INCL		list of default producer include file directories (as <option>-I</option> options),
    	STARTUP		list of default producer start-up files (as <option>-f</option> options),
    	STARTUP_DIR	list of default producer start-up directories (as <option>-I</option> options),
  
    	LIB		list of default TDF libraries (as <option>-l</option> options),
    	LINK		list of default TDF library directories (as <option>-L</option> options),
  
    	CRT0		list of default initial .o files,
    	CRT1		second list of default initial .o files,
    	CRTN		list of default final .o files,
    	SYS_LIB		list of default system libraries (as <option>-l</option> options),
    	SYS_LIBC	list of default standard system libraries (as <option>-l</option> options),
    	SYS_LINK	list of default system library directories (as <option>-L</option> options).
        </screen>
      </para>
  
    <sect1 id="S14">
      <title>The Environment Search Path</title>
  
      <para>The command-line option
        <option>-Y</option><option>env</option> tells
        <command>tcc</command> to read the environment
        <option>env</option>. If <option>env</option> is not a full
        pathname then it is searched for along the environment search
        path. This consists of a colon-separated list of directories,
        the initial segment of which is given by the system variable
        <command>TCCENV</command> (we use the term &quot;system
        variable&quot; to describe <command>TCCENV</command> rather than
        the more normal &quot;environmental variable&quot; to avoid
        confusion with <command>tcc</command> environments) if this is
        defined, and the final segment of which consists of the default
        environments directory, which is built into
        <command>tcc</command> at compile-time, and the current working
        directory. The option <option>-show_env</option> causes
        <command>tcc</command> to print this environment search path. If
        the environment cannot be found, then a warning is issued.</para>
    </sect1>
  
    <sect1 id="S15">
      <title>The Default Environment: Configuring tcc</title>
  
      <para>The most important environment is the
        <command>default</command> environment, which is built into
        <command>tcc</command> at compile-time. This does not mean that
        the <command>default</command> environment is read every time
        that <command>tcc</command> is invoked, but rather that it is
        read once (at compile-time) to determine the default
        configuration of <command>tcc</command>.</para>
  
      <para>The information included in the <command>default</command>
        environment includes: the pathnames and default flags of the
        various components of the compilation system; the target machine
        type; the default temporary directory; the specification of the
        target independent headers, TDF libraries and system libraries
        comprising the default API (which is always ANSI); the variables
        specifying the default compilation mode; the default
        environments directory (mentioned above).</para>
  
      <para>The target machine type, defined by the
        <command>MACHINE</command> environmental identifier, actually
        plays a very minor role in dealing with the very real target
        dependency problems in <command>tcc</command>. These problems
        are caused by the fact that <command>tcc</command> is designed
        to work on many different target machines. All the information
        on where the executables, include files, TDF libraries etc. are
        located on a particular machine is stored in the standard
        environments, and in particular, the <command>default </command>
        environment. The interaction with the system assembler and, more
        importantly, the system linker is also expressed using
        environments.  The only target dependencies for which the
        machine type needs to be known are genuine aberrations. For
        example, the TDF to Mips translator and the Mips assembler are
        completely different from most other translator-assembler pairs
        in that they pass two files, a <command>.G</command> and a
        <command>.T</command> file, between them, rather than the more
        normal single <command>.s</command> file. Thus it is important
        for <command>tcc</command> to know that the machine type is Mips
        in this case (see section 5.3.4 for more details).</para>
    </sect1>
  
    <sect1 id="S16">
      <title>Using Environments to Specify APIs</title>
  
      <para>Another important use of environments concerns their use in
        specifying APIs. As was mentioned above, an API may be
        considered to have three components: the target independent
        headers, giving an abstract description of the API to the
        producer, and the TDF libraries and system libraries, giving the
        details of the API implementation to the installer. Environments
        are an ideal medium for expressing this information. The
        <command>INCL</command> environmental identifier can be used to
        specify the location of the target independent headers,
        <command>LIB</command> and <command>LINK</command> the location
        of the TDF libraries, and <command>SYS_LIB</command> and
        <command>SYS_LINK </command> the location of the system
        libraries. Moreover, all this information can be canned into a
        single command-line option.</para>
  
      <para>A number of standard APIs have been described as target
        independent headers and are provided with the TDF system. A
        <command>tcc</command> environment is provided for each of these
        APIs (for example, <command>ansi</command>,
        <command>posix</command>, <command>xpg3</command> - see 7.5 for
        a complete list, also see section 6.3). There is an important
        distinction to be made between base APIs (for example, POSIX)
        and extension APIs (for example, X11 Release 5). The
        command-line option <option>-Yposix</option> sets the API to be
        precisely POSIX, whereas the option <option>-Yx5_lib</option>
        sets it to the existing API plus the X11 Release 5 basic X
        library.  This is done by using <command>+INCL</command> etc. in
        the <command>posix</command> environment to set the various
        variables corresponding to these environmental identifiers to
        precisely the values for POSIX, but <command>&lt;INCL</command>
        etc. in the <command>x5_lib</command> environment to extend
        these variables by the values for X11 Release 5. Thus, to
        specify the API POSIX plus X11 Release 5, the command-line
        options <option>-Yposix -Yx5_lib</option> are required (in that
        order).</para>
  
      <para>All the standard API environments provided also contain
        lines which set, or modify, the <command>INFO</command>
        environmental identifier. This contains textual information on
        the API, including API names and version numbers. This
        information can be printed by invoking <command>tcc</command>
        with the <option>-info</option> command-line option. For
        example, the command-line options:
  
        <screen>
    	&gt; tcc -info -Yposix -Yx5_lib
        </screen>
  
        cause the message:
  
        <screen>
    	tcc: API is X11 Release 5 Xlib plus POSIX (1003.1).
        </screen>
  
        to be printed.</para>
  
      <para>As was mentioned above, the default API is ANSI. Thus
        invoking <command>tcc</command> without specifying an API
        environment is equivalent to giving the <option>-Yansi</option>
        command-line option. On the basis that, when it comes to
        portability, explicit decisions are better than implicit ones,
        the use of <option>-Yansi</option> is recommended.</para>
    </sect1>
  
    <sect1 id="S17">
      <title>Using Environments to Implement tcc Options</title>
  
      <para>Another use to which environments are put is to implement
        certain <command>tcc</command> command-line options. In
        particular, some options require different actions depending on
        the target machine. It is far easier to implement these by means
        of an environment, which can be defined differently on each
        target machine, rather than by trying to build all the
        alternative definitions into <command>tcc</command>.</para>
  
      <para>An important example is the <option>-g</option> flag, which
        causes the generation of information for symbolic debugging.
        Depending on the target machine, different flags may need to be
        passed to the assembler and system linker when
        <option>-g</option> is specified, or the default
        <command>.o</command> files and libraries used by the linker may
        need to be changed. For this reason <command>tcc</command> uses
        a standard environment, <command>tcc_diag</command>, to
        implement the <option>-g</option> option.</para>
  
      <para>For a complete list of those options which are implemented
        by means of environments, see 7.7. If the given option is not
        supported on a particular target machine, then the corresponding
        environment will not exist, and <command>tcc</command> will
        issue a warning to that effect.</para>
    </sect1>
  
    <sect1 id="S18">
      <title>User-Defined Environments</title>
  
      <para>The <command>tcc</command> user can also set up and use
        environments. It is anticipated that this facility will be used
        mainly to group a number of <command>tcc</command> command-line
        options into an environment using the <command>FLAG</command>
        environmental identifier and to set up environments
        corresponding to user-defined APIs.</para>
    </sect1>
  </chapter>

  <chapter id="C5">
    <title>The Components of the TDF System</title>

<!--
  <DT><A HREF="#S21"><option>5.1</option> - The C to TDF Producer<DD>
  <DL>
  <DT><A HREF="#S22"><option>5.1.1</option> - Include File Directories<DD>
  <DT><A HREF="#S23"><option>5.1.2</option> - Start-up Files and End-up Files<DD>
  <DT><A HREF="#S24"><option>5.1.3</option> - Compilation Modes and Portability
  Tables<DD>
  <DT><A HREF="#S25"><option>5.1.4</option> - Description of Compilation Modes<DD>
  </DL>
  <DT><A HREF="#S26"><option>5.2</option> - The TDF Linker<DD>
  <DL>
  <DT><A HREF="#S27"><option>5.2.1</option> - The Linker and TDF Libraries<DD>
  <DT><A HREF="#S28"><option>5.2.2</option> - Combining TDF Capsules<DD>
  <DT><A HREF="#S29"><option>5.2.3</option> - Constructing TDF Libraries<DD>
  <DT><A HREF="#S30"><option>5.2.4</option> - Useful tld Options<DD>
  </DL>
  <DT><A HREF="#S31"><option>5.3</option> - The TDF to Target Translator<DD>
  <DL>
  <DT><A HREF="#S32"><option>5.3.1</option> - tcc Options Affecting the Translator<DD>
  <DT><A HREF="#S33"><option>5.3.2</option> - Useful trans Options<DD>
  <DT><A HREF="#S34"><option>5.3.3</option> - Optimisation in TDF Translators<DD>
  <DT><A HREF="#S35"><option>5.3.4</option> - The Mips Translator and Assembler<DD>
  </DL>
  <DT><A HREF="#S36"><option>5.4</option> - The System Assembler<DD>
  <DT><A HREF="#S37"><option>5.5</option> - The System Linker<DD>
  <DL>
  <DT><A HREF="#S38"><option>5.5.1</option> - The System Linker and tcc Environments<DD>
  <DT><A HREF="#S39"><option>5.5.2</option> - The Effect of Command-Line Options
  on the System Linker<DD>
  </DL>
  <DT><A HREF="#S40"><option>5.6</option> - The C Preprocessor<DD>
  <DT><A HREF="#S41"><option>5.7</option> - The TDF Pretty Printer<DD>
  <DT><A HREF="#S42"><option>5.8</option> - The TDF Archiver<DD>
-->

    <sect1 id="S20">
      <title>The C to TDF Producer</title>

      <para>We now turn to the individual components of the TDF
        system. Most of the command-line options to
        <command>tcc</command> so far discussed have been concerned
        with controlling the behaviour of <command>tcc</command>
        itself.  Another, even more important, class of options
        concern the ways in which the behaviour of the components can
        be specified. The
        <option>-W</option><option>tool</option><option>,
        </option><option>opt</option><option>,</option> ...
        command-line option for communicating directly with the
        components has already been mentioned.  This however is not
        recommended for normal purposes; the other
        <command>tcc</command> command-line options give a more
        controlled access to the components.</para>

      <para>The first component to be considered is the C --&gt; TDF
        producer, <command>tdfc</command>. This translates an input C
        source file (a <command>.c</command> file or a
        <command>.i</command> file) into a output target independent
        TDF capsule (a <command>.j</command> file).<para>

      <sect2 id="S21">
        <title>Include File Directories</title>

        <para>The most important producer options are those which tell
          it where to search for files included using a
          <command>#include</command> preprocessing directive. As with
          <command>cc</command>, the user can specify a directory,
          <option>dir</option>, to search for these files using the
          <option>-I</option><option>dir</option> command-line option.
          However, unlike <command>cc</command>, the producer does not
          search <command>/usr/include</command> as default. Instead,
          the default search directories are those containing the
          target independent headers for the API selected, as given by
          the <command>INCL</command> identifier in the environment
          describing the API. In addition, the directories to search
          for the default start-up files (see below), as given by the
          <command>STARTUP_DIR</command> environmental identifier, are
          also passed to the producer.</para>

        <para>If the <option>-H</option> option is passed to
          <command>tcc</command> then it will cause the producer to
          print the name of each file it opens. This is often helpful
          if a multiplicity of <option>-I</option> options leads to
          confusion.</para>
        </sect2>

        <sect2 id="S22">
          <title>Start-up Files and End-up Files</title>

          <para>The producer has a useful feature of start-up and
            end-up files. The <command>tcc</command> command-line
            option <option>-f</option><option>file</option> is
            equivalent to inserting the line:

            <screen>
          	#include &quot;file&quot;
            </screen>

            at the start of each input C source file. Similarly
            <option>-e</option><option>file</option> is equivalent to
            inserting this line at the end of each such file.  These
            included files are searched for along the directories
            specified by the <option>-I</option> options in the normal
            manner.</para>

          <para><command>tcc</command> generates a producer start-up
            file, called <command>tcc_startup.h </command>, in order
            to implement certain command-line options. The
            <command>cc</command>-compatible options:

            <screen>
          	<option>-D</option><option>name
          	</option><option>-D</option><option>name</option><option>=</option><option>value
          	</option><option>-U</option><option>name
          	</option><option>-A</option><option>str</option>
            </screen>

            are translated into the lines:<para>

            <screen>
          	#define name 1
          	#define name value
          	#undef name
          	#assert str
            </screen>

            respectively. <command>tcc</command> does not check that
            these lines are valid C preprocessing directives since
            this will be done by the producer.  So any producer error
            message referring to <command>tcc_startup.h</command> is
            likely actually to refer to the <option>-D</option>,
            <option>-U</option> and <option>-A</option> command-line
            options. In case of difficulties,
            <command>tcc_startup.h</command> can be preserved for
            closer examination using the <option>-Ph</option> option
            to <command>tcc</command>.</para>

          <para>There may be default start-up options specified by the
            <command>STARTUP</command> environmental identifier. The
            purpose of these is discussed below.  The order the
            start-up options are passed to the producer is: firstly,
            the default start-up options; secondly, the start-up
            option for the <command>tcc</command> built-in start-up
            file, <command>tcc_startup.h</command>; thirdly, any
            command-line start-up options. (For technical reasons, a
            <option>-no_startup_options</option> command-line option
            is provided which causes no start-up or end-up options to
            be passed to <command>tdfc</command>.  This is not likely
            to prove useful in normal use.</para>
        </sect2>

        <sect2 id="S23">
          <title>Compilation Modes and Portability Tables</title>

          <para>We have already described how one aspect of the
            compilation environment, the API, is specified to the
            producer by means of the default <option>-I</option>
            options. But another aspect, the control of the syntax and
            portability checks applied by the producer, can also be
            specified in a fairly precise manner.</para>

          <para>The producer accepts a number of
            <command>#pragma</command> statements which tell it which
            portability checks to apply and which syntactic extensions
            to ISO/ANSI C to allow (see [3] and [2]). These can be
            inserted into the main C source, but the ideal place for
            them is in a start-up file.  This is the purpose of the
            <command>STARTUP</command> environmental identifier, to
            give a list of default start-up files containing
            <command>#pragma</command> statements which specify the
            default behaviour of the producer.</para>

          <para>In fact not all the information the producer requires
            is obtained through start-up files. The basic information
            on the minimum sizes which can be assumed for the basic
            integer types is passed to the producer by means of
            another type of file, the portability table.  This is
            specified by means of the <command>PORTABILITY</command>
            environmental identifier. There are in fact only two
            portability tables provided,
            <command>Ansi_Max.pf</command>, which specifies the
            minimum sizes permitted by the ISO/ANSI standard, and
            <command>Common.pf</command>, which specifies the minimum
            sizes found on most 32-bits machines. The main difference
            between the two is that in ISO/ANSI it is stated that
            <command>int</command> is only guaranteed to have 16 bits,
            whereas on 32-bits machines it has at least 32 bits.</para>

          <para>A number of <command>tcc</command> command-line
            options are concerned with specifying the compilation
            environment to the producer. The main option for setting
            the compilation mode is
            <option>-X</option><option>mode</option>.  A number of
            different modes are available:

            <itemizedlist>
              <listitem><para><option>-Xs</option> specifies strict
                ISO/ANSI C with extra portability checks,</para>
              
              <listitem><para><option>-Xp</option> specifies strict ISO/ANSI
                C with minimal portability checks,</para>
              
              <listitem><para><option>-Xc</option> specifies strict ISO/ANSI
                C with no extra portability checks,</para>
              
              <listitem><para><option>-Xa</option> specifies ISO/ANSI C with
                various syntactic extensions,</para>
              
              <listitem><para><option>-Xt</option> specifies
                &quot;traditional&quot; C.</para>
            </itemizedlist>

            The default is <option>-Xc</option>. For a precise
            description of each of these modes, see [3]
            (<command>tchk</command> is just <command>tcc</command> in
            disguise).  In addition the command-line options
            <option>-not_ansi</option> and <option>-nepc</option> can
            be used to modify the basic compilation modes.
            <option>-not_ansi</option> specifies that certain non-ANSI
            syntactic constructions should be allowed.
            <option>-nepc</option> switches off the producer's extra
            portability checks (it also suppresses certain constant
            overflow checks in the TDF translators). All these options
            are implemented by start-up files.</para>

          <para>The portability table to be used is specified
            separately by means of an environment. The default is the
            ISO/ANSI portability table, but <option>-Y32bit</option>
            or <option>-Ycommon</option> can be used to specify 32-bit
            checking. <option>-Y16bit</option> will restore the
            portability table to the default. Note that all checks
            involving the portability table are switched off by the
            <option>-nepc</option> command-line option, so in this
            case no portability table is specified to the
            producer.</para>

        <sect2 id="S24">
          <title>Description of Compilation Modes</title>

          <para>Let us briefly describe the compilation modes
            introduced in the previous section. The following tables
            describe some of the main features of each mode. The list
            of pre-defined macros is complete (other than the built-in
            macros, <command>__FILE__</command>,
            <command>__LINE__</command>, <command>__DATE__</command>
            and <command>__TIME__</command>; because the producer is
            designed to be target independent it does not define any
            of the machine name macros which are built into
            <command>cc</command>. The
            <command>cc</command>-compatible option,
            <option>-A-</option>, which is meant to cause all
            pre-defined macros (other than those beginning with
            <command>__</command>) to be undefined, and all
            pre-assertions to be unasserted, is ignored by
            <command>tcc</command>.  In the standard compilation modes
            there are no such macros and no such assertions. The
            integer promotion rules are either the arithmetic rules
            specified by ISO/ANSI or the &quot;traditional&quot;
            signed promotion rules. The precise set of syntactic
            relaxations to the ISO/ANSI standard allowed by each mode
            varies. For a complete list see [3].  The
            <option>-not_ansi</option> command-line option can be used
            to allow further relaxations. The extra prototype checks
            cause the producer to construct a prototype for procedures
            which are actually traditionally defined.  This is very
            useful for getting prototype-like checking without having
            to use prototypes in function definitions. This, and other
            portability checks, are switched off by the
            <option>-nepc</option> option. Finally, the additional
            checks are <command>lint</command>-like checks which are
            useful in detecting possible portability problems.</para>

          <screen>
          	compilation mode: <option>-Xs
          	</option>description: strict ISO/ANSI with additional checks
          	pre-defined macros: __STDC__ = 1, __ANDF__ = 1, __TenDRA__ = 1
          	integer promotions: ISO/ANSI
          	syntactic relaxations: no
          	extra prototype checks: yes
          	additional checks: yes
        
          	compilation mode: <option>-Xp
          	</option>description: strict ISO/ANSI with minimal extra checks
          	pre-defined macros: __STDC__ = 1, __ANDF__ = 1, __TenDRA__ = 1
          	integer promotions: ISO/ANSI
          	syntactic relaxations: no
          	extra prototype checks: yes
          	additional checks: some
        
          	compilation mode: <option>-Xc
          	</option>description: strict ISO/ANSI with no extra checks
          	pre-defined macros: __STDC__ = 1, __ANDF__ = 1, __TenDRA__ = 1
          	integer promotions: ISO/ANSI
          	syntactic relaxations: no
          	extra prototype checks: no
          	additional checks: no
        
          	compilation mode: <option>-Xa</option> (default)
          	description: lenient ISO/ANSI with no extra checks
          	pre-defined macros: __STDC__ = 1, __ANDF__ = 1, __TenDRA__ = 1
          	integer promotions: ISO/ANSI
          	syntactic relaxations: yes
          	extra prototype checks: no
          	additional checks: no
        
          	compilation mode: <option>-Xt
          	</option>description: traditional C
          	pre-defined macros: __STDC__ = 0, __ANDF__ = 1, __TenDRA__ = 1
          	integer promotions: signed
          	syntactic relaxations: yes
          	extra prototype checks: no
          	additional checks: no
          </screen>

          <para>The choice of compilation mode very much depends on
            the level of checking required. <option>-Xa</option> is
            suitable for general compilation, and
            <option>-Xc</option>.  <option>-Xp</option> and
            <option>-Xs</option> for serious program checking
            (although some may find the latter
            <command>Xs</command>-ive). <option>-Xt</option> is
            provided for <command>cc</command> compatibility only; its
            use is discouraged.<para> The recommended method of
            proceeding is to define your own compilation mode. In this
            way any choices about syntax and portability checking are
            made into conscious decisions. One still needs to select a
            basic mode to form the basis for this user-defined mode.
            <option>-Xc</option> is probably best; it is a
            well-defined mode (the definition being the ISO/ANSI
            standard) and so forms a suitable baseline. Suppose that,
            on examining the program to be compiled, we decide that we
            need to do the following:
              
          <itemizedlist>
            <listitem><para>allow the <command>#ident</command>
              directive,</para>
            </listitem>
            
            <listitem><para>allow through unknown escape sequences
              with a warning,</para>
            </listitem>
            
            <listitem><para>warn of uses of undeclared
              procedures,</para>
            </listitem>
            
            <listitem><para>warn of incorrect uses of simple
              <command>return</command> statements.</para>
            </listitem>
          </itemizedlist>

          The first two of these are syntactic in nature. The third is
          more interesting. ISO/ANSI says that any undeclared
          procedures are assumed to return <command>int</command>.
          However for strict API checking we really need to know about
          these undeclared procedures, because they may be library
          routines which are not part of the declared API. The fourth
          condition is a simple <command>lint</command>-like check
          that no procedure which is declared to return a value
          contains a simple <command>return</command> statement
          (without a return value).</para>

          <para>To tell the producer about these options, it is
            necessary to have them included in every source file. The
            easiest way of doing this is by using a start-up file,
            <command>check.h</command> say, containing the
            lines:

          <screen>
          	#pragma TenDRA begin
          	#pragma TenDRA directive ident allow
          	#pragma TenDRA unknown escape warning
          	#pragma TenDRA implicit function declaration warning
          	#pragma TenDRA incompatible void return warning
          </screen>

          The second, third, fourth and fifth lines correspond to the
          statements above (see [3]). The first line indicates that
          this file is defining a new checking scope.</para>

        <para>Once the compilation mode has been described in this
          way, it needs to be specified to <command>tcc</command> in
          the form of the command-line options <option>-Xc</option>
          <option>-f</option><command>check.h</command>.</para>
      </sect2>
    </sect1>

    <sect1 id="S25">
      <title>The TDF Linker</title>

      <para>The next component of the system to be considered is the
        TDF linker, <command>tld</command>. This is used to combine
        several TDF capsules or TDF libraries into a single TDF
        capsule. It is put to two distinct purposes in the
        <command>tcc</command> compilation scheme. Firstly, in the
        main compilation path, it is used in the installer half to
        combine a target independent TDF capsule (a
        <command>.j</command> file) with the TDF libraries
        representing the API implementation on the target machine, to
        form a target dependent TDF capsule (a <command>.t</command>
        file). Secondly, if the <option>-M</option> option is given to
        <command>tcc</command>, it is used in the producer half to
        combine all the target independent TDF capsules
        (<command>.j</command> files) into a single target independent
        capsule.  Let us consider these two cases separately.</para>

      <sect2 id="S26">
        <title>The Linker and TDF Libraries</title>

        <para>In the main TDF linking phase, combining target
          independent capsules with TDF libraries to form target
          dependent capsules, two pieces of information need to be
          specified to <command>tld</command>. Firstly, the TDF
          libraries to be linked with, and, secondly, the directories
          to search for these libraries. For standard APIs, the
          location of the TDF libraries describing the API
          implementation is given in the environment corresponding to
          the API. The <command>LIB</command> identifier gives the
          names of the TDF libraries, and the <command>LINK</command>
          identifier the directories to be searched for these
          libraries. The user can also specify libraries and library
          directories by means of command-line options to
          <command>tcc</command>. The option
          <option>-j</option><option>str</option> indicates that the
          TDF library <option>str</option><command>.tl</command>
          should be used for linking (<command>.tl</command> is the
          standard suffix for TDF libraries).  The option
          <option>-J</option><option>dir</option> indicates that the
          directory <option>dir</option> should be added to the TDF
          library search path. Libraries and directories specified by
          command-line options are searched before those given in the
          API environment./<para>

          <para>There is a potential source of confusion in that the
            <command>tld</command> options specifying the TDF library
            <option>str</option><command>.tl</command> and the library
            directory <option>dir</option> are respectively
            <option>-l</option><option>str</option> and
            <option>-L</option><option>dir</option>.
            <command>tcc</command> automatically translates
            command-line <option>-j</option> options into
            <command>tld</command> <option>-l</option> options, and
            command-line <option>-J</option> options into
            <command>tld</command> <option>-L</option> options.
            However the <command>LIB</command> and
            <command>LINK</command> identifiers are actually lists of
            <command>tld</command> options, so they should use the
            <option>-l</option> and <option>-L</option> forms.</para>
      </sect2>

      <sect2 id="S27">
        <title>Combining TDF Capsules</title>

        <para>The second use of <command>tld</command> is to combine
          all the <command>.j</command> files in the producer half of
          the compilation into a single capsule.  This is specified by
          means of the <option>-M</option> (&quot;merge&quot;)
          command-line option to <command>tcc</command> described in
          section 3.5.4. By default, the resultant capsule is called
          <command>a.j</command>. If the <option>-M</option> option is
          used to merge all the <command>.j</command> files from a
          very large program, the resultant TDF capsule can in turn be
          very large.  It may in fact become too large for the
          installer to handle. Interesting it is often the system
          assembler rather than TDF translator which has
          problems.</para>

        <para>The <option>-MA</option> (&quot;merge all&quot;) option
          is similar to <option>-M</option>, but will in addition
          &quot;hide&quot; all the external tag and token names in the
          resultant capsule, except for the token names required for
          linking with the TDF libraries and the tag names required
          for linking with the system libraries (plus
          <command>main</command>). In effect, all the names which are
          internal to the program are removed. This means that the
          <option>-MA</option> option should only be used to merge
          complete programs. For details on how to use
          <command>tld</command> for more selective name hiding, see
          below.</para>

      <sect2 id="S28">
        <title>Constructing TDF Libraries</title>

        <para>There is a final use of the TDF linker supported by
          <command>tcc</command> which has not so far been mentioned,
          namely the construction of TDF libraries. As has been
          mentioned, TDF libraries are an indexed set of TDF capsules.
          <command>tld</command>, in addition to its linking mode,
          also has routines for constructing and manipulating TDF
          libraries.  The library construction mode is supported by
          <command>tcc</command> by means of the
          <command>makelib</command> environment. This tells
          <command>tcc</command> to merge all the
          <command>.j</command> files and then to stop. But it also
          passes an option to <command>tld</command> which causes the
          merged file to be, not a TDF capsule, but a TDF library.
          Thus the command-line options:

          <screen>
        	&gt; tcc -Ymakelib -o a.tl a.j b.j c.j
          </screen>

          cause the TDF capsules <command>a.j</command>,
          <command>b.j</command> and <command>c.j</command> to be
          combined into a TDF library, <command>a.tl</command>.</para>
      </sect2>

      <sect2 id="S29">
        <title>Useful tld Options</title>

        <para><command>tld</command> has a number of options which may
          be useful to the general user. The <option>-w</option>
          option, which causes warnings to be printed about undefined
          tags and tokens, can often provide interesting information;
          other options are concerned with the hiding of tag and token
          names.  These options can be passed directly to
          <command>tld</command> by means of the <option>-WL,
          </option><option>opt</option><option>,</option> ...
          command-line option to <command>tcc </command>. The
          <command>tld</command> options are fully documented on the
          appropriate manual page.</para>
      </sect2>
    </sect1>
        
    <sect1 id="S30">
      <title>The TDF to Target Translator</title>

      <para>The next compilation tool to be considered is the TDF
        translator.  This translates an input target dependent TDF
        capsule (<command>.t</command> file) into an assembly source
        file (<command>.s</command>) file for the appropriate target
        machine.  This is the main code generation phase of the
        compilation process; most of the optimisation of code which
        occurs happens in the translator (some machines also have
        optimising assemblers).</para>

      <para>Although referred to by the generic name of
        <command>trans</command>, the TDF translators for different
        target machines in fact have different names. The main
        division between translators is in the supported processor.
        However, operating system dependent features such as the
        precise form of the assembler input, and the symbolic debugger
        to be supported, may also cause different versions of the
        basic translator to be required for different machines of the
        same processor group. The current generation of translators
        includes the following:

        <orderedlist>
          <listitem><para>The TDF --&gt; i386/i486 translator is
            called <command>trans386</command>.  This exists in two
            versions, one running on SVR4.2 and one on SCO.  The two
            versions differ primarily in the symbolic debugger they
            support.  <command>trans386</command> has also been ported
            to several other i386-based machines, including
            MS-DOS.</para>
          </listitem>

          <listitem><para>The TDF --&gt; Sparc (Version 7) translator
            is called <command>sparctrans </command>. This again
            exists in two versions, one running on SVR4.2 and one on
            SunOS and Solaris 1. These versions again differ primarily
            in the symbolic debugger supported.</para>
          </listitem>
      
          <listitem><para>The TDF --&gt; Mips (R2000/R3000,
            little-endian) translator is called
            <command>mipstrans</command>. This differs from the other
            translators in that instead of outputting a single
            <command>.s</command> file, it outputs two files, a binasm
            file (with a <command>.G</command> suffix) and a symbol
            table file (with a <command>.T</command> suffix). This is
            discussed in more detail below.
            <command>mipstrans</command> runs on Ultrix, but again has
            two versions. One runs on Ultrix 4.1 and earlier, the
            other on 4.2 and later. This necessary because of a change
            in the format of the binasm file between these two
            releases.</para>
          </listitem>
      
          <listitem><para>The TDF --&gt; 68030/68040 translator also
            exists in two versions.  One runs on HP-UX and is called
            <command>hptrans</command>; the other runs on NeXTStep and
            is called <command>nexttrans</command> (however the NeXT
            is not a supported platform because of its lack of
            standard API coverage).  These differ, not only in the
            symbolic debugger supported, but also in the format of the
            assembly source output.</para>
          </listitem>
        </orderedlist>

        This list is not intended to be definitive. Development work
        is proceeding on new translators all the time. Existing
        translators are also updated to support new operating systems
        releases when this is necessary.</para>

      <sect2 id="S31">
        <title>tcc Options Affecting the Translator</title>

        <para>A number of <command>tcc</command> command-line options
          are aimed at controlling the behaviour of the TDF
          translator. The <command>cc</command>-compatible option
          <option>-K</option><option>item</option><option>,</option>
          ...  specifies the behaviour indicated by the argument
          <option>item</option>. Possible values for
          <option>item</option>, together with the behaviour they
          specify, include:

          <screen>
        	PIC		causes position independent code to be produced,
        	ieee		causes strict conformance to the IEEE floating point standard,
        	noieee		allows non-strict conformance to the IEEE standard,
        	frame		specifies that a frame pointer should always be used,
        	no_frame		specifies that frame pointers need not always be used,
        	i386		causes code generation to be tuned for the i386 processor,
        	i486		causes code generation to be tuned for the i486 processor,
        	P5		causes code generation to be tuned for the P5 processor.
          </screen>

          Obviously not all of these options are appropriate for all
          versions of <command>trans</command>. Therefore all
          <option>-K</option> options are implemented by means of
          environments which translate <option>item</option> into the
          appropriate <command>trans</command> options. If a certain
          <option>item</option> is not applicable on a particular
          target machine then the corresponding environment will not
          exist, and <command>tcc</command> will print a warning to
          this effect.</para>

        <para>The <command>cc</command>-compatible
          <option>-Z</option><option>str</option> option is similarly
          implemented by means of environments. On those machines
          which support this option it can be used to specify the
          packing of structures. If <option>str</option> is
          <command>p1</command> then they are tightly packed, with no
          padding. Values of <command>p2</command> and
          <command>p4</command> specify padding to 2 or 4 byte
          boundaries when appropriate.</para>

        <para>Finally, the <command>tcc</command> command-line option
          <option>-wsl</option> causes the translator to make all
          string literals writable. Again, this is implemented by an
          environment. For many machines this behaviour is default;
          for others it requires an option to be passed to the
          translator.</para>

      <sect2 id="S32">
        <title>Useful trans Options</title>

        <para>For further specifying the behaviour of
          <command>trans</command> it may be necessary to pass options
          to it directly. The command-line options implemented by
          <command>trans</command> vary from machine to machine. The
          following options are however common to all translators and
          may prove useful:

          <screen>
        	<option>-E</option>		switches off certain constant overflow checks,
        	<option>-X</option>		switches off most optimisations,
        	<option>-Z</option>		prints the version number(s) of the input capsule.
          </screen>

          These options may be passed directly to
          <command>trans</command> by means of the <option>-Wt,
          </option><option>opt</option><option>,</option> ...
          command-line option to <command>tcc </command>. The
          <option>-E</option> option is also automatically invoked
          when the <option>-nepc</option> command-line option to
          <command>tcc</command> is used. The manual page for the
          appropriate version of <command>trans</command> should be
          consulted for more details on these and other, machine
          dependent, options.</para>
      </sect2>

      <sect2 id="S33">
       <title>Optimisation in TDF Translators</title>

        <para>As has been mentioned, the TDF translator is the main
          optimising phase of the TDF compilation scheme. All
          optimisations are believed to be correct and are switched on
          by default. Thus the standard <command>cc</command>
          <option>-O</option> option, which is intended to switch
          optimisations on, has no effect in <command>tcc</command>
          except to cancel any previous <option>-g</option> option.
          If, due to a translator bug, a certain piece of code is
          being optimised incorrectly, then the optimisations can be
          switched off by means of the <option>-Wt, -X</option> option
          mentioned above. However this should not normally be
          necessary.</para>
      </sect2>

      <sect2 id="S34">
        <title>The Mips Translator and Assembler</title>

        <para>As has been mentioned, the TDF --&gt; Mips translator, <command>mipstrans</command>
        is genuinely exceptional in that it outputs a pair of files for each
        input TDF capsule, rather than a single assembly source file. The
        general scheme is shown in Fig. 5.</para>

      <figure id="mips-filese">
        <title>MIPS Compilation Path</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mips_files" format="PNG">
            </imageobject>
          </mediaobject>
      </figure>

        <para><command>mipstrans</command> translates each input
          target dependent TDF capsule, <command>a.t</command>, into a
          binasm source file, <command>a.G</command>, and an assembler
          symbol table file, <command>a.T</command>. It may optionally
          output an assembly source file, <command>a.s</command>,
          which combines all the information from
          <command>a.G</command> with part of the information from
          <command>a.T</command> (it is the remainder of the
          information in <command>a.T </command> which is the reason
          why this scheme has to be adopted). The
          <command>.s</command> file is only produced if
          <command>tcc</command> is explicit told to preserve
          <command>.s</command> files by means of one of the
          command-line options, <option>-Ps</option>,
          <option>-Pa</option>, <option>-Fs</option> or
          <option>-S</option>. The two main
          <command>mipstrans</command> output files,
          <command>a.G</command> and <command>a.T</command>, are then
          transformed by the auxiliary Mips assembler,
          <command>as1</command>, into a binary object file,
          <command>a.o</command>.</para>

        <para>Although they can be preserved for examination, the
          <command>.G</command> and <command>.T</command> files output
          by <command>mipstrans</command> cannot subsequently be
          processed using <command>tcc</command>. If a break in
          compilation is required at this stage, a
          <command>.s</command> file should be produced, and then
          entered as a <command>tcc</command> input file in the normal
          way.  The information lost from the symbol table in this
          process is only important when symbolic debugging
          information is required. Input <command>.s</command> files
          are translated into binary object files by the main Mips
          assembler, <command>as</command>, in the normal way.</para>

        <para>So, in addition to the main assembler, which is given by
          the <command>AS</command> environmental identifier, the
          location of the auxiliary assembler also needs to be
          specified to <command>tcc</command>. This is done using the
          <command>AS1</command> environmental identifier, which is
          normally defined in the <command>default</command>
          environment. There is a further piece of information
          required for the compilation scheme to operate correctly:
          <command>mipstrans</command> needs to know the
          <command>as1</command> version number. This number can be
          specified by means of the <command>VERSION</command>
          environmental identifier.</para>
      </sect2>
    </sect1>

    <sect1 id="S35">
      <title>The System Assembler</title>

      <para>The system assembler is the stage in the
        <command>tcc</command> compilation path which is likely to be
        of least interest to normal users. The assembler translates an
        assembly source (or <command>.s</command>) file into a binary
        object (or <command>.o</command>) file. (The exception to this
        is the Mips auxiliary assembler discussed above.) Most
        assemblers are straight translation phases, although some also
        offer peephole optimisation and scheduling facilities. No
        <command>tcc</command> command-line options are directly
        concerned with the assembler, however options can be passed to
        it directly by means of the <option>-Wa,
        </option><option>opt</option><option>,</option> ...
        command-line option.</para>
    </sect1>

    <sect1 id="S36">
      <title>The System Linker</title>

      <para>The final stage in the main <command>tcc</command>
        compilation path is the system linking. The system linker,
        <command>ld</command>, combines all the binary object files
        with the system libraries to form a final executable image. By
        default this executable is called <command>a.out</command>,
        although this can be changed using the <option>-o</option>
        command-line option to <command>tcc</command>.  In terms of
        the differences between target machines, the system linker is
        the most complex of the tools which are controlled by
        <command>tcc</command>.  Our discussion can be divided between
        those aspects of the linker's behaviour which are controlled
        by <command>tcc</command> environments, and those which are
        controlled by command-line options.</para>

      <sect2 id="S37">
        <title>The System Linker and tcc Environments</title>

        <para>The general form of <command>tcc</command>'s calls to
          <command>ld</command> are as follows:

          <screen>
        	ld (linker options) -o (output file)
        		(initial .o files) (binary object files)
        		(final .o files) (default system library directories)
        		(default system libraries) (default standard libraries)
          </screen>

          The linker may require certain default binary object files
          to be linked into every executable created. These are
          divided between the initial <command>.o</command> files,
          which come before the main list of binary object files, and
          the final <command>.o</command> files, which come after. For
          technical reasons, the list of initial <command>.o</command>
          files is split into two; the first list is given by the
          <command>CRT0</command> environmental identifier, and the
          second by <command>CRT1</command>. The list of final
          <command>.o</command> files is given by the
          <command>CRTN</command> environmental identifier.</para>
  
        <para>The information on the default system libraries the
          linker requires is given by three environmental identifiers.
          <command>SYS_LINK</command> gives a list of directories to
          be searched for system libraries. This will exclude
          <command>/lib</command> and <command>/usr/lib</command>
          which are usually built into <command>ld</command>. These
          directories will be given as a list of options of the form
          <option>-L</option><option>dir</option>. The default system
          libraries are divided into two lists. The environmental
          identifier <command>SYS_LIBC</command> gives the
          &quot;standard&quot; library options (usually just
          <option>-lc</option>), and <command>SYS_LIB</command> gives
          any other default library options. Both of these are given
          by lists of options of the form
          <option>-l</option><option>str</option>. This option
          specifies that the linker should search for the library
          <command>lib</command><option>str</option><command>.a</command>
          if linking statically, or
          <command>lib</command><option>str</option><command>.so</command>
          if linking dynamically.</para>
  
        <para>So the main target dependencies affecting the system
          linker are described in these six environmental variables:
          <command>CRT0</command>, <command>CRT1</command>,
          <command>CRTN</command>, <command>SYS_LINK</command>,
          <command>SYS_LIB</command> and <command>SYS_LIBC</command>.
          For a given machine these will be given once and for all in
          the <command>default</command> environment. Standard API
          environments may modify <command>SYS_LINK</command> and
          <command>SYS_LIB</command> to specify the location of the
          system libraries containing the API implementation, although
          at present this has not been done.</para>
      </sect2>
  
      <sect2 id="S38">
        <title>The Effect of Command-Line Options on the
          System Linker</title>
        
        <para>The most important <command>tcc</command> command-line
          options affecting the system linker are those which specify
          the use of certain system libraries. The option
          <option>-l</option><option>str</option> indicates that the
          system libraries
          <command>lib</command><option>str</option><command>.a</command>
          (or <command>lib</command><option>str
          </option><command>.so</command>) should be searched for. The
          option <option>-L</option><option>dir</option> indicates
          that the directory <option>dir</option> should be added to
          the list of directories searched for system libraries. Both
          these options are position dependent. They are passed to the
          system linker in exactly the same position relative to the
          input files as they were given on the command-line. Thus
          normally <option>-l</option> (and to a lesser extent
          <option>-L</option>) options should be the final
          command-line options given.</para>
      
        <para>The following <command>tcc</command> command-line
          options are passed directly to <command>ld</command>. A
          brief description is given of the purpose of each option,
          however whether or not <command>ld</command> supports this
          option depends on the target machine. The local
          <command>ld</command> manual page should be consulted for
          details.
      
          <screen>
          	<option>-B</option><option>str</option>		sets library type: <option>str</option> can be dynamic or static,
          	<option>-G</option>		causes a shared object rather than an executable to be produced,
          	<option>-dn</option>		causes dynamic linking to be switched off,
          	<option>-dy</option>		causes dynamic linking to be switched on,
          	<option>-h</option><option>str</option>		causes <option>str</option> to be marked as dynamic in a shared object,
          	<option>-s</option>		causes the resultant executable to be stripped,
          	<option>-u</option><option>str</option>		causes <option>str</option> to be marked as undefined,
          	<option>-z</option><option>str</option>		specifies error behaviour, depending on <option>str</option>.
          </screen>
      
          The position of any <option>-B</option><option>str</option>
          options on the command-line is significant. These positions
          are therefore preserved. The position of the other options
          is not significant. In addition to these options, the
          <option>-b</option> command-line option causes the default
          standard system libraries (i.e. those given by the
          <command>SYS_LIBC</command> environmental identifier) not to
          be passed to <command>ld</command>.</para>

        <para>Other command-line options may affect the system linker
          indirectly.  For example, the <option>-g</option> option may
          require different default <command>.o</command> files and
          system libraries, the precise details of which are target
          dependent. Such options will be implemented by means of
          environments which will change the values of the
          environmental identifiers controlling the linker.</para>
      </sect2>
    </sect1>
  
    <sect1 id="S39">
      <title>The C Preprocessor</title>

      <para>The TDF C preprocessor, <command>tdfcpp</command>, is
        invoked only when <command>tcc</command> is passed the
        <option>-E</option> or <option>-P</option> command-line
        option, as described in section 3.5.1. These both cause all
        input <command>.c</command> files to be preprocessed, but in
        the former case the output is send to the standard output,
        whereas in the latter it is send to the corresponding
        <command>.i</command> files.</para>
  
      <para>The TDF system differs from most C compilation systems in
        that preprocessing is an integral part of the producer,
        <command>tdfc</command>, rather than a preliminary textual
        substitution phase. This is because of difficulties involved
        with trying to perform the preprocessing in a target
        independent manner. Therefore <command>tdfcpp</command> is
        merely a modified version of <command>tdfc</command> which
        halts after the preprocessing phase and prints what it has
        read. This means that the <command>tdfcpp</command> output,
        while being equivalent to its input, will not correspond at
        the textual level to the degree which is normal in C
        preprocessors.</para>
    </sect1>
  
    <sect1 id="S40">
      <title>The TDF Pretty Printer</title>
  
      <para>The TDF pretty printer, <command>disp</command>, and the TDF
        notation compiler, <command>tnc</command>, have already been
        discussed in some detail in section 3.5.3. The TDF decoding
        command-line options, <option>-disp</option> and
        <option>-disp_t</option>, cause respectively all
        <command>.j</command> files and all <command>.t</command> files
        to be decoded into <command>.p</command> files. This decoding is
        done using <command>disp</command> by default, and with
        <command>tnc</command> <option>-p</option> if the
        <option>-Ytnc</option> command-line option is specified. The
        <option>-Ytnc</option> option also causes any input
        <command>.p</command> files to be encoded into
        <command>.j</command> files by <command>tnc</command>.</para>
    
      <para>The pretty printer, <command>disp</command>, can be used as
        a useful check that a given <command>.j</command> or
        <command>.t</command> file is a legal TDF capsule. The TDF
        decoding routines in the TDF linker and the TDF translator
        assume that their input is a legal capsule. The pretty printer
        performs more checks and has better diagnostics for illegal
        capsules. By default <command>disp</command> only decodes
        capsule units which belong to &quot;core&quot; TDF. Options to
        decode other unit types can be passed directly to
        <command>disp</command> by means of the <option>-Wd,
        </option><option>opt</option><option>,</option> ...
        command-line option to <command>tcc</command>. The potentially
        useful <command>disp </command> options include:
    
      <screen>
      	<option>-A</option>		causes all known unit types to be decoded,
      	<option>-g</option>		causes diagnostic information units to be decoded,
      	<option>-D</option>		causes a binary dump of the capsule to be printed,
      	<option>-U</option>		causes link information units to be decoded,
      	<option>-V</option>		causes the input not to be rationalised,
      	<option>-W</option>		causes a warning to be printed if a token is used before it is declared.
      </screen>
    
      The manual page for <command>disp</command> should be consulted for more
      details.</para>
    
      <para>The TDF notation compiler, <command>tnc</command>, is
        fully documented in [4].</para>
    </sect1>
  
    <sect1 id="S41">
      <title>The TDF Archiver</title>
    
      <para>A TDF archive is a <command>tcc</command>-specific form
        intended for software distribution. It consists of a set of
        target independent TDF capsules (<command>.j</command> files)
        and a set of <command>tcc</command> command-line options. It
        is intended that a TDF archive can be produced on one machine,
        and distributed to, and installed on, a number of target
        machines.</para>
  
      <para>If a TDF archive is given as an input file to
        <command>tcc</command> (it will be recognised by its
        <command>.ta</command> suffix), then it is split into its
        constituent capsules and options. The options are interpreted
        as if they had been given on the command-line (unless the
        <option>-WJ, -no_options</option> flag is specified), and the
        capsules are treated as input files in the normal way. The
        archive splitting and archive building routines are both built
        into <command>tcc</command>; there is no separate TDF archiver
        tool. Options passed to the archiver using <option>-WJ,
        </option><option>opt</option> are interpreted by
        <command>tcc</command>.</para>
      
      <para>In order to specify that a TDF archive should be created,
        the <option>-prod</option> flag should be used. This specifies
        that all target independent capsules (<command>.j</command>
        files) and all options <option>opt</option> given by a
        <command>tcc</command> option of the form <option>-WI,
        </option><option>opt</option><option>,</option> ... should be
        combined into a TDF archive. The compilation process halts
        after producing this archive. By default the TDF archive
        created is called <command>a.ta</command>, but this can be
        changed using the <option>-o</option> option. Normally the
        names of the capsules comprising the archive are inserted into
        the archive, but this may be suppressed by the use of the
        <option>-WJ, -no_names</option> option.</para>
      
      <para>As an example of the kind of option that might be included
        in an archive, suppose that the production has been done using
        the POSIX API. Then the installation should also be done using
        this same API. Alternatively expressed, if a TDF archive has
        been constructed using the <command>posix</command>
        environment, then the <option>-Yposix</option> flag should be
        included in the archive to ensure that the installation also
        takes place in this same environment. In fact the environments
        describing the standard APIs have been set up so that this
        happens automatically. For example, the
        <command>posix</command> environment contains the line:
      
        <screen>
        	+FLAG &quot;-WI,-Yposix&quot;
        </screen>
      
        Another kind of option that it might be useful to include in
        an archive is a <option>-l</option><option>str</option>
        option. In this way all the information on the install-time
        options can be specified at produce-time.</para>
      
      <para>A final example of an option which might be included in an
        archive is the <option>-message</option> option. The
        command-line option <option>-message</option>
        <option>str</option> causes <command>tcc</command> to print
        the message <option>str</option> with any <command>@</command>
        characters in <option>str</option> replaced by spaces (there
        are problems with escaping spaces). So, by using the
        command-line option:
      
        <screen>
        	<option>-WI,-message&quot;Installing@TDF@archive@...&quot;</option>
        </screen>
      
        one can produce an archive which prints a message as it is
        installed.  This option is also useful in environments. By
        inserting the line:

        <screen>
        	+FLAG &quot;-message Reading@tcc@environment@...&quot;
        </screen>

        one can produce an environment which prints a message whenever it
        is read.</para>
    </sect1>
  </chapter>

<!--
    <TITLE>tcc User's Guide: Miscellaneous Topics</TITLE>
    </HEAD>
    <sect1 id="S43">
    <H1>tcc User's Guide</H1>
    <title>January 1998</title>
    <DL>
    <DT><A HREF="#S44"><option>6.1</option> - Intermodular Checks<DD>
    <DT><A HREF="#S45"><option>6.2</option> - Debugging and Profiling<DD>
    <DT><A HREF="#S46"><option>6.3</option> - The System Environment<DD>
    <DT><A HREF="#S47"><option>6.4</option> - The Temporary Directory<DD>
    <DT><A HREF="#S48"><option>6.5</option> - The tcc Option Interpreter
-->

  <chapter id="C6">
    <title>Miscellaneous Topics</title>

    <para>In this section we draw together a number of miscellaneous
      topics not so far covered.</para>

    <sect1 id="S42">
      <title>Intermodular Checks</title>

      <para>All of the extra compiler checks described in section
        5.1.3 refer to a single C source file, however
        <command>tcc</command> also has support for a number of
        intermodular checks. These checks are enabled by means of the
        <option>-im</option> command-line option. This causes the
        producer to create for each C source file, in addition to its
        TDF capsule output file, a second output file, called a C spec
        file, containing a description of the C objects declared in
        that file. This C spec file is kept associated with the target
        independent TDF as it is transformed to a target dependent
        capsule, an assembly source file, and a binary object file.
        When these binary object files are linked then the associated
        C spec files are also linked using the C spec linker,
        <command>spec_linker</command>, into a single C spec file.
        This file is named <command>a.k</command> by default.  It is
        this linking process which constitutes the intermodular
        checking (in fact <command>spec_linker</command> may also be
        invoked at the TDF merging level when the <option>-M</option>
        option is used).</para>

      <para>When intermodular checks are specified,
        <command>tcc</command> will also recognise input files with a
        <command>.k</command> suffix as C spec files
        and pass them to the C spec linker.</para>

      <para>The nature of the association between a C spec file and
        its binary object file needs discussion. While these files are
        internal to a single call of <command>tcc</command> it can
        keep track of the association, however if the compilation is
        halted before linking it needs to preserve this association.
        For example in:

        <screen>
        	&gt; tcc -im -c a.c
        </screen>

        the binary object file <command>a.o</command> and the C spec
        file <command>a.k</command> need to be kept together. This is
        done by forming them into a single archive file named
        <command>a.o</command>. When <command>a.o</command> is
        subsequently linked, <command>tcc</command> recognises that it
        is an archive and splits it into its two components, one of
        which it passes to the system linker, and one to the C spec
        linker.</para>

      <para>Intermodular checking is described in more detail in [3].
        In <command>tchk</command> intermodular checking is on by
        default, but may be switched off using
        <option>-im0</option>.<para>
    </sect1>

    <sect1 id="S43">
      <title>Debugging and Profiling</title>

      <para><command>tcc</command> supports options for both symbolic
        debugging using the target machine's default debugger, and
        profiling using <command>prof</command> on those machines
        which have it.</para>

      <para>The <option>-g</option> command-line option causes the
        producer to output extra debugging information in its output
        TDF capsule, and the TDF translator to translate this
        information into the appropriate assembler directives for its
        supported debugger (for details of which debuggers are
        supported by which translators, consult the appropriate manual
        pages). For the translator to have all the diagnostic
        information it requires, not only the TDF capsules output by
        the producer, but also those linked in by the TDF linker from
        the TDF libraries, need to contain this debugging information.
        This is ensured for the standard TDF libraries by having two
        versions of each library, one containing diagnostics and one
        not. By default the environmental identifier
        <command>LINK</command>, which gives the directories which the
        TDF linker should search, is set so that the non-diagnostic
        versions are found. However the <option>-g</option> option
        modifies <command>LINK</command> so that the diagnostic
        versions are found first.</para>

      <para>Depending on the target machine, the <option>-g</option>
        option may also need to modify the behaviour of the system
        assembler and the system linker.  Like all potentially target
        dependent options, <option>-g</option> is implemented by means
        of a standard environment, in this case
        <command>tcc_diag</command>.</para>

      <para>The <option>-p</option> option is likewise implemented by
        means of a standard environment, <command>tcc_prof</command>.
        It causes the producer to output extra information on the
        names of statically declared objects, and the TDF translator
        to output assembler directives which enable
        <command>prof</command> to profile the number of calls to each
        procedure (including static procedures). The behaviour of the
        system assembler and system linker may also be modified by
        <option>-p</option>, depending on the target machine.</para>
    </sect1>

    <sect1 id="S44">
      <title>The System Environment</title>

      <para>In section 4.3 we discussed how <command>tcc</command>
        environments can be used to specify APIs. There is one API
        environment however which is so exceptional that it needs to
        be treated separately. This is the <command>system</command>
        environment, which specifies that <command>tcc</command>
        should emulate <command>cc</command> on the machine on which
        it is being run. The <command>system</command> environment
        specifies that <command>tcc</command> should use the system
        headers directory, <command>/usr/include</command>, as its
        default include file directory, and should define all the
        machine dependent macros which are built into
        <command>cc</command>. It will also specify the 32-bit
        portability table on 32-bit machines.</para>

      <para>Despite the differences from the normal API environments,
        the <command>system </command> environment is indeed
        specifying an API, namely the system headers and libraries on
        the host machine. This means that the <command>.j</command>
        files produced when using this environment are only
        &quot;target independent&quot; in the sense that they can be
        ported successfully to machines which have the exactly the
        same system headers and predefined macros.</para>

      <para>Using the system headers is fraught with difficulties. In
        particular, they tend to be very
        <command>cc</command>-specific. It is often necessary to use
        the <option>-not_ansi</option> and <option>-nepc</option>
        options together with <option>-Ysystem</option> merely to
        negotiate the system headers. Even then,
        <command>tcc</command> may still reject some constructs. Of
        course, the number of problems encountered will vary
        considerably between different machines.</para>

      <para>To conclude, the <command>system</command> environment is
        at best only suitable for experimental compilation. There are
        also potential problems involved with its use. It should
        therefore be used with care.</para>

    <sect1 id="S45">
      <title>The Temporary Directory</title>

      <para>As we have said, <command>tcc</command> creates a
        temporary directory in which to put all the intermediate files
        which are created, but are not to be preserved. By default,
        these intermediate files are left in the temporary directory
        until the end of the compilation, when the temporary directory
        is removed. However, if disk space is short, or a particularly
        large compilation is taking place, the <option>-tidy</option>
        command-line option may be appropriate. This causes
        <command>tcc</command> to remove each unwanted intermediate
        file immediately when it is no longer required.</para>

      <para>The name of the temporary directory created by
        <command>tcc</command> to store the intermediate files is
        generated by the system library routine
        <command>tempnam</command>. It takes the form
        <command>TEMP/tcc????</command>, where <command>TEMP</command>
        is the main <command>tcc</command> temporary directory, and
        <command>????</command> is an automatically generated unique
        suffix.  There are three methods of specifying
        <command>TEMP</command>, listed in order of increasing
        precedence:

        <itemizedlist>
          <listitem>
            <para>by the <command>TEMP</command> environmental
              identifier (usually in the <command>default</command>
              environment),</para>
          </listitem>
          
          <listitem>
            <para>by the <option>-temp</option> <option>dir</option>
              command-line option,</para>
          </listitem>
          
          <listitem>
            <para>by the <command>TMPDIR</command> system
            variable.</para>
          </listitem>
        </itemizedlist>

        Normally <command>TEMP</command> will be a normal temporary
        directory, <command>/tmp </command> or
        <command>/usr/tmp</command> for example, but any directory to
        which the user has write permission may be used. In general,
        the more spare disk space which is available in
        <command>TEMP</command>, the better.</para>
    </sect1>

    <sect1 id="S46">
      <title>The tcc Option Interpreter</title>

      <para>All <command>tcc</command> command-line options and
        environmental directives are actually processed by the same
        method, namely the <command>tcc</command> option interpreter.
        A simple pattern matching algorithm is applied to the input
        and, if a match is found, the corresponding instructions are
        sent to the low-level option interpreter. The command-line
        option
        <option>--</option><option>str</option><option>,</option> ...
        causes <option>str</option> to be passed directly to the
        option interpreter. This is intended primarily to help in
        debugging <command>tcc</command> and not for use by the
        general user. However, if you are interested,
        <option>--1DB</option> is a good place to start.</para>
    <!-- FM pgf ignored -->
      <para>
        <screen>
        	[1]	<option>TDF and Portability</option>, DRA, 1994.
        	[2]	<option>The C to TDF Producer</option>, DRA, 1993.
        	[3]	<option>The TenDRA Static Checker</option>, DRA, 1994.
        	[4]	<option>The TDF Notation Compiler</option>, DRA, 1994.
        </screen>
      </para>
    </sect1>
  </chapter>

<!--
  <TITLE>tcc User's Guide: tcc Reference Guide</TITLE>
  </HEAD>
  <H1>tcc User's Guide</H1>
  <title>January 1998</title>
  <DL>
  <DT><A HREF="#S50"><option>7.1</option> - Input and Output Files<DD>
  <DT><A HREF="#S51"><option>7.2</option> - Compilation Phases<DD>
  <DT><A HREF="#S52"><option>7.3</option> - Command-line Options<DD>
  <DT><A HREF="#S53"><option>7.4</option> - Compilation Modes<DD>
  <DT><A HREF="#S54"><option>7.5</option> - Supported APIs<DD>
  <DT><A HREF="#S55"><option>7.6</option> - Environment Identifiers<DD>
  <DT><A HREF="#S56"><option>7.7</option> - Standard Environments<DD>
  -->

  <chapter id="C7">

  <title>tcc Reference Guide</title>

    <sect1 id="S48">
      <title>Input and Output Files</title>

      <para><command>tcc</command> identifies the file type of the
        input files it is passed by means of their file suffix. The
        recognised file suffixes are as follows:
        
    <table frame="all">
      <title>Input File Suffixes</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Suffix</entry>
              <entry>Code</entry>
              <entry>Description</entry>
            </row>
          </thead> 

          <tbody>
            <row>
              <entry>.c</entry>
              <entry>c</entry>
              <entry>C source file</entry>
            </row>
            <row>
              <entry>.i</entry>
              <entry>i</entry>
              <entry>Preprocessed C source file</entry>
            </row>
            <row>
              <entry>.j</entry>
              <entry>j</entry>
              <entry>Target independent TDF capsule</entry>
            </row>
            <row>
              <entry>.t</entry>
              <entry>t</entry>
              <entry>Target dependent TDF capsule</entry>
            </row>
            <row>
              <entry>.s</entry>
              <entry>s</entry>
              <entry>Assembly source file</entry>
            </row>
            <row>
              <entry>.o</entry>
              <entry>o</entry>
              <entry>Binary object file</entry>
            </row>
            <row>
              <entry>.k</entry>
              <entry>k</entry>
              <entry>C spec file (only if intermodular checks are enabled)</entry>
            </row>
            <row>
              <entry>.p</entry>
              <entry>p</entry>
              <entry>TDF notation source file (only if -Ytnc is specified)</entry>
            </row>
            <row>
              <entry>.pl</entry>
              <entry>P</entry>
              <entry>PL_TDF source file (only if -Ypl_tdf is specified)</entry>
            </row>
            <row>
              <entry>.ta</entry>
              <entry>A</entry>
              <entry>TDF archive</entry>
            </row>
            <row>
              <entry>.G</entry>
              <entry>G</entry>
              <entry>Binasm source file (Mips only)</entry>
            </row>
            <row>
              <entry>.T</entry>
              <entry>T</entry>
              <entry>Assembler symbol table (Mips only)</entry>
            </row>
            <row>
              <entry>other</entry>
              <entry>-</entry>
              <entry>Binary object file</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Each file type is assigned an identifying letter, usually
        corresponding to its file suffix, which may be used in various
        command-line options.  For example, <option>-Fs</option>
        instructs <command>tcc</command> to halt the compilation after
        creating the assembly source files, and is therefore
        equivalent to <option>-S</option>. Similarly <option>-Po
        </option>instructs it to preserve any binary object files it
        creates. There are a couple of special file type codes which
        may be used with the <option>-P</option> option. The option
        <option>-Pa</option> causes all intermediate files to be
        created, whereas <option>-Ph</option> causes the start-up
        file, <command>tcc_startup.h</command>, used by
        <command>tcc</command> to be preserved. The
        <option>-P</option> option can also be used to specify that
        intermediate files of various forms should not be preserved.
        For example, the option<option> -P-o</option> indicates that
        binary object files should not be preserved.</para>

      <para>Most output file names are derived from the input file
        names with a simple substitution of file suffix, however
        certain output files (and other files) have default names.
        These are as follows:</para>

    <table frame="all">
      <title>Default Output Filenames</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Filename</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>a.j</entry>
              <entry>Default merged <literal>TDF</literal> capsule name (with -M option)</entry>
            </row>
            <row>
              <entry>a.out</entry>
              <entry>Default executable name in binary object linking phase</entry>
            </row>
            <row>
              <entry>a.ta</entry>
              <entry>Default output <literal>TDF</literal> archive name</entry>
            </row>
            <row>
              <entry>a.k</entry>
              <entry>Default output <literal>file</literal> in intermodular checks linking phase</entry>
            </row>
            <row>
              <entry><filename>tcc_startup.h</filename></entry>
              <entry>Start-up <literal>file</literal> used by <literal>tcc</literal> for _D and -U options</entry>
            </row>
            <row>
              <entry><filename>tcc_endup.h</filename></entry>
              <entry>End-up <literal>file</literal> used by <literal>tcc</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If there is a single output file, its name may be
        specified using the <option>-o</option> option. The default
        output filenames can also be overridden.  For example,
        <option>-doj b.j</option> sets the default merged TDF capsule
        name to <command>b.j</command>.</para>
    </sect1>

    <sect1 id="S49">
      <title>Compilation Phases</title>

      <para>The various compilation phases under the control of
        <command>tcc</command> may be summarised as follows:</para>
        
    <table frame="all">
      <title>Compilation Phase</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Executable</entry>
              <entry>Code</entry>
              <entry>Action</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><command>tdfc</command></entry>
              <entry>c</entry>
              <entry><simplelist type="vert" columns="1">
                       <member>.c &rarr .j</member>
                       <member>.i &rarr .j</member>
                       <member>.c &rarr .j + .k</member>
                       <member>.i &rarr .j + .k</member>
                     </simplelist></entry>            
              <entry><simplelist type="vert" columns="1">
                       <member>C to <literal>TDF</literal> producer</member>
                       <member></member>
                       <member><emphasis>(in intermodular checking mode)</emphasis></member>
                       <member></member>
                     </simplelist></entry>
            </row>
            <row>
              <entry><command>tld</command></entry>
              <entry>L</entry>
              <entry><simplelist type="vert" columns="1">
                       <member>.j &rarr .t</member>
                       <member><emphasis>n</emphasis> &times .j &rarr .t</member>
                     </simplelist></entry>
              <entry><simplelist type="vert" columns="1">
                       <member><literal>TDF</literal> linker</member>
                       <member><emphasis>(in <literal>TDF</literal> merging mode)</emphasis></member>
                     </simplelist></entry>
            </row>
            <row>        
              <entry><command>trans</command></entry>
              <entry>t</entry>
              <entry>.t &rarr .s</entry>
              <entry><literal>TDF</literal> translator</entry>
            </row>
            <row>
              <entry><command>as</command></entry>
              <entry>a</entry>
              <entry>.s &rarr .o</entry>
              <entry>System assembler</entry>
            </row>
            <row>
              <entry><command>ld</command></entry>
              <entry>l</entry>
              <entry><emphasis>n</emphasis> &times .j &rarr cxcc</entry>
              <entry>System linker</entry>
            </row>
            <row>
              <entry><command>(archiver)</command></entry>
              <entry>J</entry>
              <entry><emphasis>n</emphasis> &times .j &rarr .ta</entry>
              <entry>Archive builder (built into <command>tcc</command>)</entry>
            </row>
            <row>
              <entry><command>(archiver)</command></entry>
              <entry>J</entry>
              <entry>.ta &rarr <emphasis>n</emphasis> &times .j</entry>
              <entry>Archive splitter (built into <command>tcc</command>)</entry> 
            </row>
            <row>
              <entry><command>tdfcpp</command></entry>
              <entry>p</entry>
              <entry>.c &rarr .i</entry>
              <entry>C preprocessor</entry>
            </row>
            <row>
              <entry><command>spec_linker</command></entry>
              <entry>S</entry>
              <entry><emphasis>n</emphasis> &times .k &rarr .k</entry>
              <entry>C spec linker</entry>
            </row>
            <row>
              <entry><command>disp</command></entry>
              <entry>d</entry>
              <entry><simplelist type="vert" columns="1">
                       <member>.j &rarr .p</member>
                       <member>.t &rarr .p</member>
                     </simplelist></entry>
              <entry><literal>TDF</literal> pretty printer</entry>
            </row>
            <row>
              <entry><command>tnc</command></entry>
              <entry>n</entry>
              <entry>.p &rarr .j</entry>
              <entry><literal>TDF</literal> notation compiler</entry>
            </row>
            <row>
              <entry><command>tnc -p</command></entry>
              <entry>n</entry>
              <entry><simplelist type="vert" columns="1">
                       <member>.j &rarr .p</member>
                       <member>.t &rarr .p</member>
                     </simplelist></entry>        
              <entry>Reverse <literal>TDF</literal> notation compiler</entry>
            </row>
            <row>
              <entry><command>pl</command></entry>
              <entry>P</entry>
              <entry>.pl &rarr .j</entry>
              <entry><literal>PL_TDF</literal> compiler</entry>
            </row>
            <row>
              <entry><command>mipstrans</command></entry>
              <entry>t</entry>
              <entry>.t &rarr .G + .T</entry>
              <entry><literal>TDF</literal> to Mips translator</entry>
            </row>
            <row>
              <entry><command>asl</command></entry>
              <entry>A</entry>
              <entry>.G + .T &rarr .o</entry>
              <entry>Auxiliary assembler (Mips only)</entry>
            </row>
            <row>
              <entry><command>cc</command></entry>
              <entry>C</entry>
              <entry>(various)</entry>
              <entry>System C compiler (specified with -cc option)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Each compilation phase is assigned a code letter which is
        used to identify that phase in various command-line options.
        For example, in order to pass the <option>-x</option> option
        to <command>tdfc</command> the <option>-Wc, -x</option>
        command-line option may be used. Similarly, to set the
        <command>tld</command> executable an option of the form
        <option>-EL: /usr/local/bin/tld</option> may be used.</para>

    <sect1 id="S50">
      <title>Command-line Options</title>

      <para>The following options are accepted by
        <command>tcc</command>. They can be given by command-line
        options or the <command>TCCOPTS</command> system variable.
        The spaces in the option descriptions are optional, they show
        where two-part or multi-part options can be split over more
        than one command-line argument.</para>

    <para>INSERT MAN PAGE XREF HERE!</para>
      
      <para>The following two tables list the producer and archiver
      options which can be passed using the <option>-Wc,
      </option><option>opt</option> and <option>-WJ,</option><option>
      opt</option> options, respectively.
      
    <para>INSERT MAN PAGE XREF HERE!</para>

    <table frame="all">
      <title>Archiver Options</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><command>-copy</command> or <command>-c</command></entry> 
              <entry>copies files into archives</entry>
            </row>
            <row>
              <entry><command>-full</command> or <command>-f</command></entry>
              <entry>uses full pathnames for archive links (default)</entry>
            </row>
            <row>
              <entry><command>-link</command> or <command>-l</command></entry>
              <entry>link files into archives (default)</entry>
            </row>
            <row>
              <entry><command>-names</command> or <command>-n</command></entry>
              <entry>uses real names for copied files (default)</entry>
            </row>
            <row>
              <entry><command>-no_names</command> or <command>-nn</command></entry>
              <entry>make up names for copied files</entry>
            </row>
            <row>
              <entry><command>-no_options</command> or <command>-no</command></entry>
              <entry>does not interpret any archived options</entry>
            </row>
            <row>
              <entry><command>-options</command> or <command>-o</command></entry>
              <entry>interprets any archived options (default)</entry>
            </row>
            <row>
              <entry><command>-short</command> or <command>-s</command></entry>
              <entry>uses short pathnames for archive links</entry>
            </row>
          </tbody>
        </tgroup>
      </table>


    </sect1>

    <sect1 id="S51">
      <title>Compilation Modes</title>

      <para>The built-in compilation modes are as follows:

        <itemizedlist>
          <listitem>
            <para><command>Xs</command> (&quot;strict checks&quot;)
              denotes strict ISO/ANSI C with most extra checks enabled
              as warnings.</para>
          </listitem>
          
          <listitem>
            <para><command>Xp</command> (&quot;partial checks&quot;)
              denotes strict ISO/ANSI C with some extra checks
              enabled.</para>
          </listitem>

          <listitem>
            <para><command>Xc</command> (&quot;conformance&quot;)
              denotes strict ISO/ANSI C with no extra checks enabled
              (this is default).</para>
          </listitem>

          <listitem>
            <para><command>Xa</command> (&quot;ANSI-ish&quot;) denotes
              ISO/ANSI C with syntactic relaxations and no extra
              checks.</para>
          </listitem>

          <listitem>
            <para><command>Xt</command> (&quot;traditional&quot;)
              denotes traditional C with no extra checks.</para>
          </listitem>
        </itemizedlist>

      <para>The mode <command>Xs</command> is specified by passing the
        <option>-Xs</option> command-line option to
        <command>tcc</command>, and so on.</para>
    </sect1>

    <sect1 id="S52">
      <title>Supported APIs</title>

      <para>The following standard APIs are supported in the form of
        TenDRA headers:</para>
        
    <table frame="all">
      <title>Supported APIs</title>
        <tgroup cols="3">
           <thead>
             <row>
               <entry>API Name</entry>
               <entry>Description</entry>
               <entry>Comments</entry>
             </row>
           </thead>  

           <tbody>
             <row>
               <entry>ansi</entry>
               <entry>ANSI X3.159</entry>
               <entry>base API (default)</entry>
             </row>
             <row>
               <entry>iso</entry>
               <entry>ISO MSE 9899:1990 (Amendment 1:1993 (E))</entry>
               <entry>base API</entry>
             </row>
             <row>
               <entry>posix</entry>
               <entry>POSIX 1003.1</entry>
               <entry>base API</entry>
             </row>
             <row>
               <entry>posix2</entry>
               <entry>POSIX 1003.2</entry>
               <entry>base API</entry>
             </row>
             <row>
               <entry>xpg3</entry>
               <entry>X/Open Portability Guide 3</entry>
               <entry>base API</entry> 
             </row>
             <row>
               <entry>xpg4</entry>
               <entry>X/Open Portability Guide 4</entry>
               <entry>base API</entry>
             </row>
             <row>
               <entry>cose<superscript>a</superscript></entry>
               <entry>COSE 1170</entry>
               <entry>base API</entry>
             </row>
             <row>
               <entry>svid3</entry>
               <entry>System V Interface Dcnition 3rd Edition</entry>
               <entry>base API</entry>
             </row>
             <row>
               <entry>aes</entry> 
               <entry>AES Revision A</entry>
               <entry>base API</entry> 
             </row>  
             <row>
               <entry>bsd_extn<superscript>b</superscript></entry> 
               <entry>BSD-Like extension for use with POSIX etc.</entry>
               <entry>extension API</entry> 
             </row>  
             <row>
               <entry>x5_lib</entry>
               <entry>X11 (Release 5) X library</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>x5_t<superscript>c</superscript></entry>
               <entry>X11 (Release 5) Intrinsics Toolkit</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>x5_mu</entry>
               <entry>X11 (Release 5) Miscellaneous Utilities</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>x5_aw</entry>
               <entry>X11 (Release 5) Athena Widgets</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>x5_mit<superscript>d</superscript></entry>
               <entry>X11 (Release 5) MIT implementation</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>x5_proto</entry>
               <entry>X11 (Release 5) Protocol Extension</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>x5_ext</entry>
               <entry>X11 (Release 5) Extensions</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>motif</entry>
               <entry>Motif 1.1</entry>
               <entry>extension API</entry>
             </row>
             <row>
               <entry>system</entry>
               <entry>System headers as main API</entry>
             </row>
             <row>
               <entry>system+</entry>
               <entry>System headers as last resort extension API</entry>
             </row>
           </tbody>
         </tgroup>
       </table>

  <itemizedlist>
    <listitem>
      <para>This API description is based on an early version of the COSE 1170 specificationand may be subject to revision.</para>
    </listitem>
    <listitem>
      <para>The BSD extension API consists of a pragmatic collection of BSD types and functions which arc commonly found on non-BSD machines. It roughly corresponds to the BSD  component  of COSE (contains sockets, select, etc.).</para>
    </listitem>
    <listitem>
      <para>The X11 private headers are further protected. If the private headers are required the option -Yx5_private should also be given.</para>
    </listitem>
    <listitem>
      <para>This API is designed to cover some of the commonly used features from MIT-based X11 implementations which are not actually part of the X11 specification.</para>
    </listitem>
  </itemizedlist>

      <para>Each API is specified to <command>tcc</command> by means
        of an environment with the same name as the API. Thus, for
        example, <option>-Yposix</option> specifies POSIX 1003.1. APIs
        are divided into two types, base APIs, such as POSIX 1003.1,
        and extension APIs, such as the X11 (Release 5) Toolkit.  A
        program API consists of a base API plus an number of extension
        APIs, for example, POSIX plus the X11 Toolkit. This example
        would be specified by means of the options <option>-Yposix
        -Yx5_t</option>, in that order (base APIs override the
        previous API, extension APIs add to it).</para>

      <para>Information on the current API may be printed by passing
        the <option>-info</option> option to
        <command>tcc</command>.</para>
    </sect1>

    <sect1 id="S53">
      <title>Environment Identifiers</title>

      <para>The following <command>tcc</command> environment
        identifiers are recognised:</para>
        
    <table frame="all">
      <title>Environment Identifiers</title>
        <tgroup cols="2">
           <thead>
             <row>
               <entry>Identifier</entry>
               <entry>Description</entry>
             </row>
           </thead>

           <tbody>
             <row>
               <entry><literal>*AS</literal></entry>
               <entry>modifies the system assembler executable</entry>
             </row>
             <row> 
               <entry><literal>*AS1</literal></entry>
               <entry>modifies the auxiliary assembler executable (Mips only)</entry>
             </row>
             <row>
               <entry><literal>*CC</literal></entry>
               <entry>modifies the system compiler executable</entry>
             </row>
             <row> 
               <entry><literal>*CRT0</literal></entry>
               <entry>modifies the first list of initial default <literal>.o</literal> files</entry>
             </row>
             <row>
               <entry><literal>*CRT1</literal></entry>
               <entry>modifies the second list of initial default <literal>.o</literal> files </entry>
             </row>
             <row> 
               <entry><literal>*CRTN</literal></entry>
               <entry>modifies the list of final default <literal>.o</literal> files</entry>
             </row>
             <row>
               <entry><literal>*DISP</literal></entry>
               <entry>modifies the <literal>TDF</literal> pretty printer executable</entry>
             </row>
             <row> 
               <entry><literal>+ENVDIR</literal></entry>
               <entry>sets the main environment directory</entry>
             </row>
             <row>
               <entry><literal>+FLAG</literal></entry>
               <entry>passes a flag to <command>tcc</command></entry>
             </row>
             <row> 
               <entry><literal>+FLAG_AS</literal></entry>
               <entry>passes a falg to the assembler</entry>
             </row>
             <row>
               <entry><literal>+FLAG_CC</literal></entry>
               <entry>passes a flag to the system compiler</entry>
             </row>
             <row> 
               <entry><literal>+FLAG_DISP</literal></entry>
               <entry>passes a flag to the <literal>TDF</literal> pretty printer</entry>
             </row>
             <row>
               <entry><literal>+FLAG_INSTALL</literal></entry>
               <entry>passes a flag to the <literal>TDF</literal> archive builder</entry>
             </row>
             <row> 
               <entry><literal>+FLAG_LD</literal></entry>
               <entry>passes a flag to the system linker</entry>
             </row>
             <row>                                   
               <entry><literal>+FLAG_SPEC_LINK</literal></entry>    
               <entry>passes a flag to the C spec linker</entry>
             </row>
             <row>
               <entry><literal>+FLAG_TDFC</literal></entry>
               <entry>passes a flag to the producer</entry>
             </row>
             <row>                                   
               <entry><literal>+FLAG_TDFCPP</literal></entry>    
               <entry>passes a flag to the preprocessor</entry>        
             </row>
             <row>
               <entry><literal>+FLAG_TLD</literal></entry>
               <entry>passes a flag to the <literal>TDF</literal> linker</entry>
             </row>
             <row>                                   
               <entry><literal>+FLAG_TNC</literal></entry>    
               <entry>passes a flag to the <literal>TDF</literal> notation compiler</entry>                       
             </row>
             <row>
               <entry><literal>+FLAG_TRANS</literal></entry>
               <entry>passes a flag to the <literal>TDF</literal> translator</entry>
             </row>
             <row>                                   
               <entry><literal>*INCL</literal></entry>    
               <entry>modifies the list of default include file directories</entry>                       
             </row>
             <row>
               <entry><literal>*INFO</literal></entry>
               <entry>modififes the list of API information</entry>
             </row>
             <row>                                   
               <entry><literal>*LD</literal></entry>    
               <entry>modifies the system linker executable</entry>  
             </row>
             <row>
               <entry><literal>*LIB</literal></entry>
               <entry>modifies the list of default <literal>TDF</literal> libraries</entry>
             </row>
             <row>                                   
               <entry><literal>+LINE_START</literal></entry>    
               <entry>inserts a line in the <command>tcc</command> built-in start-up <literal>file</literal></entry>                       
             </row>
             <row>
               <entry><literal>+LINE_END</literal></entry>
               <entry>>inserts a line in the <command>tcc</command> built-in end-up <literal>file</literal></entry>
             </row>
             <row>                                   
               <entry><literal>*LINK</literal></entry>    
               <entry>modifies the list of default <literal>TDF</literal> library directories</entry>                       
             </row>
             <row>
               <entry><literal>+MACHINE</literal></entry>
               <entry>sets the target machine type</entry>
             </row>
             <row>                                   
               <entry><literal>+PORTABILITY</literal></entry>    
               <entry>sets the producer portability table</entry>        
             </row>
             <row>
               <entry><literal>*SPEC_LINK</literal></entry>
               <entry>modifies the C spec linker executable</entry>
             </row>
             <row>                                   
               <entry><literal>*STARTUP</literal></entry>    
               <entry>modifies the list of default producer start-up files</entry>
             </row>
             <row>
               <entry><literal>*STARTUP_DIR</literal></entry>
               <entry>modifies the list of default start-up directories</entry>
             </row>
             <row>                                   
               <entry><literal>*SYS_LIB</literal></entry>    
               <entry>modifies the list of default system libraries</entry>
             </row>
             <row>
               <entry><literal>*SYS_LIBC</literal></entry>
               <entry>modifies the list of standard system libraries</entry>
             </row>
             <row>                                   
               <entry><literal>*SYS_LINK</literal></entry>    
               <entry>modifies the list of default system library directories</entry>      
             </row>
             <row>
               <entry><literal>*TDFC</literal></entry>
               <entry>modifies the producer executable</entry>
             </row>
             <row>                                   
               <entry><literal>*TDFCPP</literal></entry>    
               <entry>modifies the preprocessor executable</entry>     
             </row>
             <row>
               <entry><literal>+TEMP</literal></entry>
               <entry>sets the temporary directory</entry>
             </row>
             <row> 
               <entry><literal>*TLD</literal></entry>
               <entry>modifies the <literal>TDF</literal> linker executable</entry>
             </row>
             <row> 
               <entry><literal>*TNC</literal></entry>
               <entry>modifies the <literal>TDF</literal> notation compiler executable</entry>
             </row>
             <row> 
               <entry><literal>*TRANS</literal></entry>
               <entry>modifies the <literal>TDF</literal> translator executable</entry>
             </row>
             <row> 
               <entry><literal>+VERSION</literal></entry>
               <entry>sets the target machine version (Mips only)</entry>
             </row>
           </tbody>
         </tgroup>
       </table>

      <para><command>*</command> stands for any of the allowed
        environment modifiers <command>+</command>,
        <command>&lt;</command> or <command>&gt;</command>.</para>
    </sect1>

    <sect1 id="S54">
      <title>Standard Environments</title>

      <para>In addition to the environments implementing the supported
        APIs (see section 7.5. on page 31), the following environments
        are standard:</para>

    <table frame="all">
      <title>Standard Environments</title>
        <tgroup cols="2">
           <thead>
             <row>
               <entry>Environment</entry>
               <entry>Description</entry>
             </row>
           </thead>

           <tbody>
             <row>
               <entry><literal>default</literal></entry>
               <entry>default settings (built into <command>tcc</command>)</entry>
             </row>
             <row>
               <entry><literal>tcc_diag</literal></entry>
               <entry>used to implement the -g option</entry>
             </row>
             <row>
               <entry><literal>tcc_pp</literal></entry>
               <entry>used to implement the -E and -P options</entry>
             </row>
             <row>
               <entry><literal>tcc_prof</literal></entry>
               <entry>used to implement the -p option</entry>
             </row>
             <row>
               <entry><literal>tcc_time</literal></entry>
               <entry>used to implement the -time option</entry>
             </row>
             <row>
               <entry><literal>wsl</literal></entry>
               <entry>used to implement the -wsl option</entry>
             </row>
             <row>
               <entry><literal>Goption</literal></entry>
               <entry>used to implement the -G option</entry>
             </row>
             <row>
               <entry><literal>K-</literal><emphasis>item</emphasis></entry>
               <entry>used to implement the -K <emphasis>item</emphasis> option</entry>
             </row>
             <row>
               <entry><literal>Versions</literal></entry>
               <entry>used to implement the -V option</entry>
             </row>
             <row>
               <entry><literal>X</literal><emphasis>mode</emphasis></entry>
               <entry>used to implement the -X <emphasis>mode</emphasis> option</entry>
             </row>
             <row>
               <entry><literal>Z-</literal><emphasis>str</emphasis></entry>
               <entry>used to implement the -Z <emphasis>str</emphasis> option</entry>
             </row>
             <row>
               <entry><literal>16bit</literal></entry>
               <entry>specifies the minimal integer sizes allowed by ANSI</entry>
             </row>
             <row>
               <entry><literal>32bit</literal></entry>
               <entry>specifies the integer sized found on most 32-bit machines</entry>
             </row>
             <row>
               <entry><literal>common</literal></entry>
               <entry>equivalent to <literal>32bit</literal></entry>
             </row>
             <row>
               <entry><literal>makelib</literal></entry>
               <entry>used to construct <literal>TDF</literal> libraries</entry>
             </row>
             <row> 
               <entry><literal>pl_tdf</literal></entry>
               <entry>used to specify the use of the <literal>PL_TDF</literal> compiler</entry>
             </row>
             <row>
               <entry><literal>status</literal></entry>
               <entry>used to make report its environment status</entry>
             </row>   
             <row>
               <entry><literal>tdp</literal></entry>
               <entry>used in <literal>TDF</literal> library building</entry>
             </row>   
             <row>
               <entry><literal>tnc</literal></entry>
               <entry>used to specify the use of the <literal>TDF</literal> notation compiler</entry>
             </row>                 
           </tbody>
         </tgroup>
       </table>

    </sect1>
  </chapter>
</book>
