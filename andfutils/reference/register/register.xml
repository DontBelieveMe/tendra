<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<!--
	$Id$
-->

<book xmlns:dt="http://xml.water-powered.com/docs">
	<bookinfo>
		<title>The <acronym>TDF</acronym> Token Register</title>


		<othercredit class="copyeditor">
			<firstname>Katherine</firstname>
			<surname>Flavel</surname>
			<affiliation><orgname>The Ten<acronym>DRA</acronym> Project</orgname></affiliation>
		</othercredit>
		<corpauthor>DERA</corpauthor>

		<pubdate>January 1998</pubdate>
		<pubdate>2007</pubdate>

		<copyright>
			<year>2007</year>
			<holder>The Ten<acronym>DRA</acronym> Project</holder>
		</copyright>

		<copyright>
			<!-- Crown Copyright (c) 1998 -->
			<year>1998</year>
			<holder>DERA</holder>
		</copyright>
	</bookinfo>

	<chapter id="S2">
		<title>Introduction</title>

		<section id="S3">
			<title>Background</title>

			<para><acronym>TDF</acronym> is an interface used for architecture neutral and programming
				language neutral representation of program. It is used both within
				portable language specific compilation systems, and for architecture
				neutral distribution of compiled programs. For full details see
				<dt:docs name="reference/specification"/>.</para>

			<para><acronym>TDF</acronym> tokens offer a general encapsulation and expansion mechanism which
				allows any implementation detail to be delayed to the most appropriate
				stage of program translation. This provides a means for encapsulating
				any target dependencies in a neutral form, with specific implementations
				defined through standard <acronym>TDF</acronym> features. This raises a natural opportunity
				for well understood sets of <acronym>TDF</acronym> tokens to be included along with <acronym>TDF</acronym>
				itself as interface between <acronym>TDF</acronym> tools.</para>

			<para>This first revision includes additional tokens for accessing variable
				parameter lists (see <xref linkend="S17"/>), and a C mapping
				token to support the optional type <literal>long long int</literal>.</para>
		</section>

		<section id="S4">
			<title>Token Register Objectives</title>

			<para>As <acronym>TDF</acronym> tokens may be used to represent any piece of <acronym>TDF</acronym>, they may
				be used to supplement any <acronym>TDF</acronym> interface between software tools. However,
				that raises the issue of control authority for such an interface.
				In many cases, the interfaces may be considered to <quote>belong</quote> to a particular
				tool. In other cases, the names and specifications of tokens need
				to be recorded for common use.</para>

			<para>This token register is used to record the names and specifications
				of tokens which may need to be assumed by more than one software tool.
				It also defines a naming scheme which should be used consistently
				to avoid ambiguity between tokens.</para>

			<para>Five classes of tokens are identified:

				<itemizedlist>
					<listitem>
						<para>target dependency tokens, which are concerned with describing
							target architecture or translator detail;</para>
					</listitem>

					<listitem>
						<para>basic mapping tokens, which relate general language features to
							architecture detail;</para>
					</listitem>

					<listitem>
						<para><acronym>TDF</acronym> interface tokens, which may be required
							to complete the specification of some <acronym>TDF</acronym> constructs;</para>
					</listitem>

					<listitem>
						<para>language programming interfaces (<acronym>LPI</acronym>) which
							may be specific to a particular producer;</para>
					</listitem>

					<listitem>
						<para>application programming interfaces (<acronym>API</acronym>).</para>
					</listitem>
				</itemizedlist>

			These classes are discussed separately, in <xref linkend="S6"/>
			to <xref linkend="S21"/> below.</para>
		</section>
	</chapter>

	<chapter id="S5">
		<title>Naming scheme</title>

		<para>A flat name space will suffice for <acronym>TDF</acronym> token names if producer writers
			adopt the simple constraints described here. <acronym>TDF</acronym> has separate provision
			for a hierarchic unique naming scheme, but that was intended for a
			specific purpose that has not yet been realised.</para>

		<para>External names for program or application specific tokens should be
			confined to <quote>simple names</quote>, which we define to mean that they consist
			only of letters, digits and underscore, the characters allowed in
			C identifiers. Normally there will be very few such external names,
			as tokens internal to a single capsule do not require to be named.
			All other token names will consist of some controlled prefix followed
			by a simple name, with the prefix identifying the control authority.</para>

		<para>For <acronym>API</acronym> tokens, the prefix will consist of a sequence of simple names,
			each followed by a dot, where the first simple name is the name of
			the <acronym>API</acronym> as listed or referred to in <xref linkend="S21"/>.</para>

		<para>The prefix for producer specific and target dependency tokens will
			begin and end with characters that distinguish them from the above
			cases. However, common tools such as <!-- TODO application tags -->DISP, TNC and PL-<acronym>TDF</acronym> assume that
			token names contain only letters, digits, underscore, dot, and/or
			twiddle<!-- TODO tilde? -->.</para>

		<para>The following prefixes are currently reserved:

			<variablelist>
				<varlistentry>
					<term><code>~</code></term>

					<listitem>
						<para><acronym>TDF</acronym> interface tokens as specified in
							<xref linkend="S14"/> below, and also <acronym>LPI</acronym> tokens
							specific to <acronym>DRA</acronym>'s C producer.</para>
						<!-- TODO split into ~ and ~c. respectively? - kate -->
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><code>.~</code></term>

					<listitem>
						<para>Registered target dependency tokens as specified
							in <xref linkend="S6"/> below, and basic mapping tokens specified
							in section <xref linkend="S11"/>.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><code>~c.</code></term>

					<listitem>
						<para><acronym>LPI</acronym> tokens specific to <acronym>DRA</acronym>'s C++ producer,
							other than those it shares with the C producer.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><code>.Et~</code></term>

					<listitem>
						<para><acronym>LPI</acronym> tokens specific to Etnoteam's Fortran77 producer.</para>
					</listitem>
				</varlistentry>
			</variablelist>
			</para>
	</chapter>

	<chapter id="S6">
		<title>Target dependency tokens</title>

		<para>Target dependency tokens provide a common interface to simple constructs
			where the required detail for any specific architecture can be expressed
			within <acronym>TDF</acronym>, but the detail will be architecture specific. Every installer
			should have associated with it, a capsule containing the installer
			specific definitions of all the tokens specificed within
			<xref linkend="S6"/>.</para>

		<para>Some of these tokens provide information about the integer and floating
			point variety representations supported by an installer, in a form
			that may be used by <acronym>TDF</acronym> analysis tools for architecture specific analysis,
			or by library generation tools when generating an architecture specific
			version of a library. Other target dependency tokens provide commonly
			required conversion routines.</para>

		<para>It is recommended that these tokens should not be used directly within
			application programs. They are designed for use within <acronym>LPI</acronym> definitions,
			which can provide a more appropriate interface for applications.</para>

		<section id="S7">
			<title>Integer variety representations</title>

			<para>Since <acronym>TDF</acronym> specifies integer representations to be twos-complement,
				the number of bits required to store an integer variety representation
				fully specifies that representation. The minimum or maximum signed
				or unsigned integer that can be represented within any variety representation
				can easily be determined from the number of bits.</para>

			<section>
				<title><code>.~rep_var_width</code></title>

				<para><programlisting language="TDF">
<literal>w</literal>:	NAT
	-&gt; NAT</programlisting>


					If <literal>w </literal>lies within the range of <code>VARIETY</code> sizes supported
					by the associated installer, <literal>rep_var_width</literal>(<literal>w</literal>) will be
					the number of bits required to store values of <code>VARIETY</code>
					<literal>var_width</literal>(<literal>b</literal>,<literal>w</literal>), for any <code>BOOL</code> <literal>b</literal>.</para>

				<para>If <literal>w </literal>is outside the range of <code>VARIETY</code> sizes supported
					by the associated installer, <literal>rep_var_width</literal>(<literal>w</literal>) will be
					0.</para>

			</section>

			<section>
				<title><code>.~rep_atomic_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~rep_atomic_width</literal> will be the number of bits required to store
					values of some <code>VARIETY</code> <literal>v </literal>such that <literal>assign</literal>
					and <literal>assign_with_mode</literal> are atomic operations if the value assigned
					has <code>SHAPE</code> <literal>integer</literal>(<literal>v</literal>). The <acronym>TDF</acronym> specification
					guarantees existence of such a number.</para>
			</section>

			<section id="S8">
				<title>Floating variety representations</title>

				<para>Floating point representations are much more diverse than integers,
					but we may assume that each installer will support a finite set of
					distinct representations. For convenience in distinguishing between
					these representations within architecture specific <acronym>TDF</acronym>, the set of
					distinct representations supported by any specific installer are stated
					to be ordered into a sequence of non-decreasing memory size. An analysis
					tool can easily count through this sequence to determine the properties
					of all supported representations, starting at 1 and using <literal>.~rep_fv_width
					</literal> to test for the sequence end.</para>

			<section>
				<title><code>.~rep_fv</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; FLOATING_VARIETY</programlisting>

					<literal>.~rep_fv</literal>(<literal>n</literal>) will be the <code>FLOATING_VARIETY</code>
					whose representation is the <literal>n</literal>th of the sequence of supported
					floating point representations.
					<literal>n</literal> will lie within this range.</para>
			</section>

			<section>
				<title><code>.~rep_fv_width</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; NAT</programlisting>

					If <literal>n</literal> lies within the sequence range of supported floating point
					representations, <literal>.~rep_fv_width</literal>(<literal>n</literal>) will be the number
					of bits required to store values of <code>FLOATING_VARIETY</code>
					<literal>.~rep_fv</literal>(<literal>n</literal>).</para>

				<para>If <literal>n</literal> is outside the sequence range of supported floating point
					representations, <literal>.~rep_fv_width</literal>(<literal>n</literal>) will be 0.</para>
			</section>

			<section>
				<title><code>.~rep_fv_radix</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; NAT</programlisting>

					<literal>.~rep_fv_radix</literal>(<literal>n</literal>) will be the radix used in the representation
					of values of <code>FLOATING_VARIETY</code> <literal>.~rep_fv</literal>(<literal>n</literal>).</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>

			<section>
				<title><code>.~rep_fv_mantissa</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; NAT</programlisting>

					<literal>.~rep_fv_mantissa</literal>(<literal>n</literal>) will be the number of base
					<literal>.~rep_fv_radix</literal>(<literal>n</literal>) digits in the mantissa representation
					of values of <code>FLOATING_VARIETY</code> <literal>.~rep_fv</literal>(<literal>n</literal>).</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>

			<section>
				<title><code>.~rep_fv_min_exp</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; NAT</programlisting>

					<literal>.~rep_fv_min_exp</literal>(<literal>n</literal>) will be the maximum integer
					<literal>m</literal> such that (<literal>.~rep_fv_radix</literal>(<literal>n</literal>))<literal>-m</literal>
					is exactly representable (though not necessarily normalised) by the
					<code>FLOATING_VARIETY</code> <literal>.~rep_fv</literal>(<literal>n</literal>).</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>

			<section>
				<title><code>.~rep_fv_max_exp</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; NAT</programlisting>

					<literal>.~rep_fv_max_exp</literal>(<literal>n</literal>) will be the maximum integer
					<literal>m</literal> such that (<literal>.~rep_fv_radix</literal>(<literal>n</literal>))<literal>m</literal>
					is exactly representable by the <code>FLOATING_VARIETY</code> <literal>.~rep_fv</literal>(
					<literal>n</literal>).</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>

			<section>
				<title><code>.~rep_fv_epsilon</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; EXP FLOATING .~rep_fv(<literal>n</literal>)</programlisting>

					<literal>.~rep_fv_epsilon</literal>(<literal>n</literal>) will be the smallest strictly positive
					real <literal>x </literal>such that (1.0 + <literal>x</literal>) is exactly representable
					by the <code>FLOATING_VARIETY</code> <literal>.~rep_fv(n)</literal>.</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>

			<section>
				<title><code>.~rep_fv_min_val</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; EXP FLOATING .~rep_fv(<literal>n</literal>)</programlisting>

					<literal>.~rep_fv_min_val</literal>(<literal>n</literal>) will be the smallest strictly positive
					real number that is exactly representable (though not necessarily
					normalised)) by the <code>FLOATING_VARIETY</code> <literal>.~rep_fv(n)</literal>.</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>

			<section>
				<title><code>.~rep_fv_max_val</code></title>

				<para><programlisting language="TDF">
<literal>n</literal>:	NAT
	-&gt; EXP FLOATING .~rep_fv(<literal>n</literal>)</programlisting>

					<literal>.~rep_fv_max_val</literal>(<literal>n</literal>) will be the largest real number
					that is exactly representable by the <code>FLOATING_VARIETY</code>
					<literal>.~rep_fv(n)</literal>.</para>

				<para><literal>n</literal> will lie within the sequence range of supported floating
					point representations.</para>
			</section>
		</section>

		<section id="S9">
			<title>Non-numeric representations</title>

			<section>
				<title><code>.~ptr_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~ptr_width</literal> will be the minimum <literal>.~rep_var_width</literal>(<literal>w</literal>)
					for any <literal>w </literal>such that any pointer to any alignment may be converted
					to an integer of <code>VARIETY</code> <literal>var_width</literal>(<literal>b</literal>,<literal>w</literal>),
					for some <code>BOOL</code> <literal>b</literal>, and back again without loss of
					information, using the conversions <literal>.~ptr_to_int</literal> and <literal>.~int_to_ptr</literal>
					(q.v.).</para>
			</section>

			<section>
				<title><code>.~best_div</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~best_div</literal> is 1 or 2 to indicate preference for class 1 or
					class 2 division and modulus (as defined in the <acronym>TDF</acronym> Specification).
					This token would be used in situations where either class is valid
					but must be used consistently.</para>
			</section>

			<section>
				<title><code>.~little_endian</code></title>

				<para><programlisting language="TDF">
	-&gt; BOOL</programlisting>

					<literal>.~little_endian</literal> is a property of the relationship between different
					variety representations and arrays. If an array of a smaller variety
					can be mapped onto a larger variety, and <literal>.~little_endian</literal>
					is true, then smaller indices of the smaller variety array map onto
					smaller ranges of the larger variety. If <literal>.~little_endian</literal>
					is false, no such assertion can be made.</para>
			</section>
		</section>

		<section id="S10">
			<title>Common conversion routines</title>

			<para>This subsection contains a set of conversion routines between values
				of different shapes, that are not required to have any specific meaning
				apart from reversability. If the storage space requirements for the
				two shapes are identical, the conversion can usually be achieved without
				change of representation. When that is the case, and if the two shapes
				can be stored at a common alignment, the conversion can simply be
				achieved by assignment via a common union, which will ensure the required
				alignment consistency.</para>
			</section>

			<section>
				<title><code>.~ptr_to_ptr</code></title>

				<para><programlisting language="TDF">
<literal>a1</literal>:	ALIGNMENT
<literal>a2</literal>:	ALIGNMENT
<literal>p</literal>:	EXP POINTER(<literal>a1</literal>)
	-&gt; EXP POINTER(<literal>a2</literal>)</programlisting>

					<literal>.~ptr_to_ptr</literal> converts pointers from one pointer shape to another.</para>

				<para>If <literal>p</literal> is any pointer with alignment <literal>a1</literal>, then <literal>.~ptr_to_ptr
					</literal>(<literal>a2</literal>, <literal>a1</literal>, <literal>.~ptr_to_ptr</literal>(<literal>a1</literal>,
					<literal>a2</literal>, <literal>p</literal>)) shall result in the same pointer <literal>p</literal>, provided
					that the number of bits required to store a pointer with alignment
					<literal>a2</literal> is not less than that required to store a pointer with alignment
					<literal>a1</literal>.</para>
			</section>

			<section>
				<title><code>.~ptr_to_int</code></title>

				<para><programlisting language="TDF">
<literal>a</literal>:	ALIGNMENT
<literal>v</literal>:	VARIETY
<literal>p</literal>:	EXP POINTER(<literal>a</literal>)
	-&gt; EXP INTEGER(<literal>v</literal>)</programlisting>

					<literal>.~ptr_to_int</literal> converts a pointer to an integer. The result is
					undefined if the <code>VARIETY</code> v is insufficient to distinguish
					between all possible distinct pointers <literal>p</literal> of alignment <literal>a</literal>.</para>
			</section>

			<section>
				<title><code>.~int_to_ptr</code></title>

				<para><programlisting language="TDF">
<literal>v</literal>:	VARIETY
<literal>a</literal>:	ALIGNMENT
<literal>i</literal>:	EXP INTEGER(<literal>v</literal>)
	-&gt; EXP POINTER(<literal>a</literal>)</programlisting>

					<literal>.~int_to_ptr</literal> converts an integer to a pointer. The result is
					undefined unless the integer i was obtained without modification from
					some pointer using <literal>.~ptr_to_int</literal> with the same variety and alignment
					arguments.</para>

				<para>If <literal>p</literal> is any pointer with alignment <literal>a</literal>, and <literal>v</literal>
					is <literal>var_width</literal>(<literal>b</literal>, <literal>.~ptr_width</literal>) for some <code>BOOL</code>
					<literal>b</literal>, then <literal>.~int_to_ptr</literal>(<literal>v</literal>, <literal>a</literal>, <literal>.~ptr_to_int
					</literal>(<literal>a</literal>, <literal>v</literal>, <literal>p</literal>)) shall result in the same pointer
					<literal>p</literal>.</para>
			</section>

			<section>
				<title><code>.~f_to_ptr</code></title>

				<para><programlisting language="TDF">
<literal>a</literal>:	ALIGNMENT
<literal>fn</literal>:	EXP PROC
	-&gt; EXP POINTER(<literal>a</literal>)</programlisting>

					<literal>.~f_to_ptr</literal> converts a procedure to a pointer. The result is
					undefined except as required for consistency with <literal>.~ptr_to_f</literal>.</para>
			</section>

			<section>
				<title><code>.~ptr_to_f</code></title>

				<para><programlisting language="TDF">
<literal>a</literal>:	ALIGNMENT
<literal>p</literal>:	EXP POINTER(<literal>a</literal>)
	-&gt; EXP PROC</programlisting>

					<literal>.~ptr_to_f</literal> converts a pointer to a procedure. The result is
					undefined unless the pointer p was obtained without modification from
					some procedure <literal>f</literal> using <literal>.~f_to_ptr</literal>(<literal>a</literal>,
					<literal>f</literal>). The same procedure <literal>f</literal> is delivered.</para>
			</section>
		</section>
	</chapter>

	<chapter id="S11">
		<title>Basic mapping tokens</title>

		<para>Basic mapping tokens provide target specific detail for specific language
			features that are defined to be target dependent. This detail need
			not be fixed for a particular target architecture, but needs to provide
			compatibility with any external library with which an application
			program is to be linked.</para>

		<para>Tokens specific to the C and Fortran language families are included.
			Like the target dependency tokens, it is again recommended that these
			tokens should not be used directly within application programs. They
			are designed for use within <acronym>LPI</acronym> definitions, which can provide a more
			appropriate interface for applications.</para>

		<para>Every operating system variant of an installer should have associated
			with it, a capsule containing the definitions of all the tokens specificed
			within <xref linkend="S11"/>.</para>

		<section id="S12">
			<title>C mapping tokens</title>

			<section>
				<title><code>.~char_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~char_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					C type <literal>char</literal>.</para>
			</section>

			<section>
				<title><code>.~short_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~short_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					C type <literal>short int</literal>.</para>
			</section>

			<section>
				<title><code>.~int_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~int_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					C type <literal>int</literal>.</para>
			</section>

			<section>
				<title><code>.~long_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~long_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					C type <literal>long int</literal>.</para>
			</section>

			<section>
				<title><code>.~longlong_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~longlong_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					C type <literal>long long int</literal>.</para>
			</section>

			<section>
				<title><code>.~size_t_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~size_t_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					C type <literal>size_t</literal>. It will be the same as one of <literal>.~short_width</literal>,
					<literal>.~int_width</literal>, or <literal>.~long_width</literal>.</para>
			</section>

			<section>
				<title><code>.~fl_rep</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~fl_rep</literal> is the sequence number (see <xref linkend="S8"/>)
					of the floating point representation to be used for values of C type
					<literal>float</literal>.</para>
			</section>

			<section>
				<title><code>.~dbl_rep</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~dbl_rep</literal> is the sequence number (see subsection 3.2) of the
					floating point representation to be used for values of C type
					<literal>double</literal>.</para>
			</section>

			<section>
				<title><code>.~ldbl_rep</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~ldbl_rep</literal> is the sequence number (see subsection 3.2) of the
					floating point representation to be used for values of C type
					<literal>long double</literal>.</para>
			</section>

			<section>
				<title><code>.~pv_align</code></title>

				<para><programlisting language="TDF">
	-&gt; ALIGNMENT</programlisting>

					<literal>.~pv_align</literal> is the common alignment for all pointers that can
					be represented by the C generic pointer type <literal>void*</literal>. For architecture
					independence, this would have to be a union of several alignments,
					but for many installers it can be simplified to
					<literal>alignment</literal>(<literal>integer</literal>(<literal>var_width</literal>(<literal>false</literal>,
					<literal>.~char_width</literal>))).</para>
			</section>

			<section>
				<title><code>.~min_struct_rep</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~min_struct_rep</literal> is the number of bits required to store values
					of the smallest C integral type which share the same alignment properties
					as a structured value whose members are all of that same integral
					type. It will be the same as one of <literal>.~char_width</literal>,
					<literal>.~short_width</literal>, <literal>.~int_width</literal>, or <literal>.~long_width</literal>.</para>
			</section>

			<section>
				<title><code>.~char_is_signed</code></title>

				<para><programlisting language="TDF">
	-&gt; BOOL</programlisting>

					<literal>.~char_is_signed</literal> is <literal>true</literal> if the C type <literal>char</literal>
					is treated as signed, or <literal>false</literal> if it is unsigned.</para>
			</section>

			<section>
				<title><code>.~bitfield_is_signed</code></title>

				<para><programlisting language="TDF">
	-&gt; BOOL</programlisting>

					<literal>.~bitfield_is_signed</literal> is <literal>true</literal> if bitfield members of
					structures in C are treated as signed, or <literal>false</literal> if unsigned.</para>
			</section>
		</section>

		<section id="S13">
			<title>Fortran mapping tokens</title>

			<section>
				<title><code>.~F_char_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~F_char_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					Fortran77 type <literal>CHARACTER</literal>.</para>

				<para>In most cases, <literal>.~F_char_width</literal> is the same as <literal>.~char_width</literal>.</para>
			</section>

			<section>
				<title><code>.~F_int_width</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~F_int_width</literal> is the number of bits required to store values
					of the representation <code>VARIETY</code> that corresponds to the
					Fortran77 type <literal>INTEGER</literal>.</para>

				<para>In most cases, <literal>.~F_int_width</literal> is the same as <literal>.~int_width</literal>.</para>
			</section>

			<section>
				<title><code>.~F_fl_rep</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~F_fl_rep</literal> is the sequence number (see <xref linkend="S8"/>)
					of the floating point representation to be used for values of Fortran77
					type <literal>REAL</literal>, with the constraint that <literal>.~rep_fv_width</literal>(<literal>.~F_fl_rep
					</literal>) = <literal>.~F_int_width</literal>.</para>

				<para>If this constraint cannot be met, <literal>.~F_fl_rep</literal> will be 0.</para>
			</section>

			<section>
				<title><code>.~F_dbl_rep</code></title>

				<para><programlisting language="TDF">
	-&gt; NAT</programlisting>

					<literal>.~F_dbl_rep</literal> is the sequence number (see subsection 3.2) of
					the floating point representation to be used for values of Fortran77
					type <literal>DOUBLE PRECISION</literal>, with the constraint that <literal>.~rep_fv_width</literal>(
					<literal>.~F_dbl_rep</literal>) = 2 * <literal>.~F_int_width</literal>.</para>

				<para>If this constraint cannot be met, <literal>.~F_dbl_rep</literal> will be 0.</para>
			</section>
		</section>
	</chapter>

	<chapter id="S14">
		<title><acronym>TDF</acronym> Interface tokens</title>

		<para>A very few specifically named tokens are referred to within the <acronym>TDF</acronym>
			specification, which are required to complete the ability to use certain
			<acronym>TDF</acronym> constructs. Responsibility for providing appropriate definitions
			for these tokens is indicated with the specifications below.</para>

		<para>Similarly, a few tokens are specified within the <acronym>TDF</acronym> Diagnostic Specification.</para>

		<section id="S15">
			<title>Exception handling</title>

			<section>
				<title><code>~Throw</code></title>

				<para><programlisting language="TDF">
	<literal>n</literal>:	NAT
		-&gt; EXP BOTTOM</programlisting>

					The <code>EXP</code> <literal>e</literal> defined as the body of this token will
					be evaluated on occurrence of any error whose <code>ERROR_TREATMENT</code>
					is <literal>trap</literal>. The type of error can be determined within <literal>e</literal>
					from the NAT <literal>n</literal>, which will be <literal>error_val(ec)</literal> for some <code>ERROR_CODE</code>
					<literal>ec</literal>. The token definition body <literal>e</literal> will typically consist
					of a <literal>long_jump</literal> to some previously set exception handler.</para>

				<para>Exception handling using <literal>trap</literal> and ~<literal>Throw</literal> will usually
					be determined by producers for languages that specify their own exception
					handling semantics. Responsibility for the <literal>~Throw</literal> token definition
					will therefore normally rest with producers, by including this token
					within the producer specific <acronym>LPI</acronym>.</para>
			</section>

			<section>
				<title><code>~Set_signal_handler</code></title>

				<para><programlisting language="TDF">
	-&gt; EXP OFFSET (locals_alignment, locals_alignment)</programlisting>

					<literal>~Set_signal_handler</literal> must be applied before any use of the
					<code>ERROR_TREATMENT</code> <literal>trap</literal>, to indicate the need for
					exception trapping. Responsibility for the <literal>~Set_signal_handler</literal>
					token definition will rest with installers. Responsibility for applying
					it will normally rest with producers.</para>

				<para>The resulting offset value will contain the amount of space beyond
					any stack limit, which must be reserved for use when handling a
					<literal>stack_overflow</literal> trap raised by exceeding that limit.</para>
			</section>

			<section>
				<title><code>~Sync_handler</code></title>

				<para><programlisting language="TDF">
	-&gt; EXP TOP</programlisting>

					<literal>~Sync_handler</literal> delays subsequent processing until any pending
					exceptions have been raised, as necessary to synchronise exception
					handler modification. It must be applied immediately prior to any
					action that modifies the effect of <literal>~Throw</literal>, such as assignment
					to a variable holding an exception handler as <literal>long_jump</literal> destination
					Responsibility for the <literal>~Sync_handler</literal> token definition will
					rest with installers. Responsibility for applying it will normally
					rest with producers.</para>
			</section>
		</section>

		<section id="S16">
			<title><acronym>TDF</acronym> Diagnostic Specification</title>

			<para>The <ulink url="#"><!-- TODO --><acronym>TDF</acronym> Diagnostic Specification</ulink>
				is a separate document which describes an extension to <acronym>TDF</acronym>, optionally
				used to provide program diagnostic information that can be transformed
				by installers to the form required by popular platform-specific debuggers.
				This extension cannot be considered fully developed and is therefore
				not included as part of standard <acronym>TDF</acronym>. Its use for other than <acronym>DRA</acronym>'s
				C producer has not been considered.</para>

			<section>
				<title><code>~exp_to_source</code>, <code>~diag_id_scope</code>,
					<code>~diag_type_scope</code>, <code>~diag_tag_scope</code></title>

				<para><programlisting language="TDF">
	<literal>bdy</literal>:	EXP
... :	 ...
	-&gt; EXP</programlisting>

					Each of these four tokens has several arguments of which the first,
					<literal>bdy</literal>, is an <code>EXP</code>. In each case the default definition
					body, when no diagnostic information is required, is simply <literal>bdy</literal>.
					Note that this description is quite sufficient to enable installers
					to ignore any diagnostic information that may be included in produced
					<acronym>TDF</acronym>, without needing any further knowledge of the <acronym>TDF</acronym>
					Diagnostic Specification.</para>
			</section>
		</section>

		<section id="S17">
			<title>Accessing variable parameter lists</title>

			<para>Installers should provide token definitions for the tokens listed
				in this section.</para>

			<section>
				<title><code>~va_list</code></title>

				<para><programlisting language="TDF">
	-&gt; SHAPE</programlisting>

					This is the <code>SHAPE</code> of a variable capable of holding state
					information used for stepping through the anonymous parameters of
					a procedure created by <literal>make_proc</literal>.</para>
			</section>

			<section>
				<title><code>~__va_start</code></title>

				<para><programlisting language="TDF">
<literal>p</literal>:	EXP POINTER var_param_alignment
	-&gt; EXP ~va_list</programlisting>

					If <literal>t</literal> is the <code>TAG</code> introduced by <literal>var_intro</literal>
					<code>OPTION(TAGACC)</code> in <literal>make_proc</literal>, then the token application
					<literal>~__va_start(obtain_tag(t))</literal> will provide the initial value for
					a local variable to be used for stepping through the anonymous parameters
					of the procedure, starting with the first actual parameter (if any)
					that does not have a corresponding entry in the make_proc params_intro
					list.</para>
			</section>

			<section>
				<title><code>~va_arg</code></title>

				<para><programlisting language="TDF">
<literal>v</literal>:	EXP POINTER (alignment(~va_list))
<literal>s</literal>:	SHAPE
	-&gt; EXP <literal>s</literal></programlisting>

					If <literal>v</literal> is the variable initialised by <literal>~__va_start </literal>(see
					above), then successive token applications  <literal>~va_arg(v,s)</literal>
					will deliver the anonymous parameter values in turn. The successive
					<code>SHAPE</code>s <literal>s</literal> must be the appropriate <code>SHAPE</code>s
					for the successive parameters.</para>
			</section>

			<section>
				<title><code>~va_end</code></title>

				<para><programlisting language="TDF">
<literal>v</literal>:	EXP POINTER (alignment(~va_list))
	-&gt; EXP TOP</programlisting>

					If <literal>v</literal> is a variable initialised by <literal>~__va_start</literal>, the token
					application <literal>~va_end(v)</literal> indicates that no further use will be
					made of <literal>v</literal>.</para>
			</section>

			<section>
				<title><code>~next_caller_offset</code></title>

				<para><programlisting language="TDF">
<literal>o1</literal>:	EXP OFFSET (<literal>fa</literal>,parameter_alignment(<literal>s1</literal>))
<literal>s1</literal>:	SHAPE
<literal>s2</literal>:	SHAPE
	-&gt; EXP OFFSET (<literal>fa</literal>,parameter_alignment(<literal>s2</literal>))</programlisting>

					<literal>~next_caller_offset</literal> is used to provide access to successive
					elements of the <literal>caller_params</literal> of an <literal>apply_general_proc</literal>,
					by delivering successive <code>OFFSET</code>s of their positions relative
					to the environment pointer created by that procedure application.
					Both the <literal>apply_general_proc</literal> and associated <literal>make_general_proc</literal>
					will include <code>PROCPROPS</code> <literal>var_callers</literal>.</para>

				<para><literal>o1</literal> will be the <code>OFFSET</code> for a <literal>caller_params</literal>
					element of <code>SHAPE</code> <literal>s1</literal>, and will be derived either
					from <literal>env_offset</literal> for a <code>TAG</code> introduced by <literal>caller_intro</literal>
					of the <literal>make_general_proc </literal>, or from a previous application of <literal>~next_caller_offset</literal>.
					<literal>s2</literal> will be the <code>SHAPE</code> of the subsequent <literal>caller_params</literal>
					element, whose <code>OFFSET</code> is delivered. <literal>fa</literal> will include
					the set union of <code>ALIGNMENT</code>s appropriate to the <literal>make_general_proc</literal>
					(as specified by <literal>current_env</literal>).</para>
			</section>

			<section>
				<title><code>~next_callee_offset</code></title>

				<para><programlisting language="TDF">
<literal>o1</literal>:	EXP OFFSET (<literal>fa</literal>,parameter_alignment(<literal>s1</literal>))
<literal>s1</literal>:	SHAPE
<literal>s2</literal>:	SHAPE
	-&gt; EXP OFFSET (<literal>fa</literal>,parameter_alignment(<literal>s2</literal>))</programlisting>

					<literal>~next_callee_offset</literal> is used to provide access to successive
					elements of the <code>CALLEES</code> of an <literal>apply_general_proc</literal>
					or <literal>tail_call</literal>, by delivering successive <code>OFFSET</code>s
					of their positions relative to the environment pointer created by
					that procedure application. Both the procedure application and associated
					<literal>make_general_proc</literal> will include <code>PROCPROPS</code> <literal>var_callees</literal>.</para>

				<para><literal>o1</literal> will be the <code>OFFSET</code> for a <code>CALLEES</code>
					element of <code>SHAPE</code> <literal>s1</literal>, and will be derived either
					from <literal>env_offset</literal> for a <code>TAG</code> introduced by <literal>callee_intro</literal>
					of the <literal>make_general_proc</literal>, or from a previous application of
					<literal>~next_callee_offset</literal>. <literal>s2</literal>
					will be the <code>SHAPE</code> of the subsequent <code>CALLEES</code>
					element, whose <code>OFFSET</code>
					is delivered. <literal>fa</literal> will include the set union of <code>ALIGNMENT</code>s
					appropriate to the <literal>make_general_proc</literal> (as specified by <literal>current_env </literal>).</para>
			</section>
		</section>
	</chapter>

	<chapter id="S18">
		<title>Language Programming Interfaces</title>

		<para>A Language Programming Interface (<acronym>LPI</acronym>) is here defined to mean a set
			of tokens, usually specific to a particular producer, which will encapsulate
			language features at a higher level than basic <acronym>TDF</acronym> constructs, more
			convenient for the producer to produce.</para>

		<para>Responsibility for the specification of individual <acronym>LPI</acronym>s lies with
			the appropriate producer itself. Before an application can be installed
			on some target platform, the appropriate <acronym>LPI</acronym> token definitions must
			have been built for that platform. In this sense, the <acronym>LPI</acronym> can be considered
			as a primitive <acronym>API</acronym>, which is discussed in <xref linkend="S21"/>.</para>

		<para>The process by which the <acronym>LPI</acronym> token definition library or capsule is
			generated for any specific platform will vary according to the <acronym>LPI</acronym>,
			and responsibility for defining that process will also lie with the
			appropriate producer. Some <acronym>LPI</acronym>s, such as that associated with <acronym>DRA</acronym>'s
			C producer, can be fully defined by architecture neutral <acronym>TDF</acronym>, using
			the tokens specified in <xref linkend="S6"/> and <xref linkend="S11"/>
			to encapsulate any target dependencies. When that is the case, the
			generation process can be fully automated. For other <acronym>LPI</acronym>s the process
			may be much less automated. In some cases where the source language
			implies a complex run-time system, this might even require a small
			amount of new code to be written for each platform.</para>

		<para>Generally, the individual <acronym>LPI</acronym> tokens do not need to be specified in
			the token registry, provided they follow a registered naming scheme
			to ensure uniqueness (see <xref linkend="S5"/>). In exceptional
			circumstances it may be necessary for some <acronym>TDF</acronym> tool to recognise individual
			<acronym>LPI</acronym> tokens explicitly by name. This will be the case when experimenting
			with potential extensions to <acronym>TDF</acronym>, in the field of parallelism for
			example. In other cases a <acronym>TDF</acronym> installer or other tool may recognise
			an <acronym>LPI</acronym> token by name rather than its definition by choice, for some
			unspecified advantage. We make a pragmatic choice in such cases whether
			to include such token specifications in the token registry. For widely
			used producers, we can assume availability of the <acronym>LPI</acronym> token specifcations,
			or standard definitions, separately from the token register, but we
			should expect any such tokens to be specified within the register
			for all cases where significant advantage could be taken by an installer
			only if it recognises the token by name.</para>

		<section id="S19">
			<title>The <acronym>DRA</acronym> C <acronym>LPI</acronym></title>

			<para><acronym>DRA</acronym>'s C producer <acronym>LPI</acronym> is defined by an architecture neutral token definition
				capsule provided with the producer. Target specific detail is included
				only by use of the target dependency tokens and C mapping tokens specified
				in <xref linkend="S6"/> and <xref linkend="S12"/> respectively.
				Target specific versions of this capsule are obtained by transformation,
				using the <quote>preprocessing</quote> action of the <acronym>TDF</acronym> tool <literal>tnc</literal>, with
				definitions of the target dependency and C mapping tokens that are
				provided with the target installer. No special treatment is required
				for any of the C <acronym>LPI</acronym> tokens, though translation time can be slightly
				improved in a few cases if the names are recognised and standard token
				definition exercised explicitly within some installers.</para>

			<para>The <acronym>DRA</acronym> C <acronym>LPI</acronym> does not include standard library features, for which
				the C language requires header files. The standard C library is one
				example of an <acronym>API</acronym>, discussed in <xref linkend="S21"/>.</para>
		</section>

		<section id="S191">
			<title>The <acronym>DRA</acronym> C++ <acronym>LPI</acronym></title>

			<para>The <acronym>DRA</acronym> C++ <acronym>LPI</acronym> extends the <acronym>DRA</acronym> C <acronym>LPI</acronym> adding tokens for target specific
				C++ features not found in C.  Again, standard library features are
				treated as an <acronym>API</acronym>.</para>
		</section>

		<section id="S20">
			<title>The Etnoteam Fortran <acronym>LPI</acronym></title>

			<para>The details in this subsection are provisional, subject to confirmation
				of argument and result <code>SORT</code>s, and development of model
				token definitions.</para>

			<para>The following tokens are named here in case any installers may be
				able to produce better code than could be achieved by normal token
				expansion. In particular, some installers may be able to inline standard
				function calls.

				<variablelist>
					<varlistentry>
						<term><code>.Et~SQRT</code></term>

						<listitem>
							<para>square root of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~EXP</code></term>

						<listitem>
							<para>exponential (<literal>e ** x</literal>) of any
								floating variety, including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~LOG</code></term>

						<listitem>
							<para>(natural) logarithm of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~LOG_10</code></term>

						<listitem>
							<para>base 10 logarithm of any floating variety,
								including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~LOG_2</code></term>

						<listitem>
							<para>base 2 logarithm of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~SIN</code></term>

						<listitem>
							<para>sine of any floating variety, including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~COS</code></term>

						<listitem>
							<para>cosine of any floating variety, including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~TAN</code></term>

						<listitem>
							<para>tangent of any floating variety, including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ASIN</code></term>

						<listitem>
							<para>inverse sine of any floating variety, including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ACOS</code></term>

						<listitem>
							<para>inverse cosine of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ATAN</code></term>

						<listitem>
							<para>inverse (one argument) tangent of any floating
								variety, including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ATAN2</code></term>

						<listitem>
							<para>inverse (two arguments) tangent of any floating
								variety, excluding complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~SINH</code></term>

						<listitem>
							<para>hyperbolic sine of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~COSH</code></term>

						<listitem>
							<para>hyperbolic cosine of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~TANH</code></term>

						<listitem>
							<para>hyperbolic tangent of any floating variety, including
								complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ASINH</code></term>

						<listitem>
							<para>inverse hyperbolic sine of any floating variety,
								including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ACOSH</code></term>

						<listitem>
							<para>inverse hyperbolic cosine of any floating variety,
								including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~ATANH</code></term>

						<listitem>
							<para>inverse hyperbolic tangent of any floating variety,
								including complex.</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><code>.Et~MOD</code></term>

						<listitem>
							<para>floating point remainder of any floating variety,
								excluding complex.</para>
						</listitem>
					</varlistentry>
				</variablelist>
				</para>
		</section>
	</chapter>

	<chapter id="S21">
		<title>Application Programming Interfaces</title>

		<para>Application Programming Interfaces are typically specified with a
			C mapping, which define the required contents for C header files which
			a portable C program must include by name to gain access to target
			specific implementations of an <acronym>API</acronym> library. The <acronym>TDF</acronym> approach to <acronym>API</acronym>
			specification includes using a #pragma token syntax within architecture
			neutral C header files, such that all implementation dependencies
			are encapsulated by <acronym>API</acronym> specific tokens. These <acronym>API</acronym> tokens are the
			<acronym>TDF</acronym> representation of the <acronym>API</acronym>. Both the <acronym>API</acronym> library and <acronym>API</acronym> token
			definitions are required before a <acronym>TDF</acronym> program using the <acronym>API</acronym> can be
			installed on any particular platform.</para>

		<para>Platform specific definitions for <acronym>API</acronym> tokens are produced automatically,
			with few exceptions, for any platform with a conformant implementation
			of the <acronym>API</acronym>. This is achieved by a token library building process which
			analyses the architecture neutral header files for the <acronym>API</acronym> concerned,
			together with the platform specific header files that provide normal
			(non-<acronym>TDF</acronym>) C access to the <acronym>API</acronym>. The few exceptions occur where the
			platform specific header files have been written to make use of specific
			C compiler built-in features, typically recognised by identifiers
			with a prefix such as <quote><literal>__builtin_</literal></quote>. Such cases are very likely
			to require explicit recognition of the corresponding token name in
			<acronym>TDF</acronym> installers.</para>

		<para>Generally, <acronym>API</acronym> token names and specifications are not detailed in
			this token register. The token specifications are clearly dependent
			on the associated <acronym>API</acronym> specifications. Authority for controlling the
			actual <acronym>API</acronym> token names, and the relationship between <acronym>API</acronym> tokens and
			the various <acronym>API</acronym> standardisation authorities, remain separate subjects
			of discussion.</para>

		<para>Names and specifications are given or implied below for those <acronym>API</acronym>
			tokens which frequently require built-in support from installers,
			and for other cases where an installer may be able to produce better
			code than could be achieved by normal token expansion, for example
			by inlining standard function calls.</para>

		<section id="S22">
			<title>ANSI C standard functions</title>

			<para>The set of tokens implied below all have the form:</para>

			<section>
				<title><code>ansi.<literal>header</literal>.<literal>function</literal></code></title>

			<para><programlisting language="TDF">
... :	 ...
	-&gt; EXP</programlisting>

					Tokens are defined for all cases where <literal>header</literal> is ctype or string
					or math or stdlib, and <literal>function</literal> is the name of a non-ellipsis
					function specified in the ANSI C standard library, declared within
					the corresponding header &lt;<literal>header</literal>.h&gt;.   (Note that ellipsis
					functions, such as <literal>printf</literal>, cannot be represented as tokens
					since they may take a variable number of arguments.)</para>

				<para>These tokens have arguments all of <code>SORT</code> <code>EXP</code>,
					whose number and shape, and token result shape, all correspond to
					the implementation shape of the named ANSI C standard library function
					parameters and result. For the few cases where the function is specified
					not to return (e.g. <literal>ansi.stdlib.abort</literal>), the result shape may
					be either <code>TOP</code> or <code>BOTTOM</code>.</para>
			</section>
		</section>

		<section id="S23">
			<title>Common exceptional cases</title>

			<section>
				<title><code>ansi.setjmp.setjmp</code></title>

				<para><programlisting language="TDF">
<literal>jb</literal>:	EXP
	-&gt; EXP</programlisting>

					<literal>ansi.setjmp.setjmp</literal> is a token which has the semantics and argument
					and result implementation shapes corresponding to the ANSI C macro
					<literal>setjmp</literal> declared within &lt;setjmp.h&gt;.</para>
			</section>

			<section>
				<title><code>ansi.setjmp.longjmp</code></title>

				<para><programlisting language="TDF">
<literal>jb</literal>:	EXP
<literal>v</literal>:	EXP
	-&gt; EXP</programlisting>

					<literal>ansi.setjmp.longjmp</literal> is a token which has the semantics and
					argument implementation shapes corresponding to the ANSI C macro <literal>longjmp
					</literal> declared within &lt;setjmp.h&gt;. The result shape may be either
					TOP or BOTTOM.</para>
			</section>

			<section>
				<title><code>~alloca</code></title>

				<para><programlisting language="TDF">
<literal>i</literal>:	EXP
	-&gt; EXP</programlisting>

					<literal>~alloca</literal> is a token which has the semantics and argument and
					result implementation shapes corresponding to the BSD specified function
					<literal>alloca</literal>.</para>
			</section>
		</section>

		<section>
			<title><code>ansi.stdarg.va_list, ansi.stdarg.__va_start,
				ansi.stdarg.va_arg, ansi.stdarg.va_end</code></title>

			<para>These four tokens are identical to the Interface Tokens <literal>~va_list</literal>,
				<literal>~__va_start</literal>, <literal>~va_arg</literal> and <literal>~va_end</literal> respectively.</para>
		</section>
	</chapter>
</book>

