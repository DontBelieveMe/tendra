<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [
	<!ENTITY A.opt "<option>-A</option>&nbsp;&name.arg;">
	<!ENTITY B.opt "<option>-B</option>&nbsp;&opt.arg;">
	<!ENTITY C.opt "<option>-C</option>&nbsp;&name.arg;">
	<!ENTITY D.opt "<option>-D</option>">
	<!ENTITY E.opt "<option>-E</option>&nbsp;&name.arg;">
	<!ENTITY F.opt "<option>-F</option>&nbsp;&name.arg;">
	<!ENTITY G.opt "<option>-G</option>&nbsp;&switch.arg;">
	<!ENTITY I.opt "<option>-I</option>">
	<!ENTITY J.opt "<option>-J</option>">
	<!ENTITY K.opt "<option>-K</option>&nbsp;&name.arg;">
	<!ENTITY O.opt "<option>-O</option>&nbsp;&opt.arg;">
	<!ENTITY M.opt "<option>-M</option>">
	<!ENTITY N.opt "<option>-N</option>">
	<!ENTITY R.opt "<option>-R</option>">
	<!ENTITY T.opt "<option>-T</option>">
	<!ENTITY U.opt "<option>-U</option>">
	<!ENTITY h.opt "<option>-h</option>">
	<!ENTITY H.opt "<option>-H</option>&nbsp;&opt.arg;">
	<!ENTITY P.opt "<option>-P</option>">
	<!ENTITY Q.opt "<option>-Q</option>">
	<!ENTITY S.opt "<option>-S</option>&nbsp;&name.arg;">
	<!ENTITY V.opt "<option>-V</option>">
	<!ENTITY v.opt "<option>-v</option>">
	<!ENTITY W.opt "<option>-W</option>">
	<!ENTITY X.opt "<option>-X</option>&nbsp;&opt.arg;">
	<!ENTITY Y.opt "<option>-Y</option>">
	<!ENTITY Z.opt "<option>-Z</option>">

	<!ENTITY all "all translators">
]>

<!-- $Id -->
<refentry>
<!--
	Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.
	2. Redistributions in binary form must reproduce the above copyright notice,
	   this list of conditions and the following disclaimer in the documentation
	   and/or other materials provided with the distribution.
	3. Neither the name of The TenDRA Project nor the names of its contributors
	   may be used to endorse or promote products derived from this software
	   without specific, prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
	IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

		(1) Its Recipients shall ensure that this Notice is
		reproduced upon any copies or amended versions of it;

		(2) Any amended version of it shall be clearly marked to
		show both the nature of and the organisation responsible
		for the relevant amendment or amendments;

		(3) Its onward transfer from a recipient to another
		party shall be deemed to be that party's acceptance of
		these conditions;

		(4) DERA gives no warranty or assurance as to its
		quality or suitability for any purpose and DERA accepts
		no liability whatsoever in relation to any use to which
		it may be put.
-->

	<refmeta>
		<refentrytitle>trans</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>trans</refname>
		<refpurpose>DRA TDF to assembly translators</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<cmdsynopsis>
			<command>trans.386</command>

			<arg choice="opt">&D.opt;</arg>
			<arg choice="opt"><option>-a</option></arg>
			<arg choice="opt"><option>-h</option></arg>
			<arg choice="opt"><option>-k</option>&nbsp;&name.arg;</arg>

			<sbr/>

			<arg choice="plain"><replaceable>input-file</replaceable></arg>

			<arg choice="plain"><replaceable>output-file</replaceable></arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>trans.alpha</command>

			<arg choice="opt">&D.opt;</arg>
			<arg choice="opt">&S.opt;</arg>

			<sbr/>

			<arg choice="plain"><replaceable>input-file</replaceable></arg>

			<arg choice="plain"><replaceable>binary-assembler-file</replaceable></arg>
			<arg choice="plain"><replaceable>symbol-table-file</replaceable></arg>
			<arg choice="opt"><replaceable>symbolic-assembler-file</replaceable></arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>trans.hppa</command>

			<arg choice="opt">&D.opt;</arg>
			<arg choice="opt"><option>-h</option></arg>

			<sbr/>

			<arg choice="plain"><replaceable>input-file</replaceable></arg>

			<arg choice="plain"><replaceable>output-file</replaceable></arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>trans.mips</command>

			<arg choice="opt">&D.opt;</arg>
			<arg choice="opt">&S.opt;</arg>

			<sbr/>

			<arg choice="plain"><replaceable>input-file</replaceable></arg>

			<arg choice="plain"><replaceable>binary-assembler-file</replaceable></arg>
			<arg choice="plain"><replaceable>symbol-table-file</replaceable></arg>
			<arg choice="opt"><replaceable>symbolic-assembler-file</replaceable></arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>trans.sparc</command>

			<arg choice="opt">&D.opt;</arg>

			<sbr/>

			<arg choice="plain"><replaceable>input-file</replaceable></arg>

			<arg choice="plain"><replaceable>output-file</replaceable></arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>trans.*</command>

			<group choice="req">
				<arg choice="plain">&V.opt;</arg>
			</group>
		</cmdsynopsis>

		<para>Most options are common to all translators.
			For brevity, these are not repeated above:</para>

		<cmdsynopsis>
			<command>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</command>

			<arg choice="opt">&A.opt;</arg>
			<arg choice="opt">&C.opt;</arg>
			<arg choice="opt">&F.opt;</arg>
			<arg choice="opt">&I.opt;</arg>
			<arg choice="opt">&K.opt;</arg>
			<arg choice="opt">&M.opt;</arg>
			<arg choice="opt">&R.opt;</arg>
			<arg choice="opt">&U.opt;</arg>

			<sbr/>

			<arg choice="opt">&X.opt;</arg>
			<arg choice="opt">&B.opt;</arg>
			<arg choice="opt">&E.opt;</arg>
			<arg choice="opt">&H.opt;</arg>
			<arg choice="opt">&P.opt;</arg>
			<arg choice="opt">&Q.opt;</arg>
			<arg choice="opt">&W.opt;</arg>
			<arg choice="opt">&Z.opt;</arg>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>The code production portion of the &tdf; compiler is under the
			control of a &tdf; translator, which translates a &tdf; capsule into
			assembly.</para>

		<para>&alphatrans; produces an AXP assembler file.</para>

		<para>There are separate &tdf; translators for each target
			architecture.</para>

		<para>&hppatrans; produces assembly code for the
			HP PA-RISC machines.</para>

		<para>&mipstrans; produces &mips; code.
			There are two versions, one for &irix;, and one for &ultrix;.
			Both produce &G.ext; and &H.ext; files required by
			<command>as1</command>, but may also optionally give
			&s.ext; assembly files using &S.opt;.
			Note that full run-time diagnostic information cannot be
			transmitted through the &mips; assembler, &as;.</para>

		<para>&powertrans; produces assembly code
			common to the rs6000 and the POWERPc.</para>

		<para>&sparctrans; produces SPARC assembly code.
			There are two versions, one for SunOS, and one for
			Solaris.</para>

		<para>The various different translators are referred to
			collectively as &trans;.</para>

		<para>It is recommended that &trans; should not be
			invoked directly, but via the user interface &tcc;.
			The file <option>-</option><replaceable>opt</replaceable> can
			be passed to &trans; by passing the option
			<option>-W</option><literal>t,-</literal><replaceable>opt</replaceable> to
			&tcc;.</para>
	</refsection>

	<refsection>
		<title>Options</title>

		<para>The options denoted by a capital letter are common to
			the &tdf; installers for all the architectures, although the
			defaults vary for each translator.</para>

		<para>Lowercase options are specific to each translator.</para>

		<para>The option <option>-a</option> is specific to
			&trans386;.</para>

		<para>The options <option>-h</option> and <option>-d</option> are
			specific to &hppatrans;.</para>
	</refsection>

	<!-- TODO: now go through and find undocumented options... -->

	<refsection>
		<title>Options</title>

		<variablelist>
			<varlistentry>
				<term>&A.opt;</term>

				<listitem>
					<para>Specify the &abi; for generated code.
						The supported &abi;s differ for each platform.</para>

					<para>The available &abi;s are:</para>

					<table>
						<col align="center"/>

						<tbody>
							<tr>
								<td><code>hpux</code></td>
								<td role="gap"/>
								<td><code>next</code></td>
								<td role="gap"/>
								<td><code>sunos</code></td>
								<td role="gap"/>
								<td><code>sco</code></td>
							</tr>
							<tr>
								<td><code>svr4</code></td>
								<td role="gap"/>
								<td><code>svsv</code></td>
								<td role="gap"/>
								<td><code>linux</code></td>
								<td role="gap"/>
								<td><code>solaris</code></td>
							</tr>
							<tr>
								<td><code>osf1</code></td>
								<td role="gap"/>
								<td><code>icbs</code></td>
								<td role="gap"/>
								<td><code>mips</code></td>
								<td role="gap"/>
								<td><code>power</code></td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&B.opt;</term>

				<listitem>
					<para>&opt.arg; is a set of characters describing the
						categories of constructs which are to be
						generated as built-in instructions.</para>

					<para>For some categories here the alternative is to
						emit a library call instead.
						Some features are provided as builtins where they are
						not possible as library calls. When these features
						are disabled, an attempt to use their corresponding
						tags in the input &tdf; will cause translation to fail.</para>

					<para>The available categories are:</para>

					<table>
						<col align="center"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>+</code></td>
								<td>enable subsequent options (default)</td>
							</tr>
							<tr>
								<td><code>-</code></td>
								<td>disable subsequent options</td>
							</tr>
						</tbody>

						<tbody>
							<tr>
								<td><code>a</code></td>
								<td>all builtins</td>
							</tr>
							<tr>
								<td><code>j</code></td>
								<td><code>setjmp</code>, <code>longjmp</code></td>
							</tr>
							<tr>
								<td><code>p</code></td>
								<td>promotions</td>
							</tr>
							<tr>
								<td><code>v</code></td>
								<td>varargs</td>
							</tr>
							<tr>
								<td><code>c</code></td>
								<td><code>~alloca</code></td>
							</tr>
							<tr>
								<td><code>f</code></td>
								<td><code>__builtin_isfloat</code></td>
							</tr>
							<tr>
								<td><code>g</code></td>
								<td>diagnostics</td>
							</tr>
							<tr>
								<td><code>l</code></td>
								<td>&api; miscellany</td>
							</tr>
							<tr>
								<td><code>m</code></td>
								<td>inlined assembly</td>
							</tr>
							<tr>
								<td><code>t</code></td>
								<td>debugging miscellany</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&C.opt;</term>

				<listitem>
					<para>Specify the calling conventions for generated code.
						The supported &abi;s differ for each platform.</para>

					<para>The available calling conventions are:</para>

					<table>
						<col align="center"/>

						<tbody>
							<tr>
								<td><code>hp</code></td>
								<td role="gap"/>
								<td><code>gcc</code></td>
								<td role="gap"/>
								<td><code>sun</code></td>
							</tr>
							<tr>
								<td><code>alpha</code></td>
								<td role="gap"/>
								<td><code>hppa</code></td>
								<td role="gap"/>
								<td><code>o32</code></td>
							</tr>
							<tr>
								<td><code>xlc</code></td>
								<td role="gap"/>
								<td><code>sparc</code></td>
								<td role="gap"/>
								<td><code>aout</code></td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&D.opt;</term>

				<listitem>
					<para>This option determines whether &trans; should
						produce Position Independent Code
						(<acronym>PIC</acronym>).</para>

					<para>For all translators where it is supported,
						except &mipstrans;, this is not done by
						default.</para>

					<para>For &trans386;, this option is not
						supported on the SCO or DragonFly platforms,
						and on the Linux platform it is supported
						only for ELF binary format.</para>

					<para>For &hppatrans;, the translator-specific
						option <option>-d</option>&nbsp;&name.arg;
						is also provided.
						The <option>-D</option> flag emulates &cc;'s
						<option>+Z</option> flag, <option>-d</option>
						emulates &cc;'s <option>+z</option> flag.
						Neither option has yet been tested.</para>

					<para>For &mipstrans;, this is done by default
						in the &irix; version and not at all in
						the &ultrix; version.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&E.opt;</term>

				<listitem>
					<para>Specify the endianness for generated code.
						The supported endiannesses differ for each platform.</para>

					<table>
						<col align="center"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>b</code></td>
								<td>Big-endian</td>
							</tr>
							<tr>
								<td><code>l</code></td>
								<td>Little-endian</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&F.opt;</term>

				<listitem>
					<para>Specify the executable format for generated code.
						The supported formats differ for each platform.</para>

					<table>
						<col align="center"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>aout</code></td>
								<td>Assembler output</td>
							</tr>
							<tr>
								<td><code>elf</code></td>
								<td>Executable and Linkable Format (SVr4)</td>
							</tr>
							<tr>
								<td><code>xcoff</code></td>
								<td>eXtended COFF (AIX)</td>
							</tr>
							<tr>
								<td><code>som</code></td>
								<td>System Object Model (HP-UX)</td>
							</tr>
							<tr>
								<td><code>macho</code></td>
								<td>Mach-O (NeXTSTEP)</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&G.opt;</term>

				<listitem>
					<para>Specify the format for debugging symbols output
						in the generated code. These are generated from
						diagnostic tags in the input &tdf; capsule.
						The supported formats differ for each platform
						and for each version of &tdf; diagnostic tags
						which is present in the capsule.</para>

					<table>
						<col align="center"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>none</code></td>
								<td role="na"/>
							</tr>
							<tr>
								<td><code>cv</code></td>
								<td>CodeView</td>
							</tr>
							<tr>
								<td><code>gdb</code></td>
								<td role="na"/>
							</tr>
							<tr>
								<td><code>xdb</code></td>
								<td role="na"/>
							</tr>
							<tr>
								<td><code>stabs</code></td>
								<td>(or &ldquo;stabs-in-elf&rdquo; for
									<option>-F</option><literal>elf</literal>)</td>
							</tr>
							<tr>
								<td><code>stabx</code></td>
								<td role="na"/>
							</tr>
							<tr>
								<td><code>xdb_old</code></td>
								<td role="na"/>
							</tr>
							<tr>
								<td><code>xdb_new</code></td>
								<td role="na"/>
							</tr>
							<tr>
								<td><code>dwarf1</code></td>
								<td>DWARF 1</td>
							</tr>
							<tr>
								<td><code>dwarf2</code></td>
								<td>DWARF 2</td>
							</tr>
						</tbody>
					</table>

					<para>This option causes &trans; to output
						debugging information in its output file.
						This will only work if the input &tdf; capsule contains
						debugging information.</para>

					<para>For &trans386;, on the SCO platform
						the format used by &dbxtra;
						and <application>codeview</application> is supported.
						On the SVR4.2 platform Dwarf 1 is supported,
						which is used by &debug;.
						On the Solaris, DragonFly, and Linux platforms,
						<application>stabs</application> is supported.
						The GNU debugger &gdb; may be used on all
						platforms.</para>

					<para>For &hppatrans;, the <option>-H</option>
						flag causes hppatrans to output &xdb;
						compatible debugging information in its output file.
						This option is only available if the header
						file <filename>hpux_symtab.h</filename> was included
						whilst compiling &hppatrans;.<footnote>
							<para>hpux_symtab.h is available by anonymous FTP,
								but appears to have changed location over time.
								Your best option is to simply google for it.</para>
						</footnote></para>

					<para>Please note well that there is a known bug in the
						<option>-H</option> option for &hppatrans;.
						The bug sometimes prohibits &xdb;
						reading selective diagnostic information from a suite of
						two or more modules linked together.</para>

					<para>For &mipstrans; the diagnostic format used is
						as used by the native compilers.</para>

					<para>For &sparctrans;, the diagnostic format
						used is <application>stabs</application>
						for SunOS, and <application>stabs-in-elf</application>
						for Solaris (both as used by the native compilers).</para>

					<para>Debugging information is not output by default
						for &all;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&H.opt;</term>

				<listitem>
					<para>&opt.arg; is a set of characters describing the
						various features a platform &ldquo;has&rdquo;.
						These are provided here to allow for disabling
						certian constructs where desirable.</para>

					<table>
						<col align="center"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>+</code></td>
								<td>enable subsequent options (default)</td>
							</tr>
							<tr>
								<td><code>-</code></td>
								<td>disable subsequent options</td>
							</tr>
						</tbody>

						<tbody>
							<tr>
								<td><code>a</code></td>
								<td>all flags</td>
							</tr>
							<tr>
								<td><code>o</code></td>
								<td>has byte operations</td>
							</tr>
							<tr>
								<td><code>r</code></td>
								<td>has byte registers</td>
							</tr>
							<tr>
								<td><code>n</code></td>
								<td>has negative shift</td>
							</tr>
							<tr>
								<td><code>t</code></td>
								<td>has rotation</td>
							</tr>
							<tr>
								<td><code>m</code></td>
								<td>has <code>max</code>/<code>min</code> tags</td>
							</tr>
							<tr>
								<td><code>c</code></td>
								<td>has <code>condassign</code> tag</td>
							</tr>
							<tr>
								<td><code>d</code></td>
								<td>has <code>div0</code> and <code>rem0</code> tags</td>
							</tr>
							<tr>
								<td><code>s</code></td>
								<td>has <code>setcc</code> (produces <code>absbool</code>) tag</td>
							</tr>
							<tr>
								<td><code>i</code></td>
								<td>has native complex numbers</td>
							</tr>
							<tr>
								<td><code>q</code></td>
								<td>has native 64 bit operations</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&h.opt;</term>

				<listitem>
					<para>Causes &trans; to print command-line usage help.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&I.opt;</term>

				<listitem>
					<para>Produce comments in the generated assembly.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&J.opt;</term>

				<listitem>
					<para>Disable extended diagnostics. (DWARF 2 only)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&K.opt;</term>

				<listitem>
					<para>Causes &trans; to emit instructions for a
						particular processor model, determined by
						&str.arg;.</para>

					<para>For &trans386;, the supported values of
						&str.arg; are:</para>

					<table>
						<col align="left"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Option</th>
								<th>Processor</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>-K3</code></td>
								<td>80386</td>
							</tr>
							<tr>
								<td><code>-K4</code></td>
								<td>80486</td>
							</tr>
							<tr>
								<td><code>-K5</code> (default)</td>
								<td>Pentium</td>
							</tr>
						</tbody>
					</table>

					<para>For &powertrans;, the supported values
						of &str.arg; are:</para>

					<table>
						<col align="left"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Option</th>
								<th>Processor</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>-KC</code> (default)</td>
								<td>Common POWERPc/POWER</td>
							</tr>
							<tr>
								<td><code>-KP</code></td>
								<td>POWERPc</td>
							</tr>
							<tr>
								<td><code>-KR</code></td>
								<td>rs6000</td>
							</tr>
						</tbody>
					</table>

					<para>At present there are no valid values for
						&str.arg; for other translators.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&N.opt;</term>

				<listitem>
					<para>Produce PROM code (avoiding <code>.data</code>).</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&M.opt;</term>

				<listitem>
					<para>If this option is on, &trans; preserves
						division by a floating point number rather
						than replacing it by multiplication by the
						reciprocal of the number.
						While the latter produces faster code, it may
						lead to rounding errors.</para>

					<para>For &all;, by default,
						division by constants is preserved.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&O.opt;</term>

				<listitem>
					<para>&opt.arg; is a set of characters describing the
						categories of optimisations to apply.</para>

					<para>All &trans;' optimisations are believed to be
						valid, so any error in optimisation is a
						genuine bug.</para>

					<table>
						<col align="center"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Descrption</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>+</code></td>
								<td>enable subsequent options (default)</td>
							</tr>
							<tr>
								<td><code>-</code></td>
								<td>disable subsequent options</td>
							</tr>
						</tbody>

						<tbody>
							<tr>
								<td><code>a</code></td>
								<td>all optimisations</td>
							</tr>
							<tr>
								<td><code>c</code></td>
								<td>hoist constants out of loops</td>
							</tr>
							<tr>
								<td><code>d</code></td>
								<td>avoid register dumping</td>
							</tr>
							<tr>
								<td><code>e</code></td>
								<td>inlining of exp tokens</td>
							</tr>
							<tr>
								<td><code>f</code></td>
								<td>replace loop indexes by incremented pointers</td>
							</tr>
							<tr>
								<td><code>g</code></td>
								<td>perform case transformations</td>
							</tr>
							<tr>
								<td><code>h</code></td>
								<td>peephole substitutions</td>
							</tr>
							<tr>
								<td><code>i</code></td>
								<td>inlining of proc tokens</td>
							</tr>
							<tr>
								<td><code>j</code></td>
								<td>follow gotos and tests to their final destinations</td>
							</tr>
							<tr>
								<td><code>u</code></td>
								<td>loop unrolling</td>
							</tr>
							<tr>
								<td><code>r</code></td>
								<td>tail recursion</td>
							</tr>
							<tr>
								<td><code>s</code></td>
								<td>rewrite conditions to use smallest neccessary integers</td>
							</tr>
							<tr>
								<td><code>t</code></td>
								<td>use temporary registers for local values</td>
							</tr>
							<tr>
								<td><code>o</code></td>
								<td>remove zero offsets</td>
							</tr>
							<tr>
								<td><code>p</code></td>
								<td>always substitute parameters</td>
							</tr>
							<tr>
								<td><code>q</code></td>
								<td>replace compounds in procs with assignments to variables</td>
							</tr>
							<tr>
								<td><code>y</code></td>
								<td>remove operations where input is identical to output</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&P.opt;</term>

				<listitem>
					<para>This option causes &trans; to output profiling
						information suitable for use with &prof; or a
						similar tool (see individual manual pages for
						details).</para>

					<para>On &trans386;, this option is currently
						not supported on the Solaris platform.</para>

					<para>On &alphatrans;, this is not fully
						implemented.</para>

					<para>On &mipstrans;, this option is untested
						at present, and should not be used.</para>

					<para>Profiling information is not output by default
						for &all;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&Q.opt;</term>

				<listitem>
					<para>This option causes &trans; to quit before
						processing its input files.
						This is particularly useful in conjunction with
						<option>-V</option>.</para>

					<para>For &all;, this is not done by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&R.opt;</term>

				<listitem>
					<para>Round after each floating point operation.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S.opt;</term>

				<listitem>
					<para>Specify the assembler dialect for generated code.
						The supported dialects differ for each platform.</para>

					<table>
						<col align="center"/>

						<tbody>
							<tr>
								<td><code>gas</code></td>
								<td role="gap"/>
								<td><code>sun</code></td>
								<td role="gap"/>
								<td><code>ibm</code></td>
							</tr>
							<tr>
								<td><code>sgi</code></td>
								<td role="gap"/>
								<td><code>ultrix</code></td>
								<td role="gap"/>
								<td><code>osf1</code></td>
							</tr>
							<tr>
								<td><code>hp</code></td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&T.opt;</term>

				<listitem>
					<para>Disable <code>debug_abbrev</code>
						section. (DWARF 2 only)</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&V.opt;</term>
				<term>&v.opt;</term>

				<listitem>
					<para>This option causes &trans; to print its
						version number and the version of the &tdf;
						specification it supports.</para>

					<para>For &all;, this is not done by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&W.opt;</term>

				<listitem>
					<para>This option determines whether &trans; should
						make string literals writable.
						At present the C producer does not make use of this
						facility.</para>

					<para>For &all;, at present all string literals
						are writable, and this cannot be altered.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&X.opt;</term>

				<listitem>
					<para>&opt.arg; is a set of characters describing the
						categories of checking to perform on the input
						&tdf; capsule.
						These checks can help identify invalid &tdf;,
						and should never fail for a valid capsule.</para>

					<table>
						<col align="center"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>+</code></td>
								<td>enable subsequent options (default)</td>
							</tr>
							<tr>
								<td><code>-</code></td>
								<td>disable subsequent options</td>
							</tr>
						</tbody>

						<tbody>
							<tr>
								<td><code>a</code></td>
								<td>all checks</td>
							</tr>
							<tr>
								<td><code>s</code></td>
								<td>shape</td>
							</tr>
							<tr>
								<td><code>e</code></td>
								<td>extra</td>
							</tr>
							<tr>
								<td><code>f</code></td>
								<td>Report floating point constants which exceed
									their range.
									If this check switched off such constants are
									replaced by infinity.</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&Y.opt;</term>

				<listitem>
					<para>Produce calls for dynamic initialisation.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&Z.opt;</term>

				<listitem>
					<para>This option causes &trans; to print the
						version number of all the &tdf; capsules
						it decodes.</para>

					<para>For &all;, this is not done by default.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>


<!-- old: -->

<!--
		<variablelist>
			<varlistentry>
				<term>&F.opt;</term>

				<listitem>
					<para>For &trans386;, this option determines
						whether the "strength reduction" optimisation
						should be applied.</para>

					<para>For &alphatrans;, this option determines
						whether or not the "for all" optimisation
						should be applied.</para>

					<para>For &hppatrans;, &mipstrans; and
						&sparctrans;, this option determines
						whether the "for all" optimisation
						should be applied.</para>

					<para>For all translators except &alphatrans;,
						this is done by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&R.opt;</term>

				<listitem>
					<para>This option determines whether &trans;
						should immediately round every floating point operation
						to its appropriate range.
						This produces slower code, but is necessary for strict
						&ieee; conformance.</para>

					<para>The default is not to round after every operation
						for all translators except &hppatrans; and
						&powertrans;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&E.opt;</term>

				<listitem>
					<para>This option disables &trans;' constant
						overflow checks.</para>

					<para>For &all;, this is done by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S.opt;</term>

				<listitem>
					<para>For &alphatrans;, when this option is
						present &alphatrans; will produce a
						symbolic assembler file in addition to
						its normal outputs.
						In this case the name of the symbolic assembler file
						must be present on the command line.</para>

					<para>For &mipstrans;, this option will produce
						assembly code in the optional &s.ext; file.</para>

					<para>This option is not present on all other
						translators.</para>

					<para>For all translators where it is supported,
						this is not done by default.</para>
				</listitem>
			</varlistentry>
	</refsection>
-->

	<refsection>
		<title>Translator-specific options</title>

		<para>The following options are specific to &trans386;:</para>

		<variablelist>
			<varlistentry>
				<term><option>-a</option></term>

				<listitem>
					<para>Always use a frame pointer.
						The default is to avoid using a frame pointer whenever possible.
						The default results in better performance, but in special
						cases where the stack is to be processed it may be necessary
						to enforce the use of a frame pointer.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>-h</option></term>

				<listitem>
					<para>Do not use the <code>.bss</code> segment,
						always put data into the <code>.data</code>
						segment even if it is zero.
						This should very rarely be needed.
						The default is to use the <code>.bss</code>
						segment.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>-k</option>&nbsp;&name.arg;</term>

				<listitem>
					<!-- XXX: not just linux platforms only... also *BSD etc? -->
					<para>This option is applicable to DragonFly and Linux
						platforms only.
						If this option is on, &trans386; will
						produce output for an ELF binary format assembler,
						otherwise a.out binary format is assumed.
						By default this option is on, as appropriate for
						later versions of Linux.</para>
				</listitem>
			</varlistentry>
		</variablelist>

		<para>The following options are specific to &hppatrans;:</para>

		<variablelist>
			<varlistentry>
				<term><option>-h</option></term>

				<listitem>
					<para>The <option>-h</option> flag causes hppatrans
						to output &gdb; compatible,
						i.e. <application>stabs</application>, debugging
						information in its output file.
						The <option>-h</option> flag is believed
						to be valid&mdash;any error is a genuine bug.</para>

					<para>The <option>-H</option> and <option>-h</option>
						options will only work if the input &tdf;
						capsule contains debugging information.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&as;, &prof;, &tcc;.</para>
	</refsection>

</refentry>

