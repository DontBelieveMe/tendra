<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Miscellaneous Topics</title>

	<para>In this section we round up a few miscellaneous topics.</para>

	<section id="fine-implement">
		<title>Fine Control of Included Files</title>

		<para>The <code>+IMPLEMENT</code> and <code>+USE</code> commands
			described in <link linkend="IMPLEMENT-USE">section 3.2</link> are capable of
			further refinement. Normally each such command is translated into a
			corresponding inclusion command in both the include and source
			output files.	Occasionally this is not desirable - in particular
			the inclusion in the source output file can cause problems during
			&tdf; library building. For this reason the &tspec; syntax
			has been extended to allow for fine control of the output
			corresponding to <code>+IMPLEMENT</code> and <code>+USE</code>
			commands. This takes the forms:</para>

		<programlisting language="tspec">+IMPLEMENT "api" (key) ;
+IMPLEMENT "api", "header" (key) ;
+IMPLEMENT "api", "header", "subset" (key) ;</programlisting>

		<para>with corresponding forms for <code>+USE</code>.	<code>key</code>
			specifies which output files the inclusion commands should appear
			in. It can be:</para>

		<table>
			<col align="center"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Key</th>
					<th>Ouput files</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>??</code></td>
					<td>Neither output file</td>
				</tr>
				
				<tr>
					<td><code>!?</code></td>
					<td>Include output file only</td>
				</tr>
				
				<tr>
					<td><code>?!</code></td>
					<td>Source output file only</td>
				</tr>
				
				<tr>
					<td><code>!!</code></td>
					<td>Both output files (default)</td>
				</tr>
			</tbody>
		</table>

		<para>The second refinement comes from the fact that &api;s fall into
			two categories - the base &api;s, such as <code>c/c89</code>,
			<code>posix</code> and <code>xpg3</code>, and the extension &api;s,
			such as <code>x11</code>, the X Windows &api;. The latter can be
			used to extend the former, so that we can form <code>c/c89</code>
			plus <code>x11</code>, <code>posix</code> plus <code>x11</code>,
			and so on. Base &api;s may be distinguished in &tspec;
			by including the command:</para>

		<programlisting language="tspec">+BASE_API ;</programlisting>

		<!-- TODO: update master.ts when the filename changes -->
		<para>in their <code>master.ts</code> file. Occasionally, in an extension
			&api;, we may wish to include a version of a header from the base &api;,
			but, because this base &api; is not fixed, not be able to use a simple
			<code>+USE</code> command. Instead the special form:</para>

		<programlisting language="tspec">+USE ( "api" ), "header" ;</programlisting>

		<para>is provided for this purpose (this is the only permitted form). It
			indicates that &tspec; should use the <code>api</code>
			version of <code>header</code> for checking purposes, but allow the
			inclusion of the version from the base &api; in normal use.</para>
	</section>

	<section id="protect">
		<title>Protection Macros</title>

		<para>Each include output file is surrounded by a construct of the
			form:</para>

		<programlisting language="c">#ifndef MACRO
#define MACRO
....
#endif /* MACRO */</programlisting>

		<para>to protect it against multiple inclusions. Normally
			&tspec; will generate the macro name, <code>MACRO</code>,
			but it can be set using the <code>PROTECT</code> file property (see
			<link linkend="properties">section 5.4</link>). Setting
			<code>PROTECT</code> to the empty string suppresses the protection
			construct altogether.	(Also see
			<link linkend="IF-ELSE-ENDIF">section 5.1</link>.)</para>
	</section>

	<section id="index">
		<title>Index Printing</title>

		<para>If it is invoked with the <option>-i</option> command-line
			option, instead of creating its output file, &tspec;
			prints an index of all the objects it has read to the standard
			output. This information includes the external token name associated
			with the object, whether the object is implemented or used, and
			where in the &api; description it is defined. It also includes a brief
			description of the object.	It is intended that these indexes should
			be usable as quick reference guides to the underlying &api;s.</para>
	</section>

	<section id="environment">
		<title>Environment Generation</title>

		<para>When invoked with the <option>-y</option> command-line
			option, &tspec; outputs an environment file suitable
			for use with the &tcc; frontend. This contains a description of
			the &api; (per its <code>$INFO</code> field) which can be presented
			to the user, along with internal configuration and library
			dependencies for how &tcc; is to invoke that &api;.</para>
	</section>

	<section id="libraries">
		<title>&tdf; Library Building</title>

		<para>As was explained in reference 1, the <code>#pragma token</code>
			headers output by &tspec; are used for two purposes -
			checking applications against the &api; during normal compilation and
			checking implementations against the &api; during &tdf; library
			building. This dual use does necessitate some extra work for
			&tspec;. It is not always possible to use exactly the
			same code in the two cases (usually because the C rules on, for
			example, structure definitions get in the way during library
			building). &tspec; uses a standard macro,
			<code>__BUILDING_LIBS</code>, to distinguish between the two cases.
			It is assumed to be defined if and only if library building is
			taking place. &tspec; descriptions can access this macro
			directly using <code>~building_libs</code> (see
			<link linkend="IF-ELSE-ENDIF">section 5.1</link>).</para>

		<para>The actual library building process consists of compiling the
			<code>#pragma token</code> descriptions of the objects comprising
			the &api; along with the implementation of that &api; from the system
			headers (or wherever). This creates the local token definitions for
			this &api;, which may be stored in a token library. To facilitate this
			process &tspec; creates the source output files for each
			implemented header <code>api:header</code> containing something
			like:</para>

				<programlisting language="c">#pragma implement interface &lt;../api/header&gt;
#include &lt;header&gt;</programlisting>

		<para>There are other methods whereby the source output file may be
			changed into a set of token definitions. For example,
			consider:</para>

		<programlisting language="tspec">$METHOD = "TNC" ;
+MACRO double fl_abs ( double ) ;
%%%
	( make_tokdef fl_abs ( exp x ) exp
			( floating_abs impossible x ) )
%%%</programlisting>

		<para>The include output file will specify a token <code>fl_abs</code>
			which takes a <code>double</code> and returns a <code>double</code>.
			The <code>TNC</code> method tells <code>MAKE_LIBS</code> that the
			source output file, which will just contain the quoted text:</para>

		<programlisting language="tnc">( make_tokdef fl_abs ( exp x ) exp
	( floating_abs impossible x ) )</programlisting>

		<para>is an input file for the &tdf; notation compiler, <code>tnc</code>
			(see reference 2). Thus we have defined a token which directly
			accesses the &tdf; <code>floating_abs</code> construct.</para>
	</section>
</chapter>

