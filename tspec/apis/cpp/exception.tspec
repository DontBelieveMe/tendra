#   		 Crown Copyright (c) 1997
#   
#   This TenDRA(r) Computer Program is subject to Copyright
#   owned by the United Kingdom Secretary of State for Defence
#   acting through the Defence Evaluation and Research Agency
#   (DERA).  It is made available to Recipients with a
#   royalty-free licence for its use, reproduction, transfer
#   to other parties and amendment for any purpose not excluding
#   product development provided that any such use et cetera
#   shall be deemed to be acceptance of the following conditions:-
#   
#       (1) Its Recipients shall ensure that this Notice is
#       reproduced upon any copies or amended versions of it;
#   
#       (2) Any amended version of it shall be clearly marked to
#       show both the nature of and the organisation responsible
#       for the relevant amendment or amendments;
#   
#       (3) Its onward transfer from a recipient to another
#       party shall be deemed to be that party's acceptance of
#       these conditions;
#   
#       (4) DERA gives no warranty or assurance as to its
#       quality or suitability for any purpose and DERA accepts
#       no liability whatsoever in relation to any use to which
#       it may be put.
#


$LINKAGE = "C++" ;
$NAMESPACE = "std" ;

+SUBSET "except" := {
    $LINKAGE = "C++" ;
    $NAMESPACE = "" ;
%%
// BASE CLASS FOR STANDARD EXCEPTIONS
class exception {
    // Implementation dependent details
public :
    exception () throw () ;
    exception ( const exception & ) throw () ;
    exception &operator= ( const exception & ) throw () ;
    virtual ~exception () throw () ;
    virtual const char *what () const throw () ;
} ;

// SPECIAL EXCEPTION SPECIFICATION CLASS
class bad_exception : public exception {
    // Implementation dependent details
public :
    bad_exception () throw () ;
    bad_exception ( const bad_exception & ) throw () ;
    bad_exception &operator= ( const bad_exception & ) throw () ;
    virtual ~bad_exception () throw () ;
    virtual const char *what () const throw () ;
} ;

// UNEXPECTED EXCEPTION HANDLERS
typedef void ( *unexpected_handler ) () ;
unexpected_handler set_unexpected ( unexpected_handler ) throw () ;
void unexpected () ;

// TERMINATE HANDLERS
typedef void ( *terminate_handler ) () ;
terminate_handler set_terminate ( terminate_handler ) throw () ;
void terminate () ;

// STACK UNWINDING FLAG
bool uncaught_exception () ;
%%
} ;
