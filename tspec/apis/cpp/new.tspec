#   		 Crown Copyright (c) 1997
#   
#   This TenDRA(r) Computer Program is subject to Copyright
#   owned by the United Kingdom Secretary of State for Defence
#   acting through the Defence Evaluation and Research Agency
#   (DERA).  It is made available to Recipients with a
#   royalty-free licence for its use, reproduction, transfer
#   to other parties and amendment for any purpose not excluding
#   product development provided that any such use et cetera
#   shall be deemed to be acceptance of the following conditions:-
#   
#       (1) Its Recipients shall ensure that this Notice is
#       reproduced upon any copies or amended versions of it;
#   
#       (2) Any amended version of it shall be clearly marked to
#       show both the nature of and the organisation responsible
#       for the relevant amendment or amendments;
#   
#       (3) Its onward transfer from a recipient to another
#       party shall be deemed to be that party's acceptance of
#       these conditions;
#   
#       (4) DERA gives no warranty or assurance as to its
#       quality or suitability for any purpose and DERA accepts
#       no liability whatsoever in relation to any use to which
#       it may be put.
#


$LINKAGE = "C++" ;
$NAMESPACE = "" ;

+USE "cpp", "cstdlib.tspec" ;
+USE "cpp", "exception.tspec" ;

+SUBSET "bad_alloc" := {
    # This is done as a subset because it is in the std namespace
    $LINKAGE = "C++" ;
    $NAMESPACE = "std" ;
%%
// EXCEPTION THROWN BY BAD NEW OPERATION
class bad_alloc : public exception {
    // Implementation dependent details
public :
    bad_alloc () throw () ;
    bad_alloc ( const bad_alloc & ) throw () ;
    bad_alloc &operator= ( const bad_alloc & ) throw () ;
    virtual ~bad_alloc () throw () ;
    virtual const char *what () const throw () ;
} ;

// SURROGATE NO-EXCEPTION CLASS
struct nothrow_t {} ;
extern const nothrow_t nothrow ;

// NEW HANDLERS
typedef void ( *new_handler ) () ;
new_handler set_new_handler ( new_handler ) throw () ;
%%
} ;

%%
// STANDARD ALLOCATION OPERATORS
void *operator new ( std::size_t ) throw ( std::bad_alloc ) ;
void *operator new [] ( std::size_t ) throw ( std::bad_alloc ) ;
void operator delete ( void * ) throw () ;
void operator delete [] ( void * ) throw () ;

// NO-EXCEPTION ALLOCATION OPERATORS
void *operator new ( std::size_t, const std::nothrow_t & ) throw () ;
void *operator new [] ( std::size_t, const std::nothrow_t & ) throw () ;
void operator delete ( void *, const std::nothrow_t & ) throw () ;
void operator delete [] ( void *, const std::nothrow_t & ) throw () ;

// PLACEMENT ALLOCATION OPERATORS
inline void *operator new ( std::size_t, void *p ) throw () { return ( p ) ; }
inline void *operator new [] ( std::size_t, void *p ) throw () { return ( p ) ; }
inline void operator delete ( void *, void * ) throw () { return ; }
inline void operator delete [] ( void *, void * ) throw () { return ; }
%%
