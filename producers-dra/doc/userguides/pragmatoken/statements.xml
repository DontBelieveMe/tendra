<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter>
	<title id="6">Statement tokens</title>

	<para>The syntax for introducing a statement token is simply:</para>

	<programlisting language="C">
#pragma token STATEMENT init_globs#
int g(int);
int f(int x) {
	init_globs return g(x);
}</programlisting>

	<para>Internal statement token identifiers reside in the macro name
		space. The optional name space, <code>TAG</code>, should not appear
		in statement token introductions.</para>

	<para>The use of statement tokens is analogous to the use of
		expression tokens (see <xref linkend="3"/>). A
		new symbol, <replaceable>stat-token-name</replaceable>, has been introduced into the
		syntax analysis at phase 7 of translation as defined in the ISO C
		standard. This token is passed through to the syntax analyser
		whenever the preprocessor encounters an identifier referring to a
		statement token. A <code>stat-token-name</code> can only occur as
		part of the statement syntax (ISO C standard, section 6.6).</para>

	<para>As with expression tokens, statement tokens are defined using
		<code>#define</code> statements. An example of this is shown below:</para>

	<programlisting language="C">
#pragma token STATEMENT i_globs#
#define i_globs {
	int i = x;
	x = 3;
}</programlisting>

	<para>The constraints on the definition of statement tokens are:</para>

	<itemizedlist>
		<listitem>
			<para>the use of labels is forbidden unless the definition of the
				statement token occurs at the outer level (i.e outside of any
				compound statement forming a function definition);</para>
		</listitem>
		<listitem>
			<para>the use of return within the defining statement is not
				allowed.</para>
		</listitem>
	</itemizedlist>

	<para>The semantics of the defining statement are precisely the same
		as the semantics of a compound statement forming the definition
		of a function with no parameters and void result. The definition
		of statement tokens carries the same implications for phases of
		translation as the definition of expression tokens (see F.5
		Expression tokens).</para>
</chapter>

