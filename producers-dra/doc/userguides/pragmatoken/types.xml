<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter>
	<title id="7">Type tokens</title>

	<para>Type tokens are used to introduce references to types. The ISO C
		standard, section 6.1.2.5, identifies the following classification
		of types:</para>

	<!-- TODO: draw a taxonomy perhaps? -->

	<itemizedlist>
		<listitem>
			<para>the type <code>char</code>;</para>
		</listitem>
		<listitem>
			<para>signed integral types;</para>
		</listitem>
		<listitem>
			<para>unsigned integral types;</para>
		</listitem>
		<listitem>
			<para>floating types;</para>
		</listitem>
		<listitem>
			<para>character types;</para>
		</listitem>
		<listitem>
			<para>enumeration types;</para>
		</listitem>
		<listitem>
			<para>array types;</para>
		</listitem>
		<listitem>
			<para>structure types;</para>
		</listitem>
		<listitem>
			<para>union types;</para>
		</listitem>
		<listitem>
			<para>function types;</para>
		</listitem>
		<listitem>
			<para>pointer types;</para>
		</listitem>
	</itemizedlist>

	<para>These types fall into the following broader type
		classifications:</para>

	<itemizedlist>
		<listitem>
			<para>integral types - consisting of the signed integral types, the
				unsigned integral types and the type <code>char</code>;</para>
		</listitem>
		<listitem>
			<para>arithmetic types - consisting of the integral types and the
				floating types;</para>
		</listitem>
		<listitem>
			<para>scalar types - consisting of the arithmetic types and the
				pointer types;</para>
		</listitem>
		<listitem>
			<para>aggregate types - consisting of the structure and array
				types;</para>
		</listitem>
		<listitem>
			<para>derived types - consisting of array, structure, union, function
				and pointer types;</para>
		</listitem>
		<listitem>
			<para>derived declarator types - consisting of array, function and
				pointer types.</para>
		</listitem>
	</itemizedlist>

	<para>The classification of a type determines which operations are
		permitted on objects of that type. For example, the <code>!</code>
		operator can only be applied to objects of scalar type. In order
		to reflect this, there are several type token introductions which
		can be used to classify the type to be referenced, so that the
		compiler can perform semantic checking on the application of
		operators. The possible type token introductions are:</para>

	<programlisting language="BNF">
type-token:
	TYPE
	VARIETY
	ARITHMETIC
	STRUCT
	UNION</programlisting>

	<section>
		<title id="9">General type tokens</title>

		<para>The most general type token introduction is <code>TYPE</code>.
			This introduces a type of unknown classification which can be
			defined to be any C type. Only a few generic operations can be
			applied to such type tokens, since the semantics must be defined
			for all possible substituted types. Assignment and function
			argument passing are effectively generic operations, apart from
			the treatment of array types. For example, according to the ISO C
			standard, even assignment is not permitted if the left operand has
			array type and we might therefore expect assignment of general
			token types to be illegal. Tokens introduced using the TYPE token
			introduction can thus be regarded as representing non-array types
			with extensions to represent array types provided by applying
			non-array semantics as described below.</para>

		<para>Once general type tokens have been introduced, they can be used
			to construct derived declarator types in the same way as
			conventional type declarators. For example:</para>

		<!-- TODO aren't these #pragma TenDRA token? -->
		<programlisting language="C">#pragma token TYPE t_t#
#pragma token TYPE t_p#
#pragma token NAT n#
typedef t_t *ptr_type; /* introduces pointer type */
typedef t_t fn_type(t_p); /*introduces function type */
typedef t_t arr_type[n]; /*introduces array type */</programlisting>

		<para>The only standard conversion that can be performed on an object
			of general token type is the lvalue conversion (ISO C standard
			section 6.2). Lvalue conversion of an object with general token
			type is defined to return the item stored in the object. The
			semantics of lvalue conversion are thus fundamentally altered by
			the presence of a token introduction. If type <code>t_t</code> is
			defined to be an array type the lvalue conversion of an object of
			type <code>t_t</code> will deliver a pointer to the first array
			element. If, however, <code>t_t</code> is defined to be a general
			token type, which is later defined to be an array type, lvalue
			conversion on an object of type <code>t_t</code> will deliver the
			components of the array.</para>

		<para>This definition of lvalue conversion for general token types is
			used to allow objects of general tokenised types to be assigned to
			and passed as arguments to functions. The extensions to the
			semantics of function argument passing and assignment are as
			follows: if the type token is defined to be an array then the
			components of the array are assigned and passed as arguments to the
			function call; in all other cases the assignment and function call
			are the same as if the defining type had been used directly.</para>

		<para>The default name space for the internal identifiers for general
			type tokens is the ordinary name space and all such identifiers
			must reside in this name space. The local identifier behaves
			exactly as if it had been introduced with a typedef statement and
			is thus treated as a <replaceable>typedef-name</replaceable> by the syntax
			analyser.</para>
	</section>

	<section>
		<title id="11">Integral type tokens</title>

		<para>The token introduction <code>VARIETY</code> is used to introduce
			a token representing an integral type. A token introduced in this
			way can only be defined as an integral type and can be used
			wherever an integral type is valid.</para>

		<para>Values which have integral tokenised types can be converted to
			any scalar type (see <xref linkend="7"/>). Similarly
			values with any scalar type can be converted to a value with a
			tokenised integral type. The semantics of these conversions are
			exactly the same as if the type defining the token were used
			directly. Consider:</para>

		<programlisting language="C">
#pragma token VARIETY <code>i_t</code>#
short f(void)
{
	<code>i_t</code> x_i = 5;
	return x_i;
}
	short g(void)
{
	long x_i = 5;
	return x_i;
}</programlisting>

		<para>Within the function f there are two conversions: the value, 5,
			of type <code>int</code>, is converted to <code>i_t</code>,
			the tokenised integral type, and a value of tokenised integral type
			<code>i_t</code> is converted to a value of type short. If
			the type <code>i_t</code> were defined to be long then the
			function f would be exactly equivalent to the function g.</para>

		<para>The usual arithmetic conversions described in the ISO C standard
			(section 6.3.1.5) are defined on integral type tokens and are
			applied where required by the ISO C standard.</para>

		<para>The integral promotions are defined according to the rules
			introduced in Chapter 4. These promotions are first applied to the
			integral type token and then the usual arithmetic conversions are
			applied to the resulting type.</para>

		<para>As with general type tokens, integral type tokens can only
			reside in their default name space, the ordinary name space (the
			optional name-space, TAG, cannot be specified in the token
			introduction). They also behave as though they had been introduced
			using a typedef statement.</para>
	</section>

	<section>
		<title id="13">Arithmetic type tokens</title>

		<para>The token introduction <code>ARITHMETIC</code> introduces an
			arithmetic type token. In theory, such tokens can be defined by any
			arithmetic type, but the current implementation of the compiler
			only permits them to be defined by integral types. These type
			tokens are thus exactly equivalent to the integral type tokens
			introduced using the token introduction <code>VARIETY</code>.</para>
	</section>

	<section>
		<title id="16">Compound type tokens</title>

		<para>For the purposes of this document, a compound type is a type
			describing objects which have components that are accessible via
			member selectors. All structure and union types are thus compound
			types, but, unlike structure and union types in C, compound types
			do not necessarily have an ordering on their member selectors. In
			particular, this means that some objects of compound type cannot be
			initialised with an <replaceable>initialiser-list</replaceable> (see ISO
			C standard section 6.5.7).</para>

		<para>Compound type tokens are introduced using either the <code>STRUCT</code> or
			<code>UNION</code> token introductions. A compound type token can be defined by
			any compound type, regardless of the introduction used. It is
			expected, however, that programmers will use <code>STRUCT</code> for compound
			types with non-overlapping member selectors and <code>UNION</code> for compound
			types with overlapping member selectors. The compound type token
			introduction does not specify the member selectors of the compound
			type - these are added later (see <xref linkend="19"/>).</para>

		<para>Values and objects with tokenised compound types can be used
			anywhere that a structure and union type can be used.</para>

		<para>Internal identifiers of compound type tokens can reside in
			either the ordinary name space or the tag name space. The default
			is the ordinary name space; identifiers placed in the ordinary name
			space behave as if the type had been declared using a typedef
			statement. If the identifier, id say, is placed in the tag name
			space, it is as if the type had been declared as struct id or union
			id. Examples of the introduction and use of compound type tokens
			are shown below:</para>

		<programlisting language="C">
#pragma token STRUCT n_t#
#pragma token STRUCT TAG s_t#
#pragma token UNION TAG u_t#

void f()
{
	n_t x1;
	struct n_t x2; /* Illegal, n_t not in the tag name space */
	s_t x3; /* Illegal, s_t not in the ordinary name space*/
	struct s_t x4;
	union u_t x5;
}</programlisting>
	</section>

	<section>
		<title id="17">Type token compatibility, definitions etc.</title>

		<para>A type represented by an undefined type token is incompatible
			(ISO C standard section 6.1.3.6) with all other types except for
			itself. A type represented by a defined type token is compatible
			with everything that is compatible with its definition.</para>

		<para>Type tokens can only be defined by using one of the operations
			known as <code>type-resolution</code> and
			<code>assignment-resolution</code>. Note that, as type token
			identifiers do not reside in the macro name space, they cannot be
			defined using #define statements.</para>

		<para><code>Type-resolution</code> operates on two types and is
			essentially identical to the operation of type compatibility (ISO C
			standard section 6.1.3.6) with one major exception. In the case
			where an undefined type token is found to be incompatible with the
			type with which it is being compared, the type token is defined to
			be the type with which it is being compared, thereby making them
			compatible.</para>

		<para>The ISO C standard prohibits the repeated use of typedef
			statements to define a type. However, in order to allow type
			resolution, the compiler allows types to be consistently redefined
			using multiple typedef statements if:</para>

		<itemizedlist>
			<listitem>
				<para>there is a resolution of the two types;</para>
			</listitem>
			<listitem>
				<para>as a result of the resolution, at least one token is
					defined.</para>
			</listitem>
		</itemizedlist>

		<para>As an example, consider the program below:</para>

		<programlisting language="C">
#pragma token TYPE t_t#
typedef t_t *ptr_t_t;
typedef int **ptr_t_t;</programlisting>

		<para>The second definition of <code>ptr_t_t</code> causes a resolution
			of the types <code>t_t *</code> and <code>int **</code>. The rules
			of type compatibility state that two pointers are compatible if
			their dependent types are compatible, thus type resolution results
			in the definition of <code>t_t</code> as <code>int *</code>.</para>

		<para><code>Type-resolution</code> can also result in the definition
			of other tokens. The program below results in the expression token
			<code>N</code> being defined as <code>(4 * sizeof(int))</code>.</para>

		<programlisting language="C">
#pragma token EXP rvalue:int:N#
typedef int arr[N];
typedef int arr[4 * sizeof(int)];</programlisting>

		<para>The <code>type-resolution</code> operator is not symmetric; a
			resolution of two types, <code>A</code> and <code>B</code> say, is
			an attempt to resolve type <code>A</code> to type <code>B</code>.
			Thus only the undefined tokens of <code>A</code> can be defined as
			a result of applying the type-resolution operator. In the examples
			above, if the typedefs were reversed, no <code>type-resolution</code>
			would take place and the types would be incompatible.</para>

		<para><code>Assignment-resolution</code> is similar to
			<code>type-resolution</code> but it occurs when converting an
			object of one type to another type for the purposes of assignment.
			Suppose the conversion is not possible and the type to which the
			object is being converted is an undefined token type. If the token
			can be defined in such a way that the conversion is possible, then
			that token will be suitably defined. If there is more than one
			possible definition, the definition causing no conversion will be
			chosen.</para>
	</section>

</chapter>

