<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Common Errors</title>

	<para>Tchk is capable of performing a number of checks for common
		programming mistakes. This chapter describes these checks and
		controlling pragmas.</para>

	<section>
		<title>Enumerations controlling switch statements</title>

		<para>Enumerations are commonly used as control expressions in switch
			statements. When case labels for some of the enumeration constant
			belonging to the enumeration type do not exist and there is no
			default label, the switch statement has no effect for certain
			possible values of the control expression. Checks to detect such
			switch statements are controlled by:</para>

		<programlisting language="c">#pragma TenDRA enum switch analysis <emphasis>status</emphasis></programlisting>

		<para>where <emphasis>status</emphasis> is <code>on</code> (raise
			an error), <code>warning</code> (produce a warning), or
			<code>off</code> (the default mode when no errors are
			produced).</para>
	</section>

	<section>
		<title>Incomplete structures and unions</title>

		<para>ISO C allows for structures or unions to be declared but not
			defined, provided they are not used in a context where it is
			necessary to know the complete structure. For example:</para>

		<programlisting language="c">struct tag *p;</programlisting>

		<para>is allowed, despite the fact that <code>struct tag</code> is
			incomplete. The TenDRA C checker has an option to detect such
			incomplete structures or unions, controlled by:</para>

		<programlisting language="c">#pragma TenDRA complete struct/union analysis <emphasis>status</emphasis></programlisting>

		<para>where <emphasis>status</emphasis> is <code>on</code> to give
			an error as an incomplete structure or union is detected,
			<code>warning</code> to give a warning, or <code>off</code>
			to disable the check.</para>

		<para>The check can also be controlled by passing the command-line
			option <code>-X:complete_struct=</code><emphasis>state</emphasis> to tchk,
			where <emphasis>state</emphasis> is <code>check</code>, <code>warn</code>
			or <code>dont</code>.</para>

		<para>The only place where the checker can actually detect that a
			structure or union is incomplete is at the end of the source file.
			This is because it is possible to complete a structure after it has
			been used. For example, in:</para>

		<programlisting language="c">struct tag *p;
struct tag {
	int a;
	int b;
};</programlisting>

		<para><code>struct tag</code> is complete despite the fact that it was
			incomplete in the definition of <code>p</code>.</para>
	</section>

	<section>
		<title>Variable shadowing</title>

		<para>It is quite legal in C to have a variable in an inner scope, with
			the same name as a variable in an outer scope. These variables are
			distinct and whilst in the inner scope, the declaration in the outer
			scope is not visible - it is <quote>shadowed</quote> by the local
			variable of the same name. Confusion can arise if this was not what
			the programmer intended. The checker can therefore be configured to
			detect shadowing in three cases: a local variable shadowing a global
			variable; a local variable shadowing a local variable with a wider
			scope and a local variable shadowing a typedef name, by using:</para>

		<programlisting language="c">#pragma TenDRA variable hiding analysis <emphasis>status</emphasis></programlisting>

		<para>If <emphasis>status</emphasis> is <code>on</code> an error is
			raised when a local variable that shadows another variable is
			declared, if <code>warning</code> is used the error is replaced by
			a warning and the <code>off</code> option restores the default
			behaviour (shadowing is permitted and no errors are produced).</para>
	</section>

	<section>
		<title>Floating point equality</title>

		<para>Due to the rounding errors that occur in the handling of floating
			point values, comparison for equality between two floating point
			values is a hazardous and unpredictable operation. Tests for
			equality of two floating point numbers are controlled by:</para>

		<programlisting language="c">#pragma TenDRA floating equality <emphasis>permit</emphasis></programlisting>

		<para>where <emphasis>permit</emphasis> is <code>allow</code>,
			<code>warning</code> or <code>disallow</code>. By default the check
			is switched off.</para>
	</section>
</chapter>
