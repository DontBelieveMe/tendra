<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<!--
	$Id$
-->

<chapter id="program">
    <title>Program overview</title>
  <para>
  The C++ producer is a large program (over 200000 lines, including
  automatically generated code) written in C.  A description of the
  <A HREF="style.html#language">coding conventions</A> used, the
  <A HREF="style.html#api">API</A> observed and the basic organisation
  of the <A HREF="style.html#src">source code</A> are described in the
  first section.
  </para>
  <para>
  One of the design methods used in the C++ producer is the extensive
  use of automatic code generation tools.  The type system is based
  around the <code>calculus</code> tool, which allows complex type systems
  to be described in a simple format.  The interface generated by <code>calculus
  </code> allows for rigorous static type checking, generic type constructors
  for lists, stacks etc., encapsulation of the operations on the types
  within the system, and optional run-time checking for null pointers
  and discriminated union tags.  An overview is given of the <A HREF="alg.html">type
  system</A> used as the basis of the C++ producer design.  Also see
  the
  <A HREF="../utilities/calc.html"><code>calculus</code> users' guide</A>.
  </para>
  <para>
  The other general purpose code generation tool used in the C++ producer
  is the parser generator, <code>sid</code>.  A brief description of
  the problems in writing a <A HREF="parse.html">C++ parser</A> is given.
  Also see the <A HREF="../utilities/sid.html"><code>sid</code> users'
  guide</A>.
  </para>
  <para>
  The other code generation tools used were written specifically for
  the C++ producer.  The error reporting routines within the producer
  are based on an <A HREF="error.html">error catalogue</A>, from which
  code for constructing and printing errors is generated.  The
  <A HREF="tdf.html">TDF output routines</A> are based on primitives
  automatically generated from a standard database describing the TDF
  specification.
  </para>
  <para>
  The program itself is well commented, so no lower level program documentation
  has been provided.  When performing development work the producer
  should be compiled with the <code>DEBUG</code> macro defined. This
  enables the <code>calculus</code> run-time checks, along with other
  assertions, and makes available the debugging routines,
  <code>DEBUG_</code><emphasis>type</emphasis>, which can be used to print an object
  from the internal type system.
  </para>
</chapter>

