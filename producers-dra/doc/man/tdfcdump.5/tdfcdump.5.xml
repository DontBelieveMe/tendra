<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd">

<!-- $Id$ -->
<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<refmeta>
		<refentrytitle>tdfc2 dump format</refentrytitle>
		<manvolnum>5</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>tdfc2 dump format</refname>
		<refpurpose>TODO</refpurpose>
	</refnamediv>

	<!-- TODO very much to do -->

	<refsection>
		<title>Basics</title>

		<programlisting language="bnf">
digit : one of 0 1 2 3 4 5 6 7 8 9
digit-sequence :
<replaceable>        digit</replaceable><replaceable>        digit-sequence</replaceable>
number :
<replaceable>        digit-sequence</replaceable>
string :
<replaceable>        &lt;characters&gt;</replaceable><replaceable>        &amp;digit-sequence&lt;characters&gt;</replaceable>
location :
<replaceable>        number number number string string</replaceable><replaceable>        number number number string *</replaceable><replaceable>        number number number *</replaceable><replaceable>        number number *</replaceable><replaceable>        number *</replaceable><replaceable>        *</replaceable></programlisting>
	</refsection>

	<refsection>
		<title>Dump commands</title>

		<programlisting language="bnf">
dump-file :
                <replaceable>command-list</replaceable>&opt.bnf;
command-list :
<replaceable>        command</replaceable><replaceable>        command command-list</replaceable>
command :
<replaceable>        B base-definition             </replaceable><replaceable>base class graph</replaceable><replaceable>        error-command</replaceable><replaceable>        file-command</replaceable><replaceable>        I identifier-command        </replaceable><replaceable>implicit declarations etc.</replaceable><replaceable>        identifier-command</replaceable><replaceable>        scope-command</replaceable><replaceable>        O identifier identifier </replaceable><replaceable>overriding virtual function</replaceable><replaceable>        P type : type     </replaceable><replaceable>promotion type specifier</replaceable><replaceable>        string-command</replaceable><replaceable>        V number number string    </replaceable><replaceable>version number</replaceable><replaceable>        X api-info            </replaceable><replaceable>external token name</replaceable><replaceable>        Z template-info</replaceable><replaceable>template instance</replaceable></programlisting>
	</refsection>

	<refsection>
		<title>E.3 API information</title>

		<programlisting language="bnf">
api-info :
<replaceable>        identifier key identifier string</replaceable></programlisting>
	</refsection>

	<refsection>
		<title>Base definitions</title>

		<programlisting language="bnf">
virtual :
<replaceable>        V</replaceable>
base-class :
<replaceable>        number = virtual</replaceable>&opt.bnf;<replaceable> access</replaceable>&opt.bnf;<replaceable> type-name
</replaceable><replaceable>        number :</replaceable>
base-list :
<replaceable>        base-graph</replaceable><replaceable>        base-graph base-list</replaceable>
base-graph :
<replaceable>        base-class</replaceable><replaceable>        base-class ( base-list )</replaceable>
base-definition :
<replaceable>        identifier-key number base-graph</replaceable>
base-number :
<replaceable>        number : type-name</replaceable></programlisting>
	</refsection>

	<refsection>
		<title>Error commands</title>

		<programlisting language="bnf">
error-command :
<replaceable>        EA error-argument             </replaceable><replaceable>error argument</replaceable><replaceable>        EC error-info     </replaceable><replaceable>continuation error</replaceable><replaceable>        EF location error-info    </replaceable><replaceable>fatal error</replaceable><replaceable>        EI location error-info    </replaceable><replaceable>internal error</replaceable><replaceable>        ES location error-info    </replaceable><replaceable>serious error</replaceable><replaceable>        EW location error-info    </replaceable><replaceable>warning</replaceable>
error-info :
<replaceable>        error-name number number</replaceable>
error-name :
<replaceable>        number = string</replaceable><replaceable>        number</replaceable>
error-argument :
<replaceable>        B base-number</replaceable><replaceable>        C scope-identifier</replaceable><replaceable>        E exp</replaceable><replaceable>        H hashid</replaceable><replaceable>        I identifier</replaceable><replaceable>        L location</replaceable><replaceable>        N nat</replaceable><replaceable>        S string</replaceable><replaceable>        T type</replaceable><replaceable>        V number</replaceable><replaceable>        V -number</replaceable></programlisting>
		</refsection>

		<refsection>
			<title>File commands</title>

			<programlisting language="bnf">
file-command :
<replaceable>        FD number = string stringopt        </replaceable><replaceable>inclusion directory</replaceable><replaceable>        FE location         </replaceable><replaceable>file end</replaceable><replaceable>        FIA location string         </replaceable><replaceable>file include with &lt;&gt;</replaceable><replaceable>        FIE location string         </replaceable><replaceable>include end-up</replaceable><replaceable>        FIN location string         </replaceable><replaceable>file include with []</replaceable><replaceable>        FIQ location string</replaceable><replaceable>file include with ""</replaceable>
                FIR location        <replaceable>resume file</replaceable>
                FIS location string         <replaceable>include startup</replaceable>
                FS location directory     <replaceable>file start</replaceable>
directory :
                number
                *</programlisting>
	</refsection>

	<refsection>
		<title>Identifier commands</title>

		<programlisting language="bnf">
identifier-command :
                C identifier-info             <replaceable>call identifier</replaceable>
                D identifier-info type-info         <replaceable>define identifier</replaceable>
                L identifier-info             <replaceable>use identifier</replaceable>
                M identifier-info type-info         <replaceable>declare identifier</replaceable>
                Q identifier-info             <replaceable>end identifier definition</replaceable>
                T identifier-info type-info         <replaceable>tentatively define identifier</replaceable>
                U identifier-info             <replaceable>undefine identifier</replaceable>
                W identifier-info type-info         <replaceable>weak prototype</replaceable>
identifier-info :
                identifier-key location identifier
identifier-key :
                CD            <replaceable>static data member</replaceable>
                CF function-key <replaceable>member function</replaceable>
                CM            <replaceable>data member</replaceable>
                CS function-key <replaceable>static member function</replaceable>
                CV function-key <replaceable>virtual member function</replaceable>
                E             <replaceable>enumerator</replaceable>
                FB function-key <replaceable>builtin function</replaceable>
                FE function key <replaceable>external function</replaceable>
                FS function-key <replaceable>static function</replaceable>
                K             <replaceable>keyword</replaceable>
                L             <replaceable>label</replaceable>
                MB            <replaceable>built-in macro</replaceable>
                MF            <replaceable>function-like macro</replaceable>
                MO            <replaceable>object-like macro</replaceable>
                NA            <replaceable>namespace alias</replaceable>
                NN            <replaceable>namespace name</replaceable>
                TA            <replaceable>type alias</replaceable>
                TC            <replaceable>class tag</replaceable>
                TE            <replaceable>enum tag</replaceable>
                TS            <replaceable>struct tag</replaceable>
                TU            <replaceable>union tag</replaceable>
                VA            <replaceable>automatic variable</replaceable>
                VE            <replaceable>extern variable</replaceable>
                VP            <replaceable>function parameter</replaceable>
                VS            <replaceable>static variable</replaceable>
                XF            <replaceable>procedure token</replaceable>
                XO            <replaceable>object token</replaceable>
                XP            <replaceable>token parameter</replaceable>
                XT            <replaceable>template parameter</replaceable>
function-key :
                empty
                C function-key    <replaceable>C linkage</replaceable>
                I function-key    <replaceable>inline</replaceable>
identifier :
                number = hashid accessopt scope-identifier
                number
hashid :
                string    <replaceable>simple name</replaceable>
                C type    <replaceable>constructor</replaceable>
                D type    <replaceable>destructor</replaceable>
                O string                <replaceable>operator</replaceable>
                T type    <replaceable>conversion</replaceable>
access :
                B             <replaceable>protected</replaceable>
                N             <replaceable>public</replaceable>
                P             <replaceable>private</replaceable></programlisting>
	</refsection>

	<refsection>
		<title>Scope commands</title>

		<programlisting language="bnf">
scope-command :
                SE scope-key location identifier                <replaceable>end scope</replaceable>
                SS scope-key location identifier                <replaceable>start scope</replaceable>
scope-key :
                B             <replaceable>block scope</replaceable>
                CC            <replaceable>conditional scope</replaceable>
                N             <replaceable>namespace scope</replaceable>
                CF            <replaceable>false conditional scope</replaceable>
                CT            <replaceable>true conditional scope</replaceable>
                D             <replaceable>other declarative scope</replaceable>
                H             <replaceable>header scope</replaceable>
                S             <replaceable>class scope</replaceable>
scope-identifier :
                identifier
                *</programlisting>
	</refsection>

	<refsection>
		<title>String command</title>

		<programlisting language="bnf">
string-command :
                A location string             <replaceable>string literal</replaceable>
                AC location string            <replaceable>character literal</replaceable>
                ACL location string         <replaceable>wide character literal</replaceable>
                AL location string            <replaceable>wide string literal</replaceable></programlisting>
	</refsection>

	<refsection>
		<title>Templates</title>

		<programlisting language="bnf">
specialisation-info :
                token-application
                *
template-info :
                identifier-key identifier token-application specialisation-info</programlisting>
	</refsection>

	<refsection>
		<title>Token sort information</title>

		<programlisting language="bnf">
sort :
                ZEC type-info     <replaceable>constant expression</replaceable>
                ZEL type-info     <replaceable>lvalue expression</replaceable>
                ZER type-info     <replaceable>rvalue expression</replaceable>
                ZF type-info        <replaceable>function</replaceable>
                ZM type-info : type-name                <replaceable>member</replaceable>
                ZN            <replaceable>integral constant</replaceable>
                ZPS parameter-list-opt : sort     <replaceable>procedure type ()</replaceable>
                ZPG parameter-list-opt ; parameter-list-opt:sort 
<replaceable>                        procedure type {}</replaceable>
                ZS            <replaceable>statement</replaceable>
                ZTA         <replaceable>arithmetic type</replaceable>
                ZTF         <replaceable>floating type</replaceable>
                ZTI         <replaceable>integral type</replaceable>
                ZTO         <replaceable>opaque type</replaceable>
                ZTP         <replaceable>scalar type</replaceable>
                ZTS         <replaceable>structure type</replaceable>
                ZTt parameter-list-opt :                <replaceable>template type</replaceable>
                ZTTS        <replaceable>structure tag </replaceable>
                ZTTU        <replaceable>union tag</replaceable>
                ZTU         <replaceable>union type</replaceable>
                ZUF number            <replaceable>function macro</replaceable>
                ZUO         <replaceable>object macro</replaceable>
exp :
                nat
member :
                identifier
                string
statement :
                exp
token-argument :
                C identifier        <replaceable>template argument</replaceable>
                E exp     <replaceable>expression argument</replaceable>
                F identifier        <replaceable>function argument</replaceable>
                M member                <replaceable>member argument</replaceable>
                N nat     <replaceable>integer constant argument</replaceable>
                S statement         <replaceable>statement argument</replaceable>
                T type-info         <replaceable>type argument</replaceable>
token-argument-list :
                token-argument
                token-argument , token-argument-list
token-application :
                T identifier , token-argument-list :</programlisting>
		</refsection>

		<refsection>
			<title>E.12 Type information</title>

			<programlisting language="bnf">
type-info :
                scope-identifier                <replaceable>for namespace alias</replaceable>
                sort        <replaceable>for token, macro etc.</replaceable>
                type        <replaceable>for variable etc.</replaceable>
                type identifier-opt         <replaceable>for overloaded function</replaceable>
type :
                qualifieropt unqualified-type
qualifier :
                C             <replaceable>const</replaceable>
                V             <replaceable>volatile</replaceable>
                CV            <replaceable>const volatile</replaceable>
unqualified-type :
                type-name
                token-application
                c             <replaceable>char</replaceable>
                s             <replaceable>short</replaceable>
                i             <replaceable>int</replaceable>
                l             <replaceable>long</replaceable>
                x             <replaceable>long long</replaceable>
                f             <replaceable>float</replaceable>
                d             <replaceable>double</replaceable>
                r             <replaceable>long double</replaceable>
                v             <replaceable>void</replaceable>
                b             <replaceable>bool</replaceable>
                w             <replaceable>wchar_t</replaceable>
                Sc            <replaceable>signed char</replaceable>
                Uc            <replaceable>unsigned char</replaceable>
                Us            <replaceable>unsigned short</replaceable>
                Ui            <replaceable>unsigned int</replaceable>
                Ul            <replaceable>unsigned long</replaceable>
                Ux            <replaceable>unsigned long long</replaceable>
                u             <replaceable>bottom</replaceable>
                y             <replaceable>ptrdiff_t</replaceable>
                z             <replaceable>size_t</replaceable>
                a type : type     <replaceable>arithmetic type</replaceable>
                n nat     <replaceable>literal type</replaceable>
                p type    <replaceable>promoted type</replaceable>
                t parameter-listopt : type            <replaceable>template type</replaceable>
                A natopt : type <replaceable>array type</replaceable>
                B nat : type        <replaceable>bitfield type</replaceable>
                F type parameter-types    <replaceable>function type</replaceable>
                M type-name : type            <replaceable>pointer to member type</replaceable>
                P type    <replaceable>pointer type</replaceable>
                R type    <replaceable>reference type</replaceable>
                W type parameter-types    <replaceable>weak function type</replaceable>
                Q string                <replaceable>quoted type</replaceable>
                *             <replaceable>unknown type</replaceable>
parameter-types :
                : exceptionopt qualifieropt :     <replaceable>no parameters</replaceable>
                . exceptionopt qualifieropt :     <replaceable>ellipsis</replaceable>
                . exceptionopt qualifieropt .     <replaceable>unknown</replaceable>
                , type parameter-types
exception :
                ( exception-listopt )
exception-list :
                type
                type, exception-list
parameter-list :
                identifier
                identifier , parameter-list
type-name :
                identifier
nat :
                +number
                -number
                string
                identifier
                token-application</programlisting>
	</refsection>

	<!-- TODO this is from tcpplus; it is to be merged with the above (or superceed it; whichever) -->
	<refsection>
    <title>C++ Symbol table dump syntax</title>
  <para>The following gives a summary of the syntax for the
  symbol table dump file (version 1.1):</para>

  <programlisting language="bnf">
<replaceable>dump-file</replaceable> :
	<replaceable>command-list&opt.bnf;</replaceable>

<replaceable>command-list</replaceable> :
	<replaceable>command command-list&opt.bnf;</replaceable>

<replaceable>command</replaceable> :
	<replaceable>version-command</replaceable>
	<replaceable>identifier-command</replaceable>
	<replaceable>scope-command</replaceable>
	<replaceable>override-command</replaceable>
	<replaceable>base-command</replaceable>
	<replaceable>api-command</replaceable>
	<replaceable>template-command</replaceable>
	<replaceable>promotion-command</replaceable>
	<replaceable>error-command</replaceable>
	<replaceable>path-command</replaceable>
	<replaceable>file-command</replaceable>
	<replaceable>include-command</replaceable>
	<replaceable>string-command</replaceable>

<replaceable>version-command</replaceable> :
	V <replaceable>number number string</replaceable>


<replaceable>location</replaceable> :
	<replaceable>number number number string string</replaceable>
	<replaceable>number number number string</replaceable> *
	<replaceable>number number number</replaceable> *
	<replaceable>number number</replaceable> *
	<replaceable>number</replaceable> *
	*


<replaceable>identifier</replaceable> :
	<replaceable>number</replaceable> = <replaceable>identifier-name access&opt.bnf; scope-identifier</replaceable>
	<replaceable>number</replaceable>

<replaceable>identifier-name</replaceable> :
	<replaceable>string</replaceable>
	C <replaceable>type</replaceable>
	D <replaceable>type</replaceable>
	O <replaceable>string</replaceable>
	T <replaceable>type</replaceable>

<replaceable>access</replaceable> :
	N
	B
	P

<replaceable>scope-identifier</replaceable> :
	<replaceable>identifier</replaceable>
	*

<replaceable>identifier-command</replaceable> :
	D <replaceable>identifier-info type-info</replaceable>
	M <replaceable>identifier-info type-info</replaceable>
	T <replaceable>identifier-info type-info</replaceable>
	Q <replaceable>identifier-info</replaceable>
	U <replaceable>identifier-info</replaceable>
	L <replaceable>identifier-info</replaceable>
	C <replaceable>identifier-info</replaceable>
	W <replaceable>identifier-info type-info</replaceable>
	I <replaceable>identifier-command</replaceable>

<replaceable>identifier-info</replaceable> :
	<replaceable>identifier-key location identifier</replaceable>

<replaceable>identifier-key</replaceable> :
	K
	MO
	MF
	MB
	TC
	TS
	TU
	TE
	TA
	NN
	NA
	VA
	VP
	VE
	VS
	FE <replaceable>function-key&opt.bnf;</replaceable>
	FS <replaceable>function-key&opt.bnf;</replaceable>
	FB <replaceable>function-key&opt.bnf;</replaceable>
	CF <replaceable>function-key&opt.bnf;</replaceable>
	CS <replaceable>function-key&opt.bnf;</replaceable>
	CV <replaceable>function-key&opt.bnf;</replaceable>
	CM
	CD
	E
	L
	XO
	XF
	XP
	XT

<replaceable>function-key</replaceable> :
	C <replaceable>function-key&opt.bnf;</replaceable>
	I <replaceable>function-key&opt.bnf;</replaceable>

<replaceable>type-info</replaceable> :
	<replaceable>type identifier&opt.bnf;</replaceable>
	<replaceable>sort</replaceable>
	<replaceable>scope-identifier</replaceable>
	*


<replaceable>scope-command</replaceable> :
	SS <replaceable>scope-key location identifier</replaceable>
	SE <replaceable>scope-key location identifier</replaceable>

<replaceable>scope-key</replaceable> :
	N
	S
	B
	D
	H
	CT
	CF
	CC


<replaceable>override-command</replaceable> :
	O <replaceable>identifier identifier</replaceable>


<replaceable>base-command</replaceable> :
	B <replaceable>identifier-key identifier base-graph</replaceable>

<replaceable>base-graph</replaceable> :
	<replaceable>base-class</replaceable>
	<replaceable>base-class</replaceable> ( <replaceable>base-list</replaceable> )

<replaceable>base-class</replaceable> :
	<replaceable>number</replaceable> = V<replaceable>&opt.bnf; access&opt.bnf; type-name</replaceable>
	<replaceable>number</replaceable> :

<replaceable>base-list</replaceable> :
	<replaceable>base-graph base-list&opt.bnf;</replaceable>

<replaceable>base-number</replaceable> :
	<replaceable>number</replaceable> : <replaceable>type-name</replaceable>


<replaceable>api-command</replaceable> :
	X <replaceable>identifier-key identifier string</replaceable>


<replaceable>template-command</replaceable> :
	Z <replaceable>identifier-key identifier token-application specialise-info</replaceable>

<replaceable>specialise-info</replaceable> :
	<replaceable>identifier</replaceable>
	<replaceable>token-application</replaceable>
	*


<replaceable>type</replaceable> :
	<replaceable>type-name</replaceable>
	c
	s
	i
	l
	x
	b
	w
	y
	z
	f
	d
	r
	v
	u
	Sc
	Uc
	Us
	Ui
	Ul
	Ux
	C <replaceable>type</replaceable>
	V <replaceable>type</replaceable>
	P <replaceable>type</replaceable>
	R <replaceable>type</replaceable>
	M <replaceable>type-name</replaceable> : <replaceable>type</replaceable>
	F <replaceable>type parameter-types</replaceable>
	A <replaceable>nat&opt.bnf;</replaceable> : <replaceable>type</replaceable>
	B <replaceable>nat</replaceable> : <replaceable>type</replaceable>
	t <replaceable>parameter-list&opt.bnf;</replaceable> : <replaceable>type</replaceable>
	p <replaceable>type</replaceable>
	a <replaceable>type</replaceable> : <replaceable>type</replaceable>
	n <replaceable>lit-base&opt.bnf; lit-suffix&opt.bnf;</replaceable>
	W <replaceable>type parameter-types</replaceable>
	q <replaceable>type</replaceable>
	Q <replaceable>string</replaceable>
	*

<replaceable>type-name</replaceable> :
	<replaceable>identifier</replaceable>
	<replaceable>token-application</replaceable>

<replaceable>parameter-types</replaceable> :
	: <replaceable>exception-spec&opt.bnf; func-qualifier&opt.bnf;</replaceable> :
	. <replaceable>exception-spec&opt.bnf; func-qualifier&opt.bnf;</replaceable> :
	. <replaceable>exception-spec&opt.bnf; func-qualifier&opt.bnf;</replaceable> .
	, <replaceable>type parameter-types</replaceable>

<replaceable>func-qualifier</replaceable> :
	C <replaceable>func-qualifier&opt.bnf;</replaceable>
	V <replaceable>func-qualifier&opt.bnf;</replaceable>

<replaceable>exception-spec</replaceable> :
	( <replaceable>exception-list&opt.bnf;</replaceable> )

<replaceable>exception-list</replaceable> :
	<replaceable>type</replaceable>
	<replaceable>type</replaceable> , <replaceable>exception-list</replaceable>

<replaceable>nat</replaceable> :
	+ <replaceable>number</replaceable>
	- <replaceable>number</replaceable>
	<replaceable>identifier</replaceable>
	<replaceable>token-application</replaceable>
	<replaceable>string</replaceable>

<replaceable>parameter-list</replaceable> :
	<replaceable>identifier</replaceable>
	<replaceable>identifier</replaceable> , <replaceable>parameter-list</replaceable>

<replaceable>lit-base</replaceable> :
	O
	X

<replaceable>lit-suffix</replaceable> :
	U
	l
	Ul
	x
	Ux


<replaceable>promotion-command</replaceable> :
	P <replaceable>type</replaceable> : <replaceable>type</replaceable>


<replaceable>sort</replaceable> :
	<replaceable>expression-sort</replaceable>
	<replaceable>statement-sort</replaceable>
	<replaceable>type-sort</replaceable>
	<replaceable>tag-type-sort</replaceable>
	<replaceable>member-sort</replaceable>
	<replaceable>proc-sort</replaceable>
	<replaceable>func-sort</replaceable>
	<replaceable>template-sort</replaceable>
	<replaceable>macro-sort</replaceable>

<replaceable>expression-sort</replaceable> :
	ZEL <replaceable>type</replaceable>
	ZER <replaceable>type</replaceable>
	ZEC <replaceable>type</replaceable>
	ZN

<replaceable>statement-sort</replaceable> :
	ZS

<replaceable>type-sort</replaceable> :
	ZTO
	ZTI
	ZTF
	ZTA
	ZTP
	ZTS
	ZTU

<replaceable>tag-type-sort</replaceable> :
	ZTTS
	ZTTU

<replaceable>member-sort</replaceable> :
	ZM <replaceable>type</replaceable> : <replaceable>type-name</replaceable>

<replaceable>proc-sort</replaceable> :
	ZPG <replaceable>parameter-list&opt.bnf;</replaceable> ; <replaceable>parameter-list&opt.bnf;</replaceable> : <replaceable>sort</replaceable>
	ZPS <replaceable>parameter-list&opt.bnf;</replaceable> : <replaceable>sort</replaceable>

<replaceable>func-sort</replaceable> :
	ZF <replaceable>type</replaceable>

<replaceable>template-sort</replaceable> :
	ZTt <replaceable>parameter-list&opt.bnf;</replaceable> :

<replaceable>macro-sort</replaceable> :
	ZUO
	ZUF <replaceable>number</replaceable>

<replaceable>token-application</replaceable> :
	T <replaceable>identifier</replaceable> , <replaceable>token-argument-list</replaceable> :

<replaceable>token-argument-list</replaceable> :
	<replaceable>token-argument</replaceable>
	<replaceable>token-argument</replaceable> , <replaceable>token-argument-list</replaceable>

<replaceable>token-argument</replaceable> :
	E <replaceable>expression</replaceable>
	N <replaceable>nat</replaceable>
	S <replaceable>statement</replaceable>
	T <replaceable>type</replaceable>
	M <replaceable>member</replaceable>
	F <replaceable>identifier</replaceable>
	C <replaceable>identifier</replaceable>

<replaceable>expression</replaceable> :
	<replaceable>nat</replaceable>

<replaceable>statement</replaceable> :
	<replaceable>expression</replaceable>

<replaceable>member</replaceable> :
	<replaceable>identifier</replaceable>
	<replaceable>string</replaceable>


<replaceable>error-name</replaceable> :
	<replaceable>number</replaceable> = <replaceable>string</replaceable>
	<replaceable>number</replaceable>

<replaceable>error-command</replaceable> :
	ES <replaceable>location error-info</replaceable>
	EW <replaceable>location error-info</replaceable>
	EI <replaceable>location error-info</replaceable>
	EF <replaceable>location error-info</replaceable>
	EC <replaceable>error-info</replaceable>
	EA <replaceable>error-argument</replaceable>

<replaceable>error-info</replaceable> :
	<replaceable>error-name number number</replaceable>

<replaceable>error-argument</replaceable> :
	B <replaceable>base-number</replaceable>
	C <replaceable>scope-identifier</replaceable>
	E <replaceable>expression</replaceable>
	H <replaceable>identifier-name</replaceable>
	I <replaceable>identifier</replaceable>
	L <replaceable>location</replaceable>
	N <replaceable>nat</replaceable>
	S <replaceable>string</replaceable>
	T <replaceable>type</replaceable>
	V <replaceable>number</replaceable>
	V - <replaceable>number</replaceable>


<replaceable>path-command</replaceable> :
	FD <replaceable>number</replaceable> = <replaceable>string string&opt.bnf;</replaceable>

<replaceable>directory</replaceable> :
	<replaceable>number</replaceable>
	*

<replaceable>file-command</replaceable> :
	FS <replaceable>location directory</replaceable>
	FE <replaceable>location</replaceable>

<replaceable>include-command</replaceable> :
	FIA <replaceable>location string</replaceable>
	FIQ <replaceable>location string</replaceable>
	FIN <replaceable>location string</replaceable>
	FIS <replaceable>location string</replaceable>
	FIE <replaceable>location string</replaceable>
	FIR <replaceable>location</replaceable>


<replaceable>string-command</replaceable> :
	A <replaceable>location string</replaceable>
	AC <replaceable>location string</replaceable>
	AL <replaceable>location string</replaceable>
	ACL <replaceable>location string</replaceable></programlisting>
	</refsection>
</refentry>

