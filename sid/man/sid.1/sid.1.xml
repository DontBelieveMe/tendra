<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [
	<!ENTITY limit.arg "<replaceable>file</replaceable>">
	<!ENTITY inlines.arg "<replaceable>inlines</replaceable>">

	<!ENTITY dump-file.opt    "<option>--dump-file</option>&nbsp;&file.arg;">
	<!ENTITY factor-limit.opt "<option>--factor-limit</option>&nbsp;&limit.arg;">
	<!ENTITY inline.opt       "<option>--inline</option>&nbsp;&inlines.arg;">
	<!ENTITY language.opt     "<option>--language</option>&nbsp;&lang.arg;">
	<!ENTITY switch.opt       "<option>--switch</option>&nbsp;&opt.arg;">
	<!ENTITY tab-width.opt    "<option>--tab-width</option>&nbsp;&num.arg;">
	<!ENTITY help.opt         "<option>--help</option>">
	<!ENTITY version.opt      "<option>--version</option>">

	<!ENTITY d.opt "<option>-d</option>&nbsp;&file.arg;">
	<!ENTITY f.opt "<option>-f</option>&nbsp;&limit.arg;">
	<!ENTITY i.opt "<option>-i</option>&nbsp;&inlines.arg;">
	<!ENTITY l.opt "<option>-l</option>&nbsp;&lang.arg;">
	<!ENTITY s.opt "<option>-s</option>&nbsp;&opt.arg;">
	<!ENTITY t.opt "<option>-t</option>&nbsp;&num.arg;">
	<!ENTITY h.opt "<option>-h</option>">
	<!ENTITY q.opt "<option>-?</option>">
	<!ENTITY v.opt "<option>-v</option>">

	<!ENTITY ansi-c.lit     "<literal>ansi-c</literal>">
	<!ENTITY pre-ansi-c.lit "<literal>pre-ansi-c</literal>">
	<!ENTITY test.lit       "<literal>test</literal>">
	<!ENTITY bnf.lit        "<literal>bnf</literal>">
]>

<!-- $Id -->
<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<refentryinfo>
		<productname>sid</productname>
	</refentryinfo>

	<refmeta>
		<refentrytitle>sid</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv id="name">
		<refname>sid</refname>
		<refpurpose>Syntax Improving Device; parser generator</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<cmdsynopsis>
			<command>sid</command>

			<group>
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&dump-file.opt;</arg>
			</group>

			<group>
				<arg choice="plain">&f.opt;</arg>
				<arg choice="plain">&factor-limit.opt;</arg>
			</group>

			<group>
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&inline.opt;</arg>
			</group>

			<sbr/>

			<group>
				<arg choice="plain">&l.opt;</arg>
				<arg choice="plain">&language.opt;</arg>
			</group>

			<group>
				<arg choice="plain">&s.opt;</arg>
				<arg choice="plain">&switch.opt;</arg>
			</group>

			<group>
				<arg choice="plain">&t.opt;</arg>
				<arg choice="plain">&tab-width.opt;</arg>
			</group>

			<sbr/>

			<arg rep="repeat" choice="plain">&in-file.arg;</arg>
			<arg rep="repeat" choice="opt">&in-file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>sid</command>

			<group choice="req">
				<arg choice="plain">&h.opt;</arg>
				<arg choice="plain">&q.opt;</arg>
				<arg choice="plain">&help.opt;</arg>

				<arg choice="plain">&v.opt;</arg>
				<arg choice="plain">&version.opt;</arg>
			</group>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>The &sid; command is used to turn descriptions of a language into
			a program for recognising that language.
			This manual page details the command line syntax; for more
			information, consult the &sid; user documentation.
			<!-- TODO: link to sid guide -->
			The number of files specified on the command line varies depending
			upon the output language.
			The description of the <option>--language</option> option
			specifies the number of files for each language.</para>
	</refsection>

	<refsection>
		<title>Switches</title>

		<para>&sid; accepts both short form and long form command line switches.
			The long form equivalents are due to be removed in the next
			release.</para>
		<!-- TODO: remove these -->

		<para>Short form switches are single characters, and begin with a
			<quote>-</quote> or <quote>+</quote> character.
			They can be concatentated into a single command line word, e.g.:</para>

		<screen><option>-vdl</option> &dump-file.arg; &lang.arg;</screen>

		<para>which contains three different switches (<option>-v</option>, which
			takes no arguments; <option>-d</option>, which takes one argument:
			&dump-file.arg;; and <option>-l</option>, which
			takes one argument: &lang.arg;).</para>

		<para>Long form switches are strings, and begin with <literal>--</literal>
			or <literal>++</literal>.	With long form switches, only the shortest
			unique prefix need be entered.	The long form of the above example
			would be:</para>

		<screen><option>--version</option> <option>--dump-file</option> &dump-file.arg; <option>--language</option> &lang.arg;</screen>

		<para>In most cases the arguments to the switch should follow the
			switch as a separate word.
			In the case of short form switches, the arguments to the short form
			switches in a single word should follow the word in the order of the
			switches (as in the first example).	For some options, the argument
			may be part of the same word as the switch (such options are shown
			without a space between the switch and the argument in the switch
			summaries below).
			In the case of short form switches, such a switch would terminate
			any concatentation of switches (either a character would follow it,
			which would be treated as its argument, or it would be the end of
			the word, and its argument would follow as normal).</para>

		<para>For binary switches, the &hyphen.lit; or
			<literal>--</literal> switch prefixes set (enable) the switch, and
			the <literal>+</literal> or <literal>++</literal> switch prefixes
			reset (disable) the switch.
			This is probably back to front, but is in keeping with other
			programs. The switches <literal>--</literal> or
			<literal>++</literal> by themselves terminate option parsing.</para>
	</refsection>

	<refsection>
		<title>Options</title>

		<para>&sid; accepts the following command line options:</para>

		<variablelist>
			<varlistentry>
				<term>&dump-file.opt;</term>
				<term>&d.opt;</term>

				<listitem>
					<para>This option causes intermediate dumps of the
						grammar to be written to the file &file.arg;.
						The format of the dump files is similar to the
						format of the grammar specification, with the
						following exceptions:</para>

					<itemizedlist>
						<listitem>
							<para>Predicates are written with the predicate
								result replaced by the predicate identifier
								(this will always be zero), and the result
								is followed by a <code>?</code> to indicate
								that it was a predicate.
								As an example, the predicate:</para>

							<programlisting language="sid">( b, ? ) = &lt;pred&gt; ( a )</programlisting>

							<para>would be printed out as:</para>

							<programlisting language="sid">( b : Type1T, 0 : Type2T ) ? = &lt;pred&gt; ( a : Type3T )</programlisting>
						</listitem>

						<listitem>
							<para>Items that are considered to be inlinable
								are prefixed by a <code>+</code>.
								Items that are tail calls which will be
								eliminated are prefixed by a <code>*</code>.</para>
						</listitem>

						<listitem>
							<para>Nested rules are written at the outer
								level, with names of the form
								<code><replaceable>outer-rule</replaceable>::<replaceable>....</replaceable>::<replaceable>inner-rule</replaceable></code>.</para>
						</listitem>

						<listitem>
							<para>Types are provided on call parameter and
								result tuples.</para>
						</listitem>

						<listitem>
							<para>Inline rules are given a generated name,
								and are written out as a call to the generated
								rule (and a definition elsewhere).</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&factor-limit.opt;</term>
				<term>&f.opt;</term>

				<listitem>
					<para>This option limits the number of rules that can be
						created during the factorisation process.
						It is probably best not to change this.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&q.opt;</term>
				<term>&h.opt;</term>
				<term>&help.opt;</term>

				<listitem>
					<para>This option writes a summary of the command line
						options to the standard error stream.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&inline.opt;</term>
				<term>&i.opt;</term>

				<listitem>
					<para>This option controls what inlining will be done
						in the output parser.  The inlines argument should
						be a comma seperated list of the following words:</para>

					<variablelist>
						<varlistentry>
							<term><literal>SINGLES</literal></term>

							<listitem>
								<para>This causes single alternative rules
									to be inlined.
									This inlining is no longer performed as a
									modification to the grammar
									(it was in version 1.0).</para>
							</listitem>
						</varlistentry>

						<varlistentry>
							<term><literal>BASICS</literal></term>

							<listitem>
								<para>This causes rules that contain only
									basics (and no exception handlers or
									empty alternatives) to be inlined.
									The restriction on exception handlers
									and empty alternatives is rather
									arbitrary, and may be changed later.</para>
							</listitem>
						</varlistentry>

						<varlistentry>
							<term><literal>TAIL</literal></term>

							<listitem>
								<para>This causes tail recursive calls to
									be inlined.	Without this, tail recursion
									elimination will not be performed.</para>
							</listitem>
						</varlistentry>

						<varlistentry>
							<term><literal>OTHER</literal></term>

							<listitem>
								<para>This causes other calls to be inlined
									wherever possible.	Unless the
									<literal>MULTI</literal> inlining is
									also specified, this will be done only for
									productions that are called once.</para>
							</listitem>
						</varlistentry>

						<varlistentry>
							<term><literal>MULTI</literal></term>

							<listitem>
								<para>This causes calls to be inlined,
									even if the rule being called is called
									more than once.	Turning this inlining on
									implies <literal>OTHER</literal>.	Similarly
									turning off <literal>OTHER</literal> inlining
									will turn off <literal>MULTI</literal> inlining.
									For grammars of any size, this is probably
									best avoided; if used the generated parser may
									be huge (e.g. a C grammar has produced a file that
									was several hundred MB in size).</para>
							</listitem>
						</varlistentry>

						<varlistentry>
							<term><literal>ALL</literal></term>

							<listitem>
								<para>This turns on all inlining.</para>
							</listitem>
						</varlistentry>
					</variablelist>

					<para>In addition, prefixing a word with <quote>no</quote>
						turns off that inlining phase.	The words may be
						given in any case.
						They are evaluated in the order given, so:</para>

					<para><literal>-inline noall,singles</literal></para>

					<para>would turn on single alternative rule inlining
						only, whilst:</para>

					<para><literal>-inline singles,noall</literal></para>

					<para>would turn off all inlining.
						The default is as if &sid; were invoked with the
						option:</para>

					<screen>-inline noall,basics,tail</screen>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&language.opt;</term>
				<term>&l.opt;</term>

				<listitem>
					<para>This option specifies the output language.
						Currently this should be one of the following:</para>

					<table>
						<col align="left"/>
						<col align="left"/>
						<col align="left"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Language</th>
								<th>Input&nbsp;files</th>
								<th>Output&nbsp;files</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td>&ansi-c.lit;</td>
								<td>&sid.ext;, &act.ext;</td>
								<td>&c.ext;, &h.ext;</td>
								<td>Generated parser in &ansi; standard C.</td>
							</tr>
							<tr>
								<td>&pre-ansi-c.lit;</td>
								<td>&sid.ext;, &act.ext;</td>
								<td>&c.ext;, &h.ext;</td>
								<td>Same as &ansi-c.lit;, sans prototypes.</td>
							</tr>
							<tr>
								<td>&test.lit;</td>
								<td>&sid.ext;</td>
								<td role="na" align="center">&ndash;</td>
								<td>For testing grammars.</td>
							</tr>
							<tr>
								<td>&bnf.lit;</td>
								<td>&sid.ext;</td>
								<td>&bnf.ext;</td>
								<td>&bnf; grammar output.</td>
							</tr>
						</tbody>
					</table>

					<para>The default is &ansi-c.lit;.</para>

					<para>The &ansi-c.lit; and &pre-ansi-c.lit;
						languages are basically the same.	The only
						difference is that &ansi-c.lit; initially
						uses function prototypes, and &pre-ansi-c.lit;
						doesn't.	Each language takes two input files, a
						grammar file and an actions file, and produces two
						output files, a C source file containing the
						generated parser and a C header file containing
						the external declarations for the parser.</para>

					<para>The &test.lit; language only takes one
						input file, and produces no output file.
						It may be used to check that a grammar is valid.
						In conjunction with the dump file, it may be used
						to check the transformations that would be applied
						to the grammar.	There are no language specific options
						for the &test.lit; language.</para>

					<para>The &bnf.lit; language takes one input
						file (the grammar) and produces one output file.
						It is intended to provide a convenient means to
						convert &sid; grammars into other formats, or to
						inspect their contents in a simpler form.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&switch.opt;</term>
				<term>&s.opt;</term>

				<listitem>
					<para>Pass through &opt.arg; as a language-specific
						option. The valid options are described
						below.<!-- TODO: link --></para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&tab-width.opt;</term>
				<term>&t.opt;</term>

				<listitem>
					<para>This option specifies the number of spaces that a
						tab occupies.
						It defaults to 8.
						It is only used when indenting output.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&version.opt;</term>
				<term>&v.opt;</term>

				<listitem>
					<para>This option causes the version number
						and supported languages to be written to the
						standard error stream.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Language-specific options for C</title>

		<para>The following language-specific options apply for the
			<literal>ansi-c</literal> and <literal>pre-ansi-c</literal>
			languages:</para>

		<variablelist>
			<varlistentry>
				<term><option>prototypes</option></term>
				<term><option>proto</option></term>
				<term><option>no-prototypes</option></term>
				<term><option>no-proto</option></term>

				<listitem>
					<para>These enable or disable the use of function
						prototypes. By default this is enabled for
						&ansi-c.lit; and disabled for &pre-ansi-c.lit;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>split</option></term>
				<term><option>split</option>&equal.lit;&num.arg;</term>
				<term><option>no-split</option></term>

				<listitem>
					<para>These enable or disable the output file split option.
						The generated files can be very large even without inlining.
						This option splits the main output file into a number of
						components containing about &num.arg; lines each
						(the default being 50000).
						These components are distinguished by successively
						substituting 1, 2, 3, ... for the character
						<literal>@</literal> in the output file name.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>numeric-ids</option></term>
				<term><option>numeric</option></term>
				<term><option>no-numeric-ids</option></term>
				<term><option>no-numeric</option></term>

				<listitem>
					<para>These enable or disable the use of numeric identifiers.
						Numeric identifiers replace the identifier name with a
						number, which is mainly of use in stopping identifier names
						getting too long.
						The disadvantage is that the code becomes less readable, and
						more difficult to debug.
						Numeric identifiers are not used by default and are never
						used for terminal numbers.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>casts</option></term>
				<term><option>cast</option></term>
				<term><option>no-casts</option></term>
				<term><option>no-cast</option></term>

				<listitem>
					<para>These enable or disable casting of action
						and assignment operator immutable parameters.
						If enabled, a parameter is cast to its own type
						when it is substituted into the action.	This
						will cause some compilers to complain about
						attempts to modify the parameter (which can help pick
						out attempts at mutating parameters that should
						not be mutated).	The disadvantage is that not
						all compilers will reject attempts at mutation,
						and that &ansi; doesn't allow casting to
						structure and union types, which
						means that some code may be illegal.
						Parameter casting is disabled by default.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>unreachable-macros</option></term>
				<term><option>unreachable-macro</option></term>
				<term><option>unreachable-comments</option></term>
				<term><option>unreachable-comment</option></term>

				<listitem>
					<para>These choose whether unreachable code is marked by
						a macro or a comment.  The default is to mark
						unreachable code with a comment, <code>/* UNREACHED */</code>,
						however a macro <code>UNREACHED;</code> may be used
						instead, if desired.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>lines</option></term>
				<term><option>line</option></term>
				<term><option>no-lines</option></term>
				<term><option>no-line</option></term>

				<listitem>
					<para>These determine whether <code>#line</code>
						directives should be output to relate the
						output file to the actions file.
						These are generated by default.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&lexi;, &lex;, &flex;, &yacc;, &bison;.</para>

		<para>&sid-userguide.doc;.</para>
	</refsection>
</refentry>

