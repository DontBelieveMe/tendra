
/*
 * Automatically generated by lexi version 2.0
 */

#ifndef LEXI_GENERATED_HEADER_c_lexi__INCLUDED
#define LEXI_GENERATED_HEADER_c_lexi__INCLUDED


#include <stdbool.h>

/*
 * This struct holds state for the lexer; its representation is
 * private, but present here for ease of allocation.
 */
struct c_lexi_state {
	int (*zone_function)(struct c_lexi_state *);

	/*
	 * Lexi's buffer is a simple stack. The size is calculated as
	 * max(mapping) - 1 + max(token) - 1
	 */
	int buffer[3 - 1];
	int buffer_index;
};

#ifndef LEXI_EOF
#define LEXI_EOF 256
#endif

/* Push a character to lexi's buffer */
extern void c_lexi_push(struct c_lexi_state *state, const int c);

/* Pop a character from lexi's buffer */
extern int c_lexi_pop(struct c_lexi_state *state);

/* Flush lexi's buffer */
extern void c_lexi_flush(struct c_lexi_state *state);

/* Read a character */
extern int c_lexi_readchar(struct c_lexi_state *state);

enum c_lexi_groups {
	c_lexi_group_identstart = 0x0001,
	c_lexi_group_identbody = 0x0002,
	c_lexi_group_bracketed_comment_white = 0x0004,
	c_lexi_group_singleline_comment_white = 0x0008,
	c_lexi_group_builtinstart = 0x0010,
	c_lexi_group_builtinbody = 0x0020,
	c_lexi_group_builtindlmt = 0x0040,
	c_lexi_group_act_identbody = 0x0080,
	c_lexi_group_act_white = 0x0100,
	c_lexi_group_white = 0x0200
};

/* true if the given character is present in the given group */
extern bool c_lexi_group(enum c_lexi_groups group, int c);

/* Identify a keyword */
extern int c_lexi_keyword(const char *identifier, int notfound);

/* Identify a token */
extern int c_lexi_read_token(struct c_lexi_state *state);

/* Initialise a c_lexi_state structure */
void c_lexi_init(struct c_lexi_state *state);

#endif


