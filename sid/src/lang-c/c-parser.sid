/* $Id$ */

/*
 * Copyright 2008-2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */

/*
 * C Information file grammar.
 */



%types%

	StringT;
	CCodeP;
	bool;
	pos;

%terminals%

	BLT-PREFIXES;       // %prefixed%
	BLT-MAPS;           // %maps%
	BLT-PERSISTENTS;    // %persistents%
	BLT-ASSIGNMENTS;    // %assignments%
	BLT-TERMINALS;      // %terminals%
	BLT-HEADER;         // %header%
	BLT-ACTIONS;        // %actions%
	BLT-TRAILER;        // %trailer%
	BLT-RESULT-ASSIGN;  // %result-assignments%
	SID-IDENTIFIER: () -> (:StringT);
	C-IDENTIFIER: () -> (:StringT);
	SEPARATOR;          // ,
	TYPEMARK;           // :
	TERMINATOR;         // ;
	BEGIN-ACTION;       // <
	DEFINE;             // =
	END-ACTION;         // >
	!CODE: () -> (:CCodeP); // @{ ... @}
	ARROW;              // ->
	OPEN-TUPLE;         // (
	CLOSE-TUPLE;        // )
	BLT-PARAM-ASSIGN;   // %parameter-assignments%
	REFERENCE;          // &

	ACT-AT;             // @@
	ACT-EXCEPTION;      // @!
	ACT-TERMINAL;       // @.
	ACT-ADVANCE;        // @>
	ACT-BASIC:      () -> (:StringT); // @:[A-ZA-Z][A-ZA-Z0-9]*
	ACT-LABEL:      () -> (:StringT); // @:[A-ZA-Z][A-ZA-Z0-9]*
	ACT-REFERENCE:  () -> (:StringT); // @&[A-ZA-Z][A-ZA-Z0-9]*
	ACT-IDENTIFIER: () -> (:StringT); // @[A-ZA-Z][A-ZA-Z0-9]*
	ACT-MODIFIABLE: () -> (:StringT); // @=[A-ZA-Z][A-ZA-Z0-9]*
	ACT-CODESTRING: () -> (:StringT); // [^@]*
	ACT-EOF;            //
	ACT-CODESTART:  () -> (:pos);     // @{
	ACT-CODEEND;        // @}

	EOF;
	!ERROR;

%productions%

	<set-prefix>: (:StringT &) -> ();
	<x-set-prefix>: (:StringT &) -> ();
	<set-persistent>: (:StringT &, :StringT &) -> () ;
	<empty-string>: () -> (:StringT) ;
	<set-map>: (:StringT &) -> ();
	<x-set-map>: (:StringT &) -> ();
	<init-tuple>;
	<tuple-type>: (:StringT &, :StringT &) -> ();
	<tuple-ref-type>: (:StringT &, :StringT &) -> ();
	<tuple-name>: (:StringT &) -> ();
	<save-tuple>;
	<null-type>;
	<assign>: (:StringT &) -> ();
	<x-assign>: (:CCodeP) -> ();
	<passign>: (:StringT &) -> ();
	<x-passign>: (:CCodeP) -> ();
	<rassign>: (:StringT &) -> ();
	<x-rassign>: (:CCodeP) -> ();
	<set-terminal>: (:StringT &) -> ();
	<x-set-terminal>: (:CCodeP) -> ();
	<set-action>: (:StringT &) -> ();
	<x-set-action>: (:CCodeP) -> ();
	<set-header1>: (:CCodeP) -> ();
	<set-header2>: (:CCodeP) -> ();
	<set-trailer1>: (:CCodeP) -> ();
	<set-trailer2>: (:CCodeP) -> ();

	<ccode-init>: (:pos) -> (:CCodeP) ;
	<append-ccode-at>: (:CCodeP) -> () ;
	<append-ccode-exception>: (:CCodeP) -> () ;
	<append-ccode-terminal>: (:CCodeP) -> () ;
	<append-ccode-advance>: (:CCodeP) -> () ;
	<append-ccode-basic>: (:CCodeP, :StringT &) -> () ;
	<append-ccode-label>: (:CCodeP, :StringT &) -> () ;
	<append-ccode-reference>: (:CCodeP, :StringT &) -> () ;
	<append-ccode-identifier>: (:CCodeP, :StringT &) -> () ;
	<append-ccode-modifiable>: (:CCodeP, :StringT &) -> () ;
	<append-ccode-codestring>: (:CCodeP, :StringT &) -> () ;
	<E-eof-in-code-block>;

	<unhandled-syntax-error>;

	<expected-identifier>;
	<expected-c-identifier>;
	<expected-separator>;
	<expected-open-tuple>;
	<expected-close-tuple>;
	<expected-arrow>;
	<expected-terminator>;
	<expected-end-action>;
	<expected-define>;
	<expected-code>;
	<expected-blt-header>;
	<expected-blt-terminals>;
	<expected-blt-actions>;
	<expected-blt-trailer>;
	<expected-eof>;

	<destroy-string>: (:StringT &) -> ();

	<skip-to-end-of-tuple-defn>;
	<skip-to-end-of-prefix>;
	<skip-to-end-of-map>;
	<skip-to-end-of-assignment>;
	<skip-to-end-of-result-assign>;
	<skip-to-end-of-param-assign>;
	<skip-to-end-of-terminal>;
	<skip-to-end-of-action>;
	<skip-recover>;

	<is-close-tuple-or-skipped-or-eof>: () -> (:bool);

	c-parse-grammar [
		/*
		 * Identifiers
		 */

		identifier: () -> (id :StringT) = {
			id = SID-IDENTIFIER;
		||
			id = C-IDENTIFIER;
		};

		code-block: () -> (c :CCodeP) [
			code-body-single: (c :CCodeP) -> () = {
				ACT-AT;
				<append-ccode-at>(c) ;
			||
				ACT-EXCEPTION;
				<append-ccode-exception>(c) ;
			||
				ACT-TERMINAL;
				<append-ccode-terminal>(c) ;
			||
				ACT-ADVANCE;
				<append-ccode-advance>(c) ;
			||
				i = ACT-BASIC;
				<append-ccode-basic>(c, &i) ;
			||
				i = ACT-LABEL;
				<append-ccode-label>(c, &i) ;
			||
				i = ACT-REFERENCE;
				<append-ccode-reference>(c, &i) ;
			||
				i = ACT-IDENTIFIER;
				<append-ccode-identifier>(c, &i) ;
			||
				i = ACT-MODIFIABLE;
				<append-ccode-modifiable>(c, &i) ;
			||
				s = ACT-CODESTRING;
				<append-ccode-codestring>(c, &s) ;
			||
				ACT-EOF;
				<E-eof-in-code-block>;
			};

			code-body: (c :CCodeP) -> () = {
				$;
			||
				code-body-single(c);
				code-body(c);
			};
		] = {
			p = ACT-CODESTART;
			c = <ccode-init>(p);
			code-body(c);
			ACT-CODEEND ;
		};


		/*
		 * Prefix definitions
		 */

		prefix-list [
			prefix = {
				prefix = identifier;
				<set-prefix>(&prefix);

				{
					DEFINE;
				##
					<expected-define>;
				};

				{
					name = C-IDENTIFIER;
					<x-set-prefix>(&name);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-c-identifier>;
					<skip-to-end-of-prefix>;
				};
			};
		] = {
			$;
		||
			prefix;
			<skip-recover>;
			prefix-list;
		};


		/*
		 * Identifier mapping
		 */

		map-list [
			map = {
				from = identifier;
				<set-map>(&from);

				{
					ARROW;
				##
					<expected-arrow>;
				};

				{
					to = C-IDENTIFIER;
					<x-set-map>(&to);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-c-identifier>;
					<skip-to-end-of-map>;
				};
			};
		] = {
			$;
		||
			map;
			<skip-recover>;
			map-list;
		};

		persistent-list [
			persistent = {
				{
					name = C-IDENTIFIER;
				##
					name = <empty-string>;
					<expected-c-identifier>;
				};

				TYPEMARK;

				{
					type = C-IDENTIFIER;
				##
					type = <empty-string>;
					<expected-identifier>;
				};

				<set-persistent>(&name, &type);
				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			};
		] = {
			$;
		||
			persistent;
			persistent-list;
		};


		/*
		 * Function type specifications
		 */

		function-type-defn [
			tuple-defn = {
				name = C-IDENTIFIER;

				{
					TYPEMARK;

					{
						type = identifier;

						{
							REFERENCE;
							<tuple-ref-type>(&name, &type);
						||
							<tuple-type>(&name, &type);
						};
					##
						<expected-identifier>;
						<destroy-string>(&name);
						<skip-to-end-of-tuple-defn>;
					};
				||
					<tuple-name>(&name);
				};
			##
				<expected-identifier>;
				<skip-to-end-of-tuple-defn>;
			};

			tuple-defn-list-1 = {
				tuple-defn;

				{
					? = <is-close-tuple-or-skipped-or-eof>;
				||
					SEPARATOR;
					tuple-defn-list-1;
				##
					<expected-separator>;
					tuple-defn-list-1;
				};
			};

			tuple-defn-list = {
				$;
			||
				tuple-defn-list-1;
			};

			type-tuple-defn = {
				<init-tuple>;

				{
					OPEN-TUPLE;
				##
					<expected-open-tuple>;
				};

				tuple-defn-list;
				<skip-recover>;

				{
					CLOSE-TUPLE;
				##
					<expected-close-tuple>;
				};
			};
		] = {
			TYPEMARK;
			type-tuple-defn;
			<save-tuple>;

			{
				ARROW;
			##
				<expected-arrow>;
			};

			type-tuple-defn;
		||
			<null-type>;
		};


		/*
		 * Assignment definitions
		 */

		assignment-list [
			assignment = {
				id = identifier;
				<assign>(&id);
				function-type-defn;

				{
					DEFINE;
				##
					<expected-define>;
				};

				{
					body = code-block;
					<x-assign>(body);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-code>;
					<skip-to-end-of-assignment>;
				};
			};
		] = {
			$;
		||
			assignment;
			<skip-recover>;
			assignment-list;
		};

		param-assign-list [
			param-assign = {
				id = identifier;
				<passign>(&id);
				function-type-defn;

				{
					DEFINE;
				##
					<expected-define>;
				};

				{
					body = code-block;
					<x-passign>(body);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-code>;
					<skip-to-end-of-param-assign>;
				};
			};
		] = {
			$;
		||
			param-assign;
			<skip-recover>;
			param-assign-list;
		};

		result-assign-list [
			result-assign = {
				id = identifier;
				<rassign>(&id);
				function-type-defn;

				{
					DEFINE;
				##
					<expected-define>;
				};

				{
					body = code-block;
					<x-rassign>(body);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-code>;
					<skip-to-end-of-result-assign>;
				};
			};
		] = {
			$;
		||
			result-assign;
			<skip-recover>;
			result-assign-list;
		};


		/*
		 * Terminal result extraction definitions
		 */

		terminal-list [
			terminal = {
				id = identifier;
				<set-terminal>(&id);
				function-type-defn;

				{
					DEFINE;
				##
					<expected-define>;
				};

				{
					body = code-block;
					<x-set-terminal>(body);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-code>;
					<skip-to-end-of-terminal>;
				};
			};
		] = {
			$;
		||
			terminal;
			<skip-recover>;
			terminal-list;
		};


		/*
		 * Action definitions
		 */

		action-list [
			action = {
				BEGIN-ACTION;

				{
					id = identifier;
					<set-action>(&id);

					{
						END-ACTION;
					##
						<expected-end-action>;
					};

					function-type-defn;

					{
						DEFINE;
					##
						<expected-define>;
					};

					{
						body = code-block;
						<x-set-action>(body);

						{
							TERMINATOR;
						##
							<expected-terminator>;
						};
					##
						<expected-code>;
						<skip-to-end-of-action>;
					};
				##
					<expected-identifier>;
					<skip-to-end-of-action>;
				};
			};
		] = {
			$;
		||
			action;
			<skip-recover>;
			action-list;
		};
	] /* c-parse-grammar */ = {
		{
			BLT-PREFIXES;
			prefix-list;
		||
			$;
		};

		{
			BLT-PERSISTENTS;
			persistent-list;
		||
			$;
		};

		{
			BLT-MAPS;
			map-list;
		||
			$;
		};

		{
			BLT-HEADER;
		##
			<expected-blt-header>;
		};

		{
			h1 = code-block;
			<set-header1>(h1);
		##
			<expected-code>;
		};

		{
			SEPARATOR;
		##
			<expected-separator>;
		};

		{
			h2 = code-block;
			<set-header2>(h2);
		##
			<expected-code>;
		};

		{
			TERMINATOR;
		##
			<expected-terminator>;
		};

		{
			BLT-ASSIGNMENTS;
			assignment-list;
		||
			$;
		};

		{
			BLT-PARAM-ASSIGN;
			param-assign-list;
		||
			$;
		};

		{
			BLT-RESULT-ASSIGN;
			result-assign-list;
		||
			$;
		};

		{
			BLT-TERMINALS;
		##
			<expected-blt-terminals>;
		};

		terminal-list;

		{
			BLT-ACTIONS;
		##
			<expected-blt-actions>;
		};

		action-list;

		{
			BLT-TRAILER;
		##
			<expected-blt-trailer>;
		};

		{
			t1 = code-block;
			<set-trailer1>(t1);
		##
			<expected-code>;
		};

		{
			SEPARATOR;
		##
			<expected-separator>;
		};

		{
			t2 = code-block;
			<set-trailer2>(t2);
		##
			<expected-code>;
		};

		{
			TERMINATOR;
		##
			<expected-terminator>;
		};

		{
			EOF;
		##
			<expected-eof>;
		};
	##
		<unhandled-syntax-error>;
	};

%entry% c-parse-grammar;
