/*
 * Copyright 2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

/*
 * The lexical analyser for Sid's C actions parser.
 */

ACTION <eof_in_comment>;

ACTION <read_builtin> : (:CHARACTER) -> (:TERMINAL);
ACTION <support_read_id_global> : (:CHARACTER, :TERMINAL) -> (:TERMINAL);
ACTION <support_read_id_act> : (:CHARACTER, :TERMINAL) -> (:TERMINAL);
ACTION <act_read_string> : (:CHARACTER) -> (:TERMINAL);
ACTION <unknown_token> : (:CHARACTER) -> (:TERMINAL);

TOKEN "\e" -> $EOF;

TOKEN ":" -> $TYPEMARK;
TOKEN "=" -> $DEFINE;
TOKEN "," -> $SEPARATOR;
TOKEN "&" -> $REFERENCE;
TOKEN ";" -> $TERMINATOR;

TOKEN "<" -> $BEGIN-ACTION;
TOKEN ">" -> $END-ACTION;

TOKEN "(" -> $OPEN-TUPLE;
TOKEN ")" -> $CLOSE-TUPLE;

TOKEN "->" -> $ARROW;

/* XXX I think '-' can be in identstart, too */
GROUP identstart = {a-z} + {A-Z} + "_";
GROUP identbody = "[identstart]" + {0-9} + "-";
TOKEN "[identstart]" -> $ = <support_read_id_global>(#0, $C-IDENTIFIER);

ZONE bracketed_comment: "/*" ... "*/" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> <eof_in_comment>;
}

/* TODO anonoymous zones would be nice: ZONE "//" ... "\n" { */

ZONE singleline_comment: "//" ... "\n" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> <eof_in_comment>;
}


/* TODO maybe use keywords for this, when lexi's API settles */
GROUP builtinstart = {a-z};
GROUP builtinbody = "[builtinstart]-";
GROUP builtindlmt = "%";
TOKEN "[builtindlmt][builtinstart]" -> $ = <read_builtin>(#1);


/* TODO split at_* functions into separate file */

/* Used by c_lexer_act_read_identifier() */
GROUP act_identbody = "[identstart]" + {0-9};

ZONE act:	"@{" -> $ACT-CODESTART	/* XXX to remove when merged into the grammar */
	...		"@}" -> $ACT-CODEEND {

	GROUP white ="";
	TOKEN DEFAULT -> $ = <act_read_string>(#0);
	TOKEN "\e" -> $ACT-EOF;	/* XXX to remove when merged into the grammar */

	TOKEN "@@" -> $ACT-AT;
	TOKEN "@!" -> $ACT-EXCEPTION;
	TOKEN "@." -> $ACT-TERMINAL;
	TOKEN "@>" -> $ACT-ADVANCE;

	/* TODO these would be nicer once we have "a" * "b" */
	TOKEN "@:[identstart]" -> $ = <support_read_id_act>(#2,$ACT-LABEL);
	TOKEN "@&[identstart]" -> $ = <support_read_id_act>(#2,$ACT-REFERENCE);
	TOKEN "@=[identstart]" -> $ = <support_read_id_act>(#2,$ACT-MODIFIABLE);
	TOKEN "@$[identstart]" -> $ = <support_read_id_global>(#2,$ACT-BASIC);

	/* TODO c_lexer_read_code_id(): code identifier? */
	TOKEN "@[identstart]" -> $ = <support_read_id_act>(#1,$ACT-IDENTIFIER);
}

TOKEN DEFAULT -> $ = <unknown_token>(#0);

