/*
 * The lexical analyser for Sid's C actions parser.
 * $Id$
 */

/* -p C_TOK_ */

TOKEN "\e" -> $EOF;

TOKEN ":" -> $TYPEMARK;
TOKEN "=" -> $DEFINE;
TOKEN "," -> $SEPARATOR;
TOKEN "&" -> $REFERENCE;
TOKEN ";" -> $TERMINATOR;

TOKEN "<" -> $BEGIN-ACTION;
TOKEN ">" -> $END-ACTION;

TOKEN "(" -> $OPEN-TUPLE;
TOKEN ")" -> $CLOSE-TUPLE;

TOKEN "->" -> $ARROW;

/* XXX I think '-' can be in identstart, too */
GROUP identstart = {a-z} + {A-Z} + "_";
GROUP identbody = "[identstart]" + {0-9} + "-";
TOKEN "[identstart]" -> c_lexer_read_identifier();

ZONE bracketed_comment: "/*" ... "*/" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> E_c_eof_in_comment("&(c_lexer_stream->istream)"), $$;
}

/* TODO anonoymous zones would be nice: ZONE "//" ... "\n" { */

ZONE singleline_comment: "//" ... "\n" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> E_c_eof_in_comment("&(c_lexer_stream->istream)"), $$;
}


/* TODO maybe use keywords for this, when lexi's API settles */
GROUP builtinstart = {a-z};
GROUP builtinbody = "[builtinstart]-";
GROUP builtindlmt = "%";
TOKEN "[builtindlmt][builtinstart]" -> c_lexer_read_builtin();


/* TODO split at_* functions into separate file */

/* Used by c_lexer_act_read_identifier() */
GROUP act_identbody = "[identstart]" + {0-9};

ZONE act:	"@{" -> $ACT-CODESTART	/* XXX to remove when merged into the grammar */
	...		"@}" -> $ACT-CODEEND {

	GROUP white ="";
	TOKEN DEFAULT -> c_lexer_act_read_string();
	TOKEN "\e" -> $ACT-EOF;	/* XXX to remove when merged into the grammar */

	TOKEN "@@" -> $ACT-AT;
	TOKEN "@!" -> $ACT-EXCEPTION;
	TOKEN "@." -> $ACT-TERMINAL;
	TOKEN "@>" -> $ACT-ADVANCE;

	/* TODO these would be nicer once we have "a" * "b" */
	TOKEN "@:[identstart]" -> c_lexer_act_read_label();
	TOKEN "@&[identstart]" -> c_lexer_act_read_reference();
	TOKEN "@=[identstart]" -> c_lexer_act_read_modifiable();

	/* TODO c_lexer_read_code_id(): code identifier? */
	TOKEN "@[identstart]" -> c_lexer_act_read_identifier();
}

TOKEN DEFAULT -> c_lexer_unknown_token();
