/*
 * C Information file parser actions.
 */

/*
 * Copyright (c) 2008 The TenDRA Project <http://www.tendra.org/>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of The TenDRA Project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific, prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 */

%prefixes%

	terminal = C_TOK_;

%maps%

	StringT -> NStringT;
	CCodeP -> CCodeP;
	BoolT -> BoolT;
	c-parse-grammar -> c_parse_grammar;

%header% @{

	/*
	 * Copyright (c) 2002-2005 The TenDRA Project <http://www.tendra.org/>.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 *    this list of conditions and the following disclaimer.
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 *    this list of conditions and the following disclaimer in the documentation
	 *    and/or other materials provided with the distribution.
	 * 3. Neither the name of The TenDRA Project nor the names of its contributors
	 *    may be used to endorse or promote products derived from this software
	 *    without specific, prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
	 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
	 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
	 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	 * EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
	 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
	 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
	 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *
	 * $Id$
	 */
	/*
				 Crown Copyright (c) 1997

		This TenDRA(r) Computer Program is subject to Copyright
		owned by the United Kingdom Secretary of State for Defence
		acting through the Defence Evaluation and Research Agency
		(DERA).  It is made available to Recipients with a
		royalty-free licence for its use, reproduction, transfer
		to other parties and amendment for any purpose not excluding
		product development provided that any such use et cetera
		shall be deemed to be acceptance of the following conditions:-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
	*/

	#include <assert.h>

	#include "../shared/check/check.h"
	#include "../shared/error/error.h"
	#include "c-parser.h"
	#include "../adt/action.h"
	#include "c-code.h"
	#include "c-out-info.h"
	#include "../adt/basic.h"
	#include "../adt/entry.h"
	#include "../adt/type.h"
	#include "../adt/types.h"

	#define ERROR_TERMINAL @$ERROR
	#define CURRENT_TERMINAL c_lexer_get_terminal (c_current_stream)
	#define ADVANCE_LEXER c_lexer_next_token (c_current_stream)
	#define SAVE_LEXER(x) (c_lexer_save_terminal (c_current_stream, (CTokenT) (x)))
	#define RESTORE_LEXER (c_lexer_restore_terminal (c_current_stream))

	/* typedefs for the maps section */
	typedef CCodeT *CCodeP;

	static NStringT    c_prefix_names [CPFX_NUM_PREFIXES];
	static BoolT       c_inited_prefix_names = FALSE;
	static CPrefixT    c_current_prefix;
	static EntryT     *c_current_entry;
	static TypeTupleT  c_saved_type;
	static TypeTupleT  c_current_type;
	static BoolT       c_propagating_error = FALSE;

	CLexerStreamT *c_current_stream;
	COutputInfoT  *c_current_out_info;
	TableT        *c_current_table;


	static void err_expected(const char *item) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"expected %s", item);
	}

	static void err_unknown(const char *item, NStringT *name) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"unknown %s '%S'", item, (void *) name);
	}

	static void err_mult(const char *verb, const char *item, NStringT *name) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"multiple %s operations defined for %s '%S'", verb, item, (void *) name);
	}

	static void err_formal_clash(const char *verb, const char *item, KeyT *key, TypeTupleT *a, TypeTupleT *b) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s operation formal clash for %s '%K' [parameter = %Y, result = %Y]",
			verb, item, (void *) key, (void *) a, (void *) b);

	}

	static void err_clash(const char *verb, const char *field, const char *item, KeyT *key, TypeTupleT *a) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s operation %s clash (or missing name) for %s '%K' [%s = %Y]",
			verb, field, item, (void *) key, field, (void *) a);
	}

	static void err_field_clash(const char *field, const char *item, KeyT *key, TypeTupleT *a) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s clash (or missing name) for %s '%K' [%s = %Y]",
			field, item, (void *) key, field, (void *) a);
	}

	static void err_mismatch(const char *field, const char *verb, const char *item, KeyT *key, TypeTupleT *a, TypeTupleT *b) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s type mismatch for %s operation on %s '%K' [%Y should be %Y]",
			field, verb, item, (void *) key, (void *) a, (void *) b);
	}

	static void err_field_mismatch(const char *field, KeyT *key, TypeTupleT *a, TypeTupleT *b) {
		error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s type mismatch for action '%K' [%Y should be %Y]",
			field, (void *) key, (void *) a, (void *) b);
	}

@}, @{

	/*
				 Crown Copyright (c) 1997

		This TenDRA(r) Computer Program is subject to Copyright
		owned by the United Kingdom Secretary of State for Defence
		acting through the Defence Evaluation and Research Agency
		(DERA).  It is made available to Recipients with a
		royalty-free licence for its use, reproduction, transfer
		to other parties and amendment for any purpose not excluding
		product development provided that any such use et cetera
		shall be deemed to be acceptance of the following conditions:-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
	*/

@};

%assignments%

	StringT: (a) -> (b) = @{
		nstring_assign (&@b, @&a);
	@};

%parameter-assignments%

	StringT: (a) -> (b) = @{
		nstring_assign(&@b, @a);
	@};

%result-assignments%

	StringT: (a) -> (b) = @{
		nstring_assign(@b, @&a);
	@};

%terminals%

	C-IDENTIFIER: () -> (i) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	SID-IDENTIFIER: () -> (i) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	CODE: () -> (c) = @{
		@c = c_lexer_code_value(c_current_stream);
	@};

	ACT-BASIC: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-LABEL: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-REFERENCE: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-IDENTIFIER: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-MODIFIABLE: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-CODESTRING: () -> (s :StringT) = @{
		nstring_assign(&@s, c_lexer_string_value(c_current_stream));
	@};

%actions%

	/*
	 * Prefix section actions
	 */

	<set-prefix>: (string) -> () = @{
		int prefix;

		if (!c_inited_prefix_names) {
			nstring_copy_cstring(&c_prefix_names[CPFX_TYPE], "type");
			nstring_copy_cstring(&c_prefix_names[CPFX_FN], "function");
			nstring_copy_cstring(&c_prefix_names[CPFX_IN], "input");
			nstring_copy_cstring(&c_prefix_names[CPFX_OUT], "output");
			nstring_copy_cstring(&c_prefix_names[CPFX_LABEL], "label");
			nstring_copy_cstring(&c_prefix_names[CPFX_TERMINAL], "terminal");
			nstring_copy_cstring(&c_prefix_names[CPFX_PERSISTENTS], "persistents");
			c_inited_prefix_names = TRUE;
		}

		for (prefix = 0; prefix < CPFX_NUM_PREFIXES; prefix++) {
			if (nstring_ci_equal(@&string, &c_prefix_names[prefix])) {
				break;
			}
		}

		c_current_prefix = (CPrefixT) prefix;
		if (c_current_prefix == CPFX_NUM_PREFIXES) {
			err_unknown("prefix type", @&string);
		}
		nstring_destroy(&@=string);
	@};

	<x-set-prefix>: (string) -> () = @{
		if (c_current_prefix == CPFX_NUM_PREFIXES) {
			nstring_destroy(&@=string);
		} else {
			NStringT *prefix = c_out_info_prefix(c_current_out_info, c_current_prefix);

			nstring_destroy(prefix);
			nstring_assign(prefix, &@=string);
		}
	@};

	<set-persistent>: (name :StringT &, type :StringT &) -> () = @{
		if(persistent_list_find(c_out_info_persistents(c_current_out_info), @&name) == NULL) {
			PersistentT *p;

			p = persistent_create(&@=name, &@=type);
			persistent_list_append(c_out_info_persistents(c_current_out_info), p);
		} else {
			nstring_destroy(&@=name);
			nstring_destroy(&@=type);
			/* TODO error out E_c_persistent_variable_name_conflict(@&name)) ;*/
		}
	@};

	<empty-string>: () -> (i :StringT) = @{
		nstring_init(&@i);
	@};


	/*
	 * Mapping section actions
	 */

	<set-map>: (string) -> () = @{
		c_current_entry = table_get_entry(c_current_table, @&string);
		if (c_current_entry == NULL) {
			err_unknown("identifier", @&string);
		} else if (entry_get_mapping(c_current_entry)) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"attempt to remap identifier '%S'", (void *) @&string);
			c_current_entry = NULL;
		} else {
			switch (entry_type(c_current_entry)) EXHAUSTIVE {
			case ET_NAME:
			case ET_ACTION:
			case ET_NON_LOCAL:
				error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
					"cannot map identifier '%S' [it must be a rule, a basic or a type]", (void *) @&string);
				c_current_entry = NULL;
				break;
			case ET_RENAME:
			case ET_PREDICATE:
				/* UNREACHED */
				break;
			case ET_TYPE:
			case ET_RULE:
			case ET_BASIC:
				break;
			}
		}
		nstring_destroy(&@=string);
	@};

	<x-set-map>: (string) -> () = @{
		if (c_current_entry) {
			entry_set_mapping(c_current_entry, &@=string);
		} else {
			nstring_destroy(&@=string);
		}
	@};


	/*
	 * Header actions
	 */

	<set-header1>: (code) -> () = @{
		c_code_check(@code, FALSE, FALSE, NULL, NULL, c_current_table);
		c_out_info_set_header1(c_current_out_info, @code);
	@};

	<set-header2>: (code) -> () = @{
		c_code_check(@code, FALSE, FALSE, NULL, NULL, c_current_table);
		c_out_info_set_header2(c_current_out_info, @code);
	@};


	/*
	 * Argument list actions
	 */

	<save-tuple> = @{
		types_assign(&c_saved_type, &c_current_type);
	@};

	<null-type> = @{
		types_init(&c_saved_type);
		types_init(&c_current_type);
	@};

	<init-tuple> = @{
		types_init(&c_current_type);
	@};

	<tuple-type>: (name, type) -> () = @{
		if (!types_add_typed_name(&c_current_type, c_current_table, &@=name,
			@&type, FALSE)) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"type '%S' hasn't been declared", (void *) @&type);
		}
		nstring_destroy(&@=type);
	@};

	<tuple-ref-type>: (name, type) -> () = @{
		if (!types_add_typed_name(&c_current_type, c_current_table, &@=name,
			@&type, TRUE)) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"type '%S' hasn't been declared", (void *) @&type);
		}
		nstring_destroy(&@=type);
	@};

	<tuple-name>: (string) -> () = @{
		types_add_name(&c_current_type, c_current_table, &@=string, FALSE);
	@};


	/*
	 * Type assignment actions
	 */

	<assign>: (string) -> () = @{
		c_current_entry = table_get_type(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"assignment operation defined for unknown type '%S'", (void *) @&string);
		} else if (type_get_assign_code(entry_get_type(c_current_entry))) {
			err_mult("assignment", "type", @&string);
			c_current_entry = NULL;
		}
		nstring_destroy(&@=string);
	@};

	<x-assign>: (code) -> () = @{
		if (c_current_entry) {
			BoolT  errored = FALSE;
			KeyT  *key     = entry_key (c_current_entry);
			TypeTupleT tmp;

			types_init(&tmp);
			types_add_type_entry(&tmp, c_current_entry, FALSE);

			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("assignment", "parameter", "type", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types (&c_saved_type, &tmp)) {
				err_mismatch("parameter", "assignment", "type", key, &tmp, &c_saved_type);
				errored = TRUE;
			}

			if (!types_disjoint_names (&c_current_type)) {
				err_clash("assignment", "result", "type", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types (&c_current_type, &tmp)) {
				err_mismatch("result", "assignment", "type", key, &tmp, &c_saved_type);
				errored = TRUE;
			}

			if (types_intersect (&c_saved_type, &c_current_type)) {
				err_formal_clash("assignment", "type", key, &c_saved_type, &c_current_type);
				errored = TRUE;
			}

			types_destroy(&tmp);
			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
			TypeT *type;

				type = entry_get_type (c_current_entry);
				c_code_check(@code, FALSE, FALSE, &c_saved_type, &c_current_type, c_current_table);
				type_set_assign_code(type,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};

	<passign>: (string) -> () = @{
		c_current_entry = table_get_type(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"parameter assignment operation defined for unknown type '%S'", (void *) @&string);
		} else if (type_get_param_assign_code(entry_get_type(c_current_entry))) {
			err_mult("parameter assignment", "type", @&string);
			c_current_entry = NULL;
		}
		nstring_destroy(&@=string);
	@};

	<x-passign>: (code) -> () = @{
		if (c_current_entry) {
			BoolT  errored = FALSE;
			KeyT  *key     = entry_key(c_current_entry);
			TypeTupleT tmp;

			types_init(&tmp);
			types_add_type_entry(&tmp, c_current_entry, FALSE);
			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("parameter assignment", "parameter", "type", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_saved_type, &tmp)) {
				err_mismatch("parameter", "parameter assignment", "type", key, &c_saved_type, &tmp);
				errored = TRUE;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_clash("parameter assignment", "result", "type", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_current_type, &tmp)) {
				err_mismatch("result type", "parameter assignment", "type", key, &c_saved_type, &tmp);
				errored = TRUE;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				err_formal_clash("parameter assignment", "type", key, &c_saved_type, &c_current_type);
				errored = TRUE;
			}

			types_destroy(&tmp);
			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				TypeT *type = entry_get_type(c_current_entry);

				c_code_check(@code, FALSE, TRUE, &c_saved_type,
					&c_current_type, c_current_table);
				type_set_param_assign_code(type,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};

	<rassign>: (string) -> () = @{
		c_current_entry = table_get_type(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"result assignment operation defined for unknown type '%S'", (void *) @&string);
		} else if (type_get_result_assign_code(entry_get_type(c_current_entry))) {
			err_mult("result assignment", "type", @&string);
			c_current_entry = NULL;
		}
		nstring_destroy(&@=string);
	@};

	<x-rassign>: (code) -> () = @{
		if (c_current_entry) {
			BoolT  errored = FALSE;
			KeyT  *key     = entry_key (c_current_entry);
			TypeTupleT tmp;

			types_init (&tmp);
			types_add_type_entry (&tmp, c_current_entry, FALSE);
			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("result essignment", "parameter", "type", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_saved_type, &tmp)) {
				err_mismatch("parameter", "result assignment", "type", key, &c_saved_type, &tmp);
				errored = TRUE;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_clash("result assignment", "result", "type", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_current_type, &tmp)) {
				err_mismatch("result", "result assignment", "type", key, &c_saved_type, &tmp);
				errored = TRUE;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				err_formal_clash("result assignment", "type", key, &c_saved_type, &c_current_type);
				errored = TRUE;
			}

			types_destroy (&tmp);
			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				TypeT *type = entry_get_type(c_current_entry);

				c_code_check(@code, FALSE, FALSE, &c_saved_type,
					&c_current_type, c_current_table);
				type_set_result_assign_code (type,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};


	/*
	 * Terminal result extraction actions
	 */

	<set-terminal>: (string) -> () = @{
		c_current_entry = table_get_basic(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"extraction operation defined for unknown terminal '%S'", (void *) @&string);
		} else {
			BasicT * basic = entry_get_basic(c_current_entry);

			if (basic_get_result_code(basic)) {
				err_mult("extraction", "terminal", @&string);
				c_current_entry = NULL;
			} else if (types_equal_zero_tuple(basic_result (basic))) {
				error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
					"extraction operation defined for terminal '%S' that returns nothing", (void *) @&string);
				c_current_entry = NULL;
			}
		}
		nstring_destroy(&@=string);
	@};

	/* TODO suspiciously repetitive */
	<x-set-terminal>: (code) -> () = @{
		if (c_current_entry) {
			BasicT     *basic   = entry_get_basic(c_current_entry);
			TypeTupleT *result  = basic_result(basic);
			BoolT       errored = FALSE;
			KeyT       *key     = entry_key(c_current_entry);

			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("extraction", "parameter", "terminal", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_equal_zero_tuple(&c_saved_type)) {
				error_posn(ERROR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
					"parameter type mismatch for extraction operation on "
					"terminal '%K' [%Y should be ()]",
					(void *) key, (void *) &c_saved_type);
				errored = TRUE;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_clash("extraction", "result", "terminal", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_current_type, result)) {
				err_mismatch("result", "extraction", "terminal", key, &c_current_type, result);
				errored = TRUE;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				err_formal_clash("extraction", "terminal", key, &c_saved_type, &c_current_type);
				errored = TRUE;
			}

			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				types_destroy(&c_saved_type);
				c_code_check(@code, FALSE, FALSE, NULL, &c_current_type, c_current_table);
				basic_set_result_code(basic,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};


	/*
	 * Action definition actions
	 */

	<set-action>: (string) -> () = @{
		c_current_entry = table_get_action(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERROR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"definition for unknown action '%S'", (void *) @&string);
		} else {
			ActionT *action;

			action = entry_get_action(c_current_entry);
			if (action_get_code(action)) {
				error_posn(ERROR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
					"multiple definitions for action '%S'", (void *) @&string);
				c_current_entry = NULL;
			}
		}
		nstring_destroy(&@=string);
	@};

	<x-set-action>: (code) -> () = @{
		if (c_current_entry) {
			ActionT    *action  = entry_get_action(c_current_entry);
			TypeTupleT *param   = action_param(action);
			TypeTupleT *result  = action_result(action);
			BoolT       errored = FALSE;
			KeyT       *key     = entry_key(c_current_entry);

			if (!types_disjoint_names(&c_saved_type)) {
				err_field_clash("parameter", "action", key, &c_saved_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_saved_type, param)) {
				err_field_mismatch("parameter", key, &c_saved_type, param);
				errored = TRUE;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_field_clash("result", "action", key, &c_current_type);
				errored = TRUE;
			}

			if (!types_fillin_types(&c_current_type, result)) {
				err_field_mismatch("result", key, &c_saved_type, result);
				errored = TRUE;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				error_posn(ERROR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
					"formal clash for action '%K' [parameter = %Y, result = %Y]",
					(void *) key, (void *) &c_saved_type, (void *) &c_current_type);
				errored = TRUE;
			}

			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				c_code_check(@code, TRUE, FALSE, &c_saved_type, &c_current_type, c_current_table);
				types_propogate_mutations(param, &c_saved_type);
				action_set_code(action,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};

	<set-trailer1>: (code) -> () = @{
		c_code_check(@code, FALSE, FALSE, NULL, NULL, c_current_table);
		c_out_info_set_trailer1 (c_current_out_info, @code);
	@};

	<set-trailer2>: (code) -> () = @{
		c_code_check(@code, FALSE, FALSE, NULL, NULL, c_current_table);
		c_out_info_set_trailer2(c_current_out_info, @code);
	@};


	/*
	 * Code elements into code block
	 */

	<ccode-init>: () -> (code :CCodeP) = @{
		@code = c_code_create(istream_name(&c_lexer_stream->istream), 
			istream_line(&c_lexer_stream->istream));
	@};

	<append-ccode-at>: (code :CCodeP) -> () = @{
		NStringT ns;
		nstring_copy_cstring(&ns, "@@");	/* TODO append '@@' to code buffer? */
		c_code_append_string(@code, &ns);	/* TODO really append_label()? */
	@};

	<append-ccode-exception>: (code :CCodeP) -> () = @{
		c_code_append_exception(@code);
	@};

	<append-ccode-terminal>: (code :CCodeP) -> () = @{
		c_code_append_terminal(@code);
	@};

	<append-ccode-advance>: (code :CCodeP) -> () = @{
		c_code_append_advance(@code);
	@};

	<append-ccode-basic>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_basic(@code, &@=i);
	@};

	<append-ccode-label>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_label(@code, &@=i);
	@};

	<append-ccode-reference>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_reference(@code, &@=i);
	@};

	<append-ccode-identifier>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_identifier(@code, &@=i);
	@};

	<append-ccode-modifiable>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_modifiable(@code, &@=i);
	@};

	<append-ccode-codestring>: (code :CCodeP, s :StringT &) -> () = @{
		assert(!nstring_contains(&@=s, '@@'));	/* XXX '@@'? */
		c_code_append_string(@code, &@=s);
	@};

	<E-eof-in-code-block>: () -> () = @{
		error_posn(ERROR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
			"end of file in C code block");
	@};


	/*
	 * Error recovery stuff
	 */

	<unhandled-syntax-error> = @{
		UNREACHED;
	@};

	<expected-identifier> = @{
		if (!c_propagating_error) {
			err_expected("identifier");
		}
	@};

	<expected-c-identifier> = @{
		if (!c_propagating_error) {
			err_expected("C identifier");
		}
	@};

	<expected-separator> = @{
		if (!c_propagating_error) {
			err_expected("','");
		}
	@};

	<expected-open-tuple> = @{
		if (!c_propagating_error) {
			err_expected("'('");
		}
	@};

	<expected-close-tuple> = @{
		if (!c_propagating_error) {
			err_expected("')'");
		}
	@};

	<expected-arrow> = @{
		if (!c_propagating_error) {
			err_expected("'->'");
		}
	@};

	<expected-terminator> = @{
		if (!c_propagating_error) {
			err_expected("';'");
		}
	@};

	<expected-end-action> = @{
		if (!c_propagating_error) {
			err_expected("'>'");
		}
	@};

	<expected-define> = @{
		if (!c_propagating_error) {
			err_expected("'='");
		}
	@};

	<expected-code> = @{
		if (!c_propagating_error) {
			err_expected("code block");
		}
	@};

	<expected-blt-header> = @{
		if (!c_propagating_error) {
			err_expected("'%header%'");
		}
	@};

	<expected-blt-terminals> = @{
		if (!c_propagating_error) {
			err_expected("'%terminals%'");
		}
	@};

	<expected-blt-actions> = @{
		if (!c_propagating_error) {
			err_expected("'%actions%'");
		}
	@};

	<expected-blt-trailer> = @{
		if (!c_propagating_error) {
			err_expected("'%trailer%'");
		}
	@};

	<expected-eof> = @{
		if (!c_propagating_error) {
			err_expected("end of file");
		}
	@};

	<destroy-string>: (string) -> () = @{
		nstring_destroy(&@=string);
	@};

	<skip-to-end-of-tuple-defn> = @{
		while (@. != @$EOF
			&& @. != @$DEFINE
			&& @. != @$CODE
			&& @. != @$SEPARATOR
			&& @. != @$CLOSE-TUPLE
			&& @. != @$TERMINATOR
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-prefix> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-MAPS
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ASSIGNMENTS
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-map> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-ASSIGNMENTS
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-assignment> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-param-assign> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER
				|| @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-result-assign> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-terminal> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-to-end-of-action> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER
			|| @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = TRUE;
	@};

	<skip-recover> = @{
		c_propagating_error = FALSE;
	@};

	<is-close-tuple-or-skipped-or-eof>: () -> (predicate) = @{
		@predicate = (@. == @$CLOSE-TUPLE
			|| @. == @$EOF
			|| c_propagating_error);
	@};

%trailer% @{

@}, @{

@};

