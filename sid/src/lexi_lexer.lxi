/* $Id$ */

/*
 * Copyright 2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

/*
 * The lexical analyser for Sid's grammar parser.
 */

ACTION <eof_in_comment>;

ACTION <read_identifier> : (:CHARACTER) -> (:TERMINAL);
ACTION <read_basic> : () -> (:TERMINAL);
ACTION <read_builtin> : () -> (:TERMINAL);
ACTION <lexi_unknown_token> : (:CHARACTER) -> (:TERMINAL);
ACTION <E_eof_in_comment> : () -> ();


TOKEN "::" -> $SCOPEMARK;
TOKEN "||" -> $ALT-SEP;
TOKEN "##" -> $HANDLER-SEP;

TOKEN ":" -> $TYPEMARK;
TOKEN "$" -> $EMPTY;
TOKEN "," -> $SEPARATOR;
TOKEN "=" -> $DEFINE;
TOKEN "?" -> $PRED-RESULT;
TOKEN "!" -> $IGNORE;
TOKEN "&" -> $REFERENCE;
TOKEN ";" -> $TERMINATOR;

TOKEN "<" -> $BEGIN-ACTION;
TOKEN ">" -> $END-ACTION;

TOKEN "{" -> $BEGIN-RULE;
TOKEN "}" -> $END-RULE;

TOKEN "\[" -> $BEGIN-SCOPE;
TOKEN "]" -> $END-SCOPE;

TOKEN "(" -> $OPEN-TUPLE;
TOKEN ")" -> $CLOSE-TUPLE;

TOKEN "->" -> $ARROW;

GROUP identstart = {a-z} + {A-Z} + "_";
GROUP identbody = "[identstart]" + {0-9} + "-";

TOKEN "[identstart]" -> $ = <read_identifier>(#0);

ZONE singleline_comment: "//" ... "\n" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> <eof_in_comment>;
}

ZONE bracketed_comment: "/*" ... "*/" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> <eof_in_comment>;
}

GROUP builtin = {a-z} + {A-Z};
TOKEN "%" -> $ = <read_builtin>();

TOKEN "\"" -> $ = <read_basic>();

TOKEN DEFAULT -> $ = <lexi_unknown_token> (#0);

