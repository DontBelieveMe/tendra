/*
 * The lexical analyser for Sid's grammar parser.
 * $Id$
 */

/* -p LEXER_TOK */

TOKEN "::" -> $SCOPEMARK;
TOKEN "||" -> $ALT-SEP;
TOKEN "##" -> $HANDLER-SEP;

TOKEN ":" -> $TYPEMARK;
TOKEN "$" -> $EMPTY;
TOKEN "," -> $SEPARATOR;
TOKEN "=" -> $DEFINE;
TOKEN "?" -> $PRED-RESULT;
TOKEN "!" -> $IGNORE;
TOKEN "&" -> $REFERENCE;
TOKEN ";" -> $TERMINATOR;

TOKEN "<" -> $BEGIN-ACTION;
TOKEN ">" -> $END-ACTION;

TOKEN "{" -> $BEGIN-RULE;
TOKEN "}" -> $END-RULE;

TOKEN "\[" -> $BEGIN-SCOPE;
TOKEN "]" -> $END-SCOPE;

TOKEN "(" -> $OPEN-TUPLE;
TOKEN ")" -> $CLOSE-TUPLE;

TOKEN "->" -> $ARROW;

GROUP identstart = {a-z} + {A-Z} + "_";
GROUP identbody = "[identstart]" + {0-9} + "-";
TOKEN "[identstart]" -> read_identifier();

ZONE singleline_comment: "//" ... "\n" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> E_eof_in_comment("&(lexer_stream->istream)"), $$;
}

ZONE bracketed_comment: "/*" ... "*/" {
	GROUP white = "";
	TOKEN DEFAULT -> $$;

	TOKEN "\e" -> E_eof_in_comment("&(lexer_stream->istream)"), $$;
}

GROUP builtin = {a-z} + {A-Z};
TOKEN "%" -> read_builtin();

TOKEN DEFAULT -> lexi_unknown_token ();
