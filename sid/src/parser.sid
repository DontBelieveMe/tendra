/*
    		 Crown Copyright (c) 1997
    
    This TenDRA(r) Computer Program is subject to Copyright
    owned by the United Kingdom Secretary of State for Defence
    acting through the Defence Evaluation and Research Agency
    (DERA).  It is made available to Recipients with a
    royalty-free licence for its use, reproduction, transfer
    to other parties and amendment for any purpose not excluding
    product development provided that any such use et cetera
    shall be deemed to be acceptance of the following conditions:-
    
        (1) Its Recipients shall ensure that this Notice is
        reproduced upon any copies or amended versions of it;
    
        (2) Any amended version of it shall be clearly marked to
        show both the nature of and the organisation responsible
        for the relevant amendment or amendments;
    
        (3) Its onward transfer from a recipient to another
        party shall be deemed to be that party's acceptance of
        these conditions;
    
        (4) DERA gives no warranty or assurance as to its
        quality or suitability for any purpose and DERA accepts
        no liability whatsoever in relation to any use to which
        it may be put.
*/


%types%

AltP;
BoolT;
EntryP;
ItemP;
RuleP;
StringT;
TypeTupleT;

%terminals%

blt-types;		// %types%
blt-terminals;		// %terminals%
blt-productions;	// %productions% 
blt-entry;		// %entry%
identifier: () -> (: StringT);
typemark;		// :
open-tuple;		// (
close-tuple;		// )
arrow;			// ->
terminator;		// ;
begin-action;		// <
end-action;		// >
define;			// =
begin-rule;		// {
end-rule;		// }
alt-sep;		// ||
handler-sep;		// ##
empty;			// $
pred-result;		// ?
ignore;			// !
scopemark;		// ::
begin-scope;		// [
end-scope;		// ]
separator;		// ,
reference;		// &
eof;

%productions%

<init-tuple> : () -> (:TypeTupleT);
<current-tuple>;
<tuple-name>: (:TypeTupleT&, : StringT &, : StringT &) -> ();
<tuple-ref-name>: (:TypeTupleT&, : StringT &, : StringT &) -> ();
<tuple-type>: (:TypeTupleT&, : StringT &) -> ();
<tuple-ref-type>: (:TypeTupleT&, : StringT &) -> ();
<save-tuple>;
<add-type>: (: StringT &) -> ();
<terminal>: (: StringT &) -> ();
<i-terminal>: (: StringT &) -> ();
<x-terminal>  : (:TypeTupleT&,:TypeTupleT&) -> ();
<add-name>: (:TypeTupleT&,: StringT &) -> ();
<add-ref-name>: (:TypeTupleT&, : StringT &) -> ();
<add-var>: (:TypeTupleT&, : StringT &) -> ();
<add-pred>: (:TypeTupleT&) -> ();
<add-void>: (:TypeTupleT&) -> ();
<action>: (: StringT &) -> ();
<x-action>: (: TypeTupleT&, : TypeTupleT&) -> () ;
<non-local>: (: StringT &, : StringT &) -> ();
<non-local-init>: (: StringT &) -> ();
<save-scope>: () -> (: EntryP, : RuleP);
<restore-scope>: (: EntryP, : RuleP) -> ();
<prod-action>: (: StringT &) -> ();
<x-prod-action> : (:TypeTupleT&, :TypeTupleT&) -> ();
<x-identity> : (:TypeTupleT&, :TypeTupleT&) -> () ;
<x-prod-rule>: (:TypeTupleT&, :TypeTupleT&, : StringT &) -> ();
<x-prod-rule-or-identity>: (:TypeTupleT&, : StringT &) -> ();
<save>: () -> (: EntryP, : RuleP, : AltP, : BoolT, : ItemP);
<restore>: (: EntryP, : RuleP, : AltP, :BoolT, : ItemP) -> ();
<handler>;
<x-handler>;
<empty-alt>;
<non-empty-alt>;
<x-non-empty-alt>;
<rule>: (: StringT &) -> ();
<x-rule>: (:TypeTupleT&, :TypeTupleT&) -> ();
<prod>: (:TypeTupleT&, :TypeTupleT&) -> ();
<x-prod>;
<push-scope>;
<pop-scope>;
<use-global>;
<use-local>;
<add-entry>: (: StringT &) -> ();
<init>;
<x-terminals>;

<unhandled-syntax-error>;

<expected-typemark>;
<expected-identifier>;
<expected-tuple-defn>;
<expected-terminal-decn>;
<expected-separator>;
<expected-open-tuple>;
<expected-close-tuple>;
<expected-arrow>;
<expected-terminator>;
<expected-lhs-name>;
<expected-rhs-name>;
<expected-begin-action>;
<expected-end-action>;
<expected-end-scope>;
<expected-tuple-or-terminator>;
<expected-item-rhs>;
<expected-define>;
<expected-tuple-or-define-or-terminator>;
<expected-begin-rule>;
<expected-end-rule>;
<expected-item>;
<expected-alternative>;
<expected-other-defn>;
<expected-production-defn>;
<expected-blt-types>;
<expected-blt-terminals>;
<expected-blt-productions>;
<expected-blt-entry>;
<expected-eof>;
<expected-terminator-or-define>;

<destroy-string>: (: StringT &) -> ();

<skip-to-end-of-tuple-defn>;
<skip-to-end-of-terminal-decn>;
<skip-to-end-of-lhs-name>;
<skip-to-end-of-rhs-name>;
<skip-to-end-of-action-decn>;
<skip-to-end-of-item>;
<skip-to-end-of-alternative>;
<skip-to-end-of-other-defn>;
<skip-to-end-of-production-defn>;
<skip-to-end-of-entry-list>;
<skip-recover>;

<is-blt-entry-or-end-scope-or-eof>: () -> (: BoolT);
<is-close-tuple-or-skipped-or-eof>: () -> (: BoolT);
<is-terminator>: () -> (: BoolT);
<is-not-separator>: () -> (: BoolT);

/*
-------------------------------------------------------------------------------
| Before calling the "sid-parse-grammar" function, the following variables
| should have been initialized: "sid_current_stream" and "sid_current_grammar".
-------------------------------------------------------------------------------
*/

sid-parse-grammar [
    // FUNCTION TYPE SPECIFICATIONS:
    function-type-defn : () -> (params:TypeTupleT, results:TypeTupleT)[
	tuple-defn : (tuple:TypeTupleT&) -> () = {
	    name = identifier;
	    {
		typemark;
	      ##
		<expected-typemark>;
	    };
	    {
		type = identifier;
		{
		    reference;
		    <tuple-ref-name> (&tuple, &name, &type);
		  ||
		    <tuple-name> (&tuple, &name, &type);
		};
	      ##
		<expected-identifier>;
		<destroy-string> (&name);
		<skip-to-end-of-tuple-defn>;
	    };
	  ||
	    typemark;
	    {
		type = identifier;
		{
		    reference;
		    <tuple-ref-type> (&tuple, &type);
		  ||
		    <tuple-type> (&tuple, &type);
		};
	      ##
		<expected-identifier>;
		<skip-to-end-of-tuple-defn>;
	    };
	  ##
	    <expected-tuple-defn>;
	    <skip-to-end-of-tuple-defn>;
	};

	tuple-defn-list-1 : (tuple: TypeTupleT&) -> () = {
	    tuple-defn (&tuple);
	    {
		? = <is-close-tuple-or-skipped-or-eof>;
	      ||
		separator;
		tuple-defn-list-1(&tuple);
	      ##
		<expected-separator>;
		tuple-defn-list-1(&tuple);
	    };
	};

	tuple-defn-list : (tuple : TypeTupleT&) -> () = {
	    $;
	  ||
	    tuple-defn-list-1(&tuple);
	};

	type-tuple-defn : () -> (tuple :TypeTupleT) = {
	    tuple = <init-tuple>;
	    {
		open-tuple;
	      ##
		<expected-open-tuple>;
	    };
	    tuple-defn-list(&tuple);
	    <skip-recover>;
	    {
		close-tuple;
	      ##
		<expected-close-tuple>;
	    };
	};
    ] = {
	typemark;
	params = type-tuple-defn;
	<save-tuple>;
	{
	    arrow;
	  ##
	    <expected-arrow>;
	};
	results = type-tuple-defn;
      ||
	params = <init-tuple> ;
	results = <init-tuple> ;
    };

    // TYPE DECLARATIONS:
    type-decl-list [
	type-decl = {
	    id = identifier;
	    <add-type> (&id);
	    {
		terminator;
	      ##
		<expected-terminator>;
	    };
	};
    ] = {
	$;
      ||
	type-decl;
	type-decl-list;
    };

    // TERMINAL DECLARATIONS:
    terminal-decn-list [
	terminal-decn = {
	    id = identifier;
	    <terminal> (&id);
	    (params,results) = function-type-defn;
	    <x-terminal>(&params,&results);
	    {
		terminator;
	      ##
		<expected-terminator>;
	    };
	  ||
	    ignore;
	    {
		id = identifier;
		<i-terminal> (&id);
		(params,results)=function-type-defn;
		<x-terminal>(&params,&results);
		{
		    terminator;
		  ##
		    <expected-terminator>;
		};
	      ##
		<expected-identifier>;
		<skip-to-end-of-terminal-decn>;
	    };
	  ##
	    <expected-terminal-decn>;
	    <skip-to-end-of-terminal-decn>;
	};
    ] = {
	terminal-decn;
	<skip-recover>;
	{
	    $;
	  ||
	    terminal-decn-list;
	};
    };

    // PRODUCTION DEFINITIONS:
    production-defn-list [
	// LHS TUPLES:
	lhs-name-tuple : () -> (tuple:TypeTupleT) [
	    lhs-name : (tuple:TypeTupleT&) -> () = {
		id = identifier;
		<add-name> (&tuple, &id);
	      ||
		reference;
		{
		    id = identifier;
		    <add-var> (&tuple,&id);
		  ##
		    <expected-identifier>;
		};
	      ||
		pred-result;
		<add-pred>(&tuple);
	      ||
		ignore;
		<add-void>(&tuple);
	      ##
		<expected-lhs-name>;
		<skip-to-end-of-lhs-name>;
	    };

	    lhs-name-list-1  : (tuple:TypeTupleT&) -> () = {
		lhs-name(&tuple);
		{
		    ? = <is-close-tuple-or-skipped-or-eof>;
		  ||
		    separator;
		    lhs-name-list-1(&tuple);
		  ##
		    <expected-separator>;
		    lhs-name-list-1(&tuple);
		};
	    };

	    lhs-name-list  : (tuple:TypeTupleT&) -> () = {
		$;
	      ||
		lhs-name-list-1(&tuple);
	    };
	] = {
	    <current-tuple>;
	    {
		open-tuple;
	      ##
		<expected-open-tuple>;
	    };
	    tuple=<init-tuple>;
	    lhs-name-list(&tuple);
	    <skip-recover>;
	    {
		close-tuple;
	      ##
		<expected-close-tuple>;
	    };
	};

	// RHS TUPLES:
	rhs-name-tuple : () -> (tuple : TypeTupleT) [
	    rhs-name : (tuple:TypeTupleT&) -> () = {
		id = identifier;
		<add-name> (&tuple,&id);
	      ||
		reference;
		{
		    id = identifier;
		    <add-ref-name> (&tuple, &id);
		  ##
		    <expected-identifier>;
		    <skip-to-end-of-rhs-name>;
		};
	      ##
		<expected-rhs-name>;
		<skip-to-end-of-rhs-name>;
	    };

	    rhs-name-list-1 : (tuple:TypeTupleT&) -> () = {
		rhs-name(&tuple);
		{
		    ? = <is-close-tuple-or-skipped-or-eof>;
		  ||
		    separator;
		    rhs-name-list-1(&tuple);
		  ##
		    <expected-separator>;
		    rhs-name-list-1(&tuple);
		};
	    };

	    rhs-name-list : (tuple:TypeTupleT&) -> () = {
		$;
	      ||
		rhs-name-list-1(&tuple);
	    };
	] = {
	    <current-tuple>;
	    {
		open-tuple;
	      ##
		<expected-open-tuple>;
	    };
	    tuple=<init-tuple>;
	    rhs-name-list(&tuple);
	    <skip-recover>;
	    {
		close-tuple;
	      ##
		<expected-close-tuple>;
	    };
	};

	// ACTION DECLARATIONS:
	action-decn = {
	    begin-action;
	    {
		id = identifier;
		<action> (&id);
		{
		    end-action;
		  ##
		    <expected-end-action>;
		};
		(params, results)=function-type-defn;
		<x-action>(&params,&results);
		{
		    terminator;
		  ##
		    <expected-terminator>;
		};
	      ##
		<expected-identifier>;
		<skip-to-end-of-action-decn>;
	    };
	};

	// PRODUCTION DEFINITIONS:
	production-locals = {
	    $;
	  ||
	    begin-scope;
	    (entry, rule) = <save-scope>;
	    production-defn-list;
	    <restore-scope> (entry, rule);
	    {
		end-scope;
	      ##
		<expected-end-scope>;
	    };
	};

	production-defn-define-4 : (lhs-tuple:TypeTupleT&) -> () = {
	    rhs-tuple=rhs-name-tuple;
	    <x-prod-action>(&lhs-tuple,&rhs-tuple);
	    {
		terminator;
	      ##
		<expected-terminator>;
	    };
	  ||
	    <current-tuple>;
	    rhs-tuple=<init-tuple>;
	    <x-prod-action>(&lhs-tuple,&rhs-tuple);
	    terminator;
	  ##
	    <expected-tuple-or-terminator>;
	    <skip-to-end-of-item>;
	};

	production-defn-define-1 : (lhs-tuple:TypeTupleT&) -> () = {
	    begin-action;
	    {
		id = identifier;
		<prod-action> (&id);
		{
		    end-action;
		  ##
		    <expected-end-action>;
		};
		production-defn-define-4(&lhs-tuple);
	      ##
		<expected-identifier>;
		<skip-to-end-of-item>;
	    };
	  ||
	    id = identifier;
	    {
		<current-tuple>;
		<x-prod-rule-or-identity> (&lhs-tuple, &id);
		terminator;
	      ||
		rhs-tuple=rhs-name-tuple;
		<x-prod-rule> ( &lhs-tuple, &rhs-tuple, &id);
		{
		    terminator;
		  ##
		    <expected-terminator>;
		};
	      ##
		<expected-tuple-or-terminator>;
		<destroy-string> (&id);
		<skip-to-end-of-item>;
	    };
	  ||
	    <current-tuple>;
	    reference;
	    rhs-tuple=<init-tuple>;
	    {
		id = identifier;
		<add-ref-name> (&rhs-tuple, &id);
		<x-identity>(&lhs-tuple, &rhs-tuple);
		{
			terminator;
		  ##
			<expected-terminator>;
		};
	      ##
		<expected-identifier>;
		<skip-to-end-of-item>;
	    };
	  ||
	    rhs-tuple=rhs-name-tuple;
	    <x-identity>(&lhs-tuple,&rhs-tuple);
	    {
		terminator;
	      ##
		<expected-terminator>;
	    };
	  ##
	    <expected-item-rhs>;
	    <skip-to-end-of-item>;
	};

	production-defn-define = {
	    lhs-tuple=lhs-name-tuple;
	    <save-tuple>;
	    {
		define;
	      ##
		<expected-define>;
	    };
	    production-defn-define-1(&lhs-tuple);
	  ||
	    <current-tuple>;
	    pred-result;
	    lhs-tuple=<init-tuple>;
	    <add-pred>(&lhs-tuple);
	    <save-tuple>;
	    {
		define;
	      ##
		<expected-define>;
	    };
	    production-defn-define-1(&lhs-tuple);
	  ||
	    <current-tuple>;
	    ignore;
	    lhs-tuple=<init-tuple>;
	    <add-void>(&lhs-tuple);
	    <save-tuple>;
	    {
		define;
	      ##
		<expected-define>;
	    };
	    production-defn-define-1(&lhs-tuple);
	  ||
	    reference;
	    {
		id = identifier;
		<current-tuple>;
		lhs-tuple=<init-tuple>;
		<add-var> (&lhs-tuple,&id);
		<save-tuple>;
		{
		    define;
		  ##
		    <expected-define>;
		};
		production-defn-define-1(&lhs-tuple);
	      ##
		<expected-identifier>;
	    };
	  ||
	    id = identifier;
	    {
		<current-tuple>;
		<save-tuple>;
		lhs-tuple=<init-tuple>;
		rhs-tuple=rhs-name-tuple;
		<x-prod-rule> (&lhs-tuple, &rhs-tuple, &id);
		{
		    terminator;
		  ##
		    <expected-terminator>;
		};
	      ||
		<current-tuple>;
		lhs-tuple=<init-tuple>;
		<add-name> (&lhs-tuple,&id);
		<save-tuple>;
		define;
		production-defn-define-1(&lhs-tuple);
	      ||
		<current-tuple>;
		<save-tuple>;
		<current-tuple>;
		lhs-tuple=<init-tuple>;
		rhs-tuple=<init-tuple>;
		<x-prod-rule> (&lhs-tuple, &rhs-tuple, &id);
		terminator;
	      ##
		<expected-tuple-or-define-or-terminator>;
		<destroy-string> (&id);
		<skip-to-end-of-item>;
	    };
	  ||
	    <current-tuple>;
	    <save-tuple>;
	    lhs-tuple=<init-tuple>;
	    begin-action;
	    {
		id = identifier;
		<prod-action> (&id);
		{
		    end-action;
		  ##
		    <expected-end-action>;
		};
		production-defn-define-4(&lhs-tuple);
	      ##
		<expected-identifier>;
		<skip-to-end-of-item>;
	    };
	};

	production-defn-rhs;

	production-defn-item = {
	    production-defn-define;
	    <skip-recover>;
	  ||
	    begin-rule;
	    (entry, rule, alt, internal, item) = <save>;
	    production-defn-rhs;
	    <restore> (entry, rule, alt, internal, item);
	    {
		end-rule;
	      ##
		<expected-end-rule>;
	    };
	    {
		terminator;
	      ##
		<expected-terminator>;
	    };
	};

	production-defn-non-empty-alternative = {
	    production-defn-item;
	  ||
	    production-defn-item;
	    production-defn-non-empty-alternative;
	  ##
	    <expected-item>;
	    <skip-to-end-of-item>;
	    <skip-recover>;
	};

	exception-handler = {
	    <handler>;
	    production-defn-non-empty-alternative;
	    <x-handler>;
	};

	production-defn-alternative = {
	    <empty-alt>;
	    empty;
	    {
		terminator;
	      ##
		<expected-terminator>;
	    };
	  ||
	    <non-empty-alt>;
	    production-defn-non-empty-alternative;
	    <x-non-empty-alt>;
	  ##
	    <expected-alternative>;
	    <skip-to-end-of-alternative>;
	    <skip-recover>;
	};

	production-defn-alternatives = {
	    production-defn-alternative;
	    {
		$;
	      ||
		alt-sep;
		production-defn-alternatives;
	    };
	};

	production-defn-rhs = {
	    production-defn-alternatives;
	    {
		$;
	      ||
		handler-sep;
		exception-handler;
	    };
	};

	other-defn = {
	    id = identifier;
	    {
		typemark;
		{
		    type = identifier;
		    <non-local> (&id, &type);
		    {
			terminator;
		      ||
			define;
			{
			    begin-action;
			  ##
			    <expected-begin-action>;
			};
			{
			    action = identifier;
			    <non-local-init> (&action);
			    {
				end-action;
			      ##
				<expected-end-action>;
			    };
			    {
				terminator;
			      ##
				<expected-terminator>;
			    };
			  ##
			    <expected-identifier>;
			};
		      ##
			<expected-terminator-or-define>;
		    };
		  ##
		    <expected-identifier>;
		    <destroy-string> (&id);
		    <skip-to-end-of-other-defn>;
		};
	      ||
		(params,results) = function-type-defn;
		<rule> (&id);
		{
		    <x-rule>(&params,&results);
		    terminator;
		  ||
		    <prod>(&params,&results);
		    <push-scope>;
		    production-locals;
		    {
			define;
		      ##
			<expected-define>;
		    };
		    {
			begin-rule;
		      ##
			<expected-begin-rule>;
		    };
		    production-defn-rhs;
		    {
			end-rule;
		      ##
			<expected-end-rule>;
		    };
		    <pop-scope>;
		    <x-prod>;
		    {
			terminator;
		      ##
			<expected-terminator>;
		    };
		};
	      ##
		<expected-other-defn>;
		<destroy-string> (&id);
		<skip-to-end-of-other-defn>;
	    };
	};

	production-defn = {
	    {
		scopemark;
		<use-global>;
	       ||
		<use-local>;
	    };
	    {
		action-decn;
	      ||
		other-defn;
	    };
	};
    ] /* production-defn-list */ = {
	production-defn;
	<skip-recover>;
	{
	    ? = <is-blt-entry-or-end-scope-or-eof>;
	  ||
	    production-defn-list;
	};
      ##
	<expected-production-defn>;
	<skip-to-end-of-production-defn>;
	<skip-recover>;
	{
	    ? = <is-blt-entry-or-end-scope-or-eof>;
	  ##
	    production-defn-list;
	};
    };

    // ENTRY DECLARATIONS:
    entry-list [
	entry = {
	    id = identifier;
	    <add-entry> (&id);
	  ##
	    <expected-identifier>;
	};
    ] = {
	entry;
	{
	    ? = <is-terminator>;
	  ||
	    separator;
	    entry-list;
	  ##
	    <expected-separator>;
	    <skip-to-end-of-entry-list>;
	    <skip-recover>;
	    {
		? = <is-not-separator>;
	      ##
		entry-list;
	    };
	};
    };
] /* sid-parse-grammar */ = {
    <init>;
    {
	blt-types;
      ##
	<expected-blt-types>;
    };
    type-decl-list;
    {
	blt-terminals;
      ##
	<expected-blt-terminals>;
    };
    terminal-decn-list;
    <x-terminals>;
    {
	blt-productions;
      ##
	<expected-blt-productions>;
    };
    production-defn-list;
    {
	blt-entry;
      ##
	<expected-blt-entry>;
    };
    entry-list;
    {
	terminator;
      ##
	<expected-terminator>;
    };
    {
	eof;
      ##
	<expected-eof>;
    };
  ##
    <unhandled-syntax-error>;
};

%entry% sid-parse-grammar;
