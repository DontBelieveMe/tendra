# $Id$

ESRC=errors
BUILD_ERRORS=${ESRC}/BUILD_ERRORS

PREFIX?=/usr/local
BINDIR?=${PREFIX}/bin

TARGETS=gen-errors.o arg-parse.o grammar.o lexer.o \
	main.o output.o parser.o

ERR_OUT=gen-errors.c gen-errors.h

MOVE=mv
REMOVE=rm -f
PERL=perl
LEXI=lexi
SID=sid
INSTALL=install

# XXX: Do I want to have them removed during clean?
#CLEAN_EXTRA= parser.c junk.h c-parser.c c-junk.h gen-errors.c gen-errors.h

SIDOPTS=-l ansi-c -s numeric -s no-lines

#PARSER_OUT=${SRC}/parser.c ${SRC}/junk.h
#C_OUT=${SRC}/c-parser.c ${SRC}/c-junk.h

EFILES=${ESRC}/arg-parse.e ${ESRC}/c-check.e ${ESRC}/c-code.e \
	${ESRC}/c-lexer.e ${ESRC}/c-parser.e ${ESRC}/error-file.e \
	${ESRC}/for-osif.e ${ESRC}/grammar.e ${ESRC}/lexer.e ${ESRC}/main.e \
	${ESRC}/parser.e ${ESRC}/rule-check.e ${ESRC}/rule-factor.e \
	${ESRC}/rule-firsts.e ${ESRC}/rule-lre.e ${ESRC}/scope.e \
	${ESRC}/table.e ${ESRC}/types.e

all: sid

install: sid
	${INSTALL} -m 755 -d ${BINDIR}
	${INSTALL} -m 755 sid ${BINDIR}/

# Remove only what's generated by a normal build except for configurations
clean:
	${REMOVE} sid gen-errors.c gen-errors.h ${TARGETS}
	cd rules && ${MAKE} clean
	cd lang-c && ${MAKE} clean
	cd adt && ${MAKE} clean
	cd eds && ${MAKE} clean

# Remove generated files that are in the distribution
maintainer-clean:
	${REMOVE} lexi_lexer.c
	cd lang-c && ${MAKE} maintainer-clean

sid: ${TARGETS} rules/rules.a lang-c/lang-c.a adt/adt.a eds/eds.a
	${CC} ${CFLAGS} ${LDFLAGS} -o $@ ${TARGETS} \
		rules/rules.a lang-c/lang-c.a adt/adt.a eds/eds.a

rules/rules.a:
	cd rules && ${MAKE} all

adt/adt.a:
	cd adt && ${MAKE} all

eds/eds.a:
	cd eds && ${MAKE} all

lang-c/lang-c.a:
	cd lang-c && ${MAKE} all

parser.c: parser.sid parser.act
	${SID} ${SIDOPTS} parser.sid parser.act tmp.$@ junk.h \
		|| ( ${REMOVE} tmp.$@ ; exit 1 )
	${MOVE} tmp.$@ $@

gen-errors.c: ${BUILD_ERRORS} ${EFILES}
	${REMOVE} ${ERR_OUT}; \
	${PERL} ${BUILD_ERRORS} -o gen-errors ${EFILES}

lexer.c: lexi_lexer.c

lexi_lexer.h lexi_lexer.c: lexi_lexer.lxi lexi_lexer.lct
	-${MOVE} lexi_lexer.c sav.lexi_lexer.c 
	-${MOVE} lexi_lexer.h sav.lexi_lexer.h
	${LEXI} -lC99 -a lexi_lexer.lxi lexi_lexer.lct lexi_lexer.c lexi_lexer.h \
		|| ( ${MOVE} sav.lexi_lexer.c lexi_lexer.c ; ${MOVE} sav.lexi_lexer.h lexi_lexer.h ; exit 1 )

