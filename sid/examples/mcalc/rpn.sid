/*
 * Copyright 2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

%types%

	Number;
	Bool;

%terminals%

	!eof;

	number: () -> (:Number);
	add; sub; mul; div; mod; !lparen; !rparen;
	newline;

	!error;

%productions%

	<is-eof>: () -> (:Bool);
	<is-newline>: () -> (:Bool);

	!<Pos>: (:Number) -> (:Number);
	!<Neg>: (:Number) -> (:Number);
	<Mul>: (:Number, :Number) -> (:Number);
	<Div>: (:Number, :Number) -> (:Number);
	<Mod>: (:Number, :Number) -> (:Number);
	<Add>: (:Number, :Number) -> (:Number);
	<Sub>: (:Number, :Number) -> (:Number);
	<Print>: (:Number) -> ();

	<panic>;
	<err-syntax>;
	<err-divide-by-zero>: () -> (:Number);

	rpn-expressions;

	/*
	 * This is a good example of SID eliminating left-factors in grammars to
	 * produce an LL(1) result. This grammar for RPN has two expressions
	 * followed by an operator:
	 *
	 *    expression = {
	 *        n1 = expression;
	 *        n2 = expression;
	 *        { mul || div || add || sub };
	 *    ||
	 *        number;
	 *    };
	 *
	 * This is left-recursive, and hence not LL(1). The usual factoring is:
	 *
	 *    expression = {
	 *        number;
	 *        expression1;
	 *    };
	 *
	 *    expression1 = {
	 *        expression;
	 *        { mul || div || add || sub };
	 *        expression1;
	 *    ||
	 *        $;
	 *    };
	 *
	 * And this is exactly what SID produces during left-recursion elimination
	 * (which you can see by running 'sid -d /dev/stdout -l test rpn.sid').
	 * The result is LL(1), and not particularly readable.
	 *
	 * So this allows grammars to be written in a more natural form, making
	 * them more readable. In particular this suits RPN rather nicely.
	 */
	expression: () -> (n:Number) [
		div-op: (n1:Number, n2:Number) -> (n:Number) = {
			n = <Div>(n1, n2);
		##
			n = <err-divide-by-zero>;
			<panic>;
			rpn-expressions;
		};

		mod-op: (n1:Number, n2:Number) -> (n:Number) = {
			n = <Mod>(n1, n2);
		##
			n = <err-divide-by-zero>;
			<panic>;
			rpn-expressions;
		};
	] = {
		n = number;
	||
		n1 = expression;
		n2 = expression;

		{
			mul;
			n = <Mul>(n1, n2);
		||
			div;
			n = div-op(n1, n2);
		||
			mod;
			n = mod-op(n1, n2);
		||
			add;
			n = <Add>(n1, n2);
		||
			sub;
			n = <Sub>(n1, n2);
		};
	};

	rpn-expressions = {
		? = <is-eof>;
	||
		newline;
		rpn-expressions;
	||
		e = expression;
		{
			? = <is-newline>;
			<Print>(e);
			newline;
		};
		rpn-expressions;
	##
		<err-syntax>;
		<panic>;
		rpn-expressions;
	};

%entry%

	rpn-expressions;

