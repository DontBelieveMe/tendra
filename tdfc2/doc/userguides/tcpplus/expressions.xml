<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuration for expressions</title>

	<section id="cast">
		<title>Cast expressions</title>

		<para>ISO C++ introduces the constructs <code>static_cast</code>,
			<code>const_cast</code> and <code>reinterpret_cast</code>, which can
			be used in various contexts where an old style explicit cast would
			previously have been used.	By default, an explicit cast can perform
			any combination of the conversions performed by these three constructs.
			To aid migration to the new style casts the directives:</para>

		<programlisting language="cpp">#pragma TenDRA++ explicit cast as <emphasis>cast-state allow</emphasis>
#pragma TenDRA++ explicit cast <emphasis>allow</emphasis></programlisting>

		<para>where <emphasis>cast-state</emphasis> is defined as follows:</para>

		<programlisting language="bnf"><emphasis>cast-state</emphasis> :
			static_cast
			const_cast
			reinterpret_cast
			static_cast | <emphasis>cast-state</emphasis>
			const_cast | <emphasis>cast-state</emphasis>
			reinterpret_cast | <emphasis>cast-state</emphasis></programlisting>

		<para>can be used to restrict the conversions which can be performed using
			explicit casts.	The first form sets the interpretation of explicit
			cast to be combinations of the given constructs; the second resets
			the interpretation to the default.	For example:</para>

		<programlisting language="cpp">#pragma TenDRA++ explicit cast as static_cast | const_cast allow</programlisting>

		<para>means that conversions requiring <code>reinterpret_cast</code> (the
			most unportable conversions) will not be allowed to be performed using
			explicit casts, but will have to be given as a <code>reinterpret_cast</code>
			construct.	Changing <code>allow</code> to <code>warning</code> will
			also cause a warning to be issued for every explicit cast expression.</para>
	</section>

	<section id="initialiser-expressions">
		<title>Initialiser expressions</title>

		<para>C, but not C++, only allows constant expressions in static initialisers.
			The directive:</para>

		<programlisting language="cpp">#pragma TenDRA variable initialization <emphasis>allow</emphasis></programlisting>

		<para>can be enable support for C++-style dynamic initialisers.	Conversely,
			it can be used in C++ to detect such dynamic initialisers.</para>

		<para>In older dialects of C it was not possible to initialise an automatic
			variable of structure or union type.	This can be checked for using
			the directive:</para>

		<programlisting language="cpp">#pragma TenDRA initialization of struct/union (auto) <emphasis>allow</emphasis></programlisting>

		<para>The directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ complete initialization analysis <emphasis>on</emphasis></programlisting>

		<para>can be used to check aggregate initialisers.	The initialiser should
			be fully bracketed (i.e. with no elision of braces), and should have
			an entry for each member of the structure or array.</para>
	</section>

	<section id="lvalue">
		<title>Lvalue expressions</title>

		<para>C++ defines the results of several operations to be lvalues, whereas
			they are rvalues in C.	The directive:</para>

		<programlisting language="cpp">#pragma TenDRA conditional lvalue <emphasis>allow</emphasis></programlisting>

		<para>is used to apply the C++ rules for lvalues in conditional (<code>?:</code>)
			expressions.</para>

		<para>Older dialects of C++ allowed <code>this</code> to be treated as an
			lvalue. It is possible to enable support for this dialect feature
			using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ this lvalue <emphasis>allow</emphasis></programlisting>

		<para>however it is recommended that programs using this feature should
			be modified.</para>

		<!-- TODO: merged in content -->

		<para>The <code>?</code> operator cannot normally be used to define an
			lvalue, so that for example, the program:</para>

		<programlisting language="c">struct s {
    int a, b;
};

void f ( int n, struct s *s1, struct s *s2 )
{
    ( n ? s1 : s2) -&gt; a = 0;
}</programlisting>

		<para>is not allowed in ISO C. The pragma:</para>

		<programlisting language="c">#pragma TenDRA conditional lvalue allow</programlisting>

		<para>allows conditional lvalues if:</para>

		<itemizedlist>
			<listitem>
				<para>Both options of the conditional operator have compatible
					compound types;</para>
			</listitem>
			<listitem>
				<para>Both options of the conditional are lvalues.</para>
			</listitem>
		</itemizedlist>

		<para>(there is also a <code>disallow</code> variant, but
			<code>warning</code> is not permitted in this case).</para>
	</section>

</chapter>

