<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuration for the preprocessor</title>

	<section id="ppdir">
		<title>Preprocessing directives</title>

		<para>Non-standard preprocessing directives can be controlled using the
			directives:</para>

		<programlisting language="cpp">#pragma TenDRA directive <emphasis>ppdir allow</emphasis>
#pragma TenDRA directive <emphasis>ppdir</emphasis> (ignore) <emphasis>allow</emphasis></programlisting>

		<para>where <emphasis>ppdir</emphasis> can be <code>assert</code>, <code>file</code>,
			<code>ident</code>, <code>import</code> (C++ only),
			<code>include_next</code> (C++ only), <code>unassert</code>,
			<code>warning</code> (C++ only) or <code>weak</code>.	The second form
			causes the directive to be processed but ignored (note that there is no
			<code>(ignore) disallow</code> form).	The treatment of other unknown
			preprocessing directives can be controlled using:</para>

		<programlisting language="cpp">#pragma TenDRA unknown directive <emphasis>allow</emphasis></programlisting>

		<para>Cases where the token following the <code>#</code> in a preprocessing
			directive is not an identifier can be controlled using:</para>

		<programlisting language="cpp">#pragma TenDRA no directive/nline after ident <emphasis>allow</emphasis></programlisting>

		<para>When permitted, unknown preprocessing directives are ignored.</para>

		<para>By default, unknown <code>#pragma</code> directives are ignored without
			comment, however this behaviour can be modified using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA unknown pragma <emphasis>allow</emphasis></programlisting>

		<para>Note that any unknown <code>#pragma TenDRA</code> directives always
			give an error.</para>

		<para>Older preprocessors allowed text after <code>#else</code> and
			<code>#endif</code> directives.	The following directive can be used
			to enable such behaviour:</para>

		<programlisting language="cpp">#pragma TenDRA text after directive <emphasis>allow</emphasis></programlisting>

		<para>Such text after a directive is ignored.</para>

		<para>Some older preprocessors have problems with white space in preprocessing
			directives - whether at the start of the line, before the initial
			<code>#</code>, or between the <code>#</code> and the directive identifier.
			Such white space can be detected using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA indented # directive <emphasis>allow</emphasis>
#pragma TenDRA indented directive after # <emphasis>allow</emphasis></programlisting>

		<para>respectively.</para>
	</section>

	<section id="include">
		<title>File inclusion directives</title>

		<para>There is a maximum depth of nested <code>#include</code>
			directives allowed by the C++ producer. This depth is given by the
			<code>include_depth</code> implementation quantity
			<link linkend="limits">mentioned above</link>.	Its value is fairly small
			in order to detect recursive inclusions.	The maximum depth can be
			set using:</para>

		<programlisting language="cpp">#pragma TenDRA includes depth <emphasis>integer-literal</emphasis></programlisting>

		<para>A further check, for full pathnames in <code>#include</code> directives
			(which may not be portable), can be enabled using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ complete file includes <emphasis>allow</emphasis></programlisting>
	</section>

	<section id="macro">
		<title>Macro definitions</title>

		<para>By default, multiple consistent definitions of a macro are allowed.
			This behaviour can be controlled using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA extra macro definition <emphasis>allow</emphasis></programlisting>

		<para>The ISO C/C++ rules for determining whether two macro definitions
			are consistent are fairly restrictive.	A more relaxed rule allowing
			for consistent renaming of macro parameters can be enabled using:</para>

		<programlisting language="cpp">#pragma TenDRA weak macro equality <emphasis>allow</emphasis></programlisting>

		<para>In the definition of macros with parameters, a <code>#</code> in the
			replacement list must be followed by a parameter name, indicating
			the stringising operation.	This behaviour can be controlled by the
			directive:</para>

		<programlisting language="cpp">#pragma TenDRA no ident after # <emphasis>allow</emphasis></programlisting>

		<para>which allows a <code>#</code> which is not followed by a parameter
			name to be treated as a normal preprocessing token.</para>

		<para>In a list of macro arguments, the effect of a sequence of preprocessing
			tokens which otherwise resembles a preprocessing directive is undefined.
			The C++ producer treats such directives as normal sequences of preprocessing
			tokens, but can be made to report such behaviour using:</para>

		<programlisting language="cpp">#pragma TenDRA directive as macro argument <emphasis>allow</emphasis></programlisting>
	</section>

</chapter>

