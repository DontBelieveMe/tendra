<?xml version="1.0" standalone="no"?>
<!DOCTYPE preface SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuring the Compiler</title>

	<para>This document describes the capabilities of the TenDRA C checker for
		enforcing the ISO C standard as well as features for detecting areas
		left undefined by the standard. It also lists the non-ISO dialect
		features supported by the checker in order to provide compatibility
		with older versions of C and allow the use of third-party source which
		may contain non-standard constructs.</para>

	<para>This majority of this document describes how the C++ producer can
		be configured to apply extra static checks or to support various
		dialects of C++.
		In all cases the default behaviour is precisely that specified in
		the ISO C++ standard with no extra checks.</para>

	<section>
		<title>Configuration files</title>

		<para>Certain very basic configuration information is specified using a
			<link linkend="portabilitytable">portability table</link>, which
			may be specified to the producer using a <code>-n</code> option.
			The syntax for this file is documented by &portability.5;</para>

		<!-- TODO: mention charset.5 here -->

		<!-- TODO: mention that &tcc; is typically responsible for providing these -->
	</section>

	<section id="low">
		<title>Low level configuration</title>

		<para>The primary method of configuration is by means of <code>#pragma</code>
			directives.
			These directives may be placed within the program itself, however
			it is generally more convenient to group them into a
			start-up file in order to create a
			user-defined compilation profile (see the <option>-X</option>
			option for &tcc;).
			The <code>#pragma</code> directives recognised by the C++ producer
			have one of the equivalent forms:</para>

		<programlisting language="cpp">#pragma TenDRA ....
#pragma TenDRA++ ....</programlisting>

		<para>Some of these are common to the C and C++ producers (although
			often with differing default behaviour).
			The C producer will ignore any <code>TenDRA++</code> directives, so
			these may be used in compilation profiles which are to be used by
			both producers.
			In the descriptions below, the presence of a <code>++</code> is
			used to indicate a directive which is C++ specific; the other
			directives are common to both producers.</para>

		<para>Within the description of the <code>#pragma</code> syntax,
			<emphasis>on</emphasis> stands for <code>on</code>,
			<code>off</code> or <code>warning</code>, <emphasis>allow</emphasis>
			stands for <code>allow</code>, <code>disallow</code> or <code>warning</code>,
			<emphasis>string-literal</emphasis> is any string literal,
			<emphasis>integer-literal</emphasis> is any integer literal,
			<emphasis>identifier</emphasis> is any simple, unqualified identifier name,
			and <emphasis>type-id</emphasis> is any type identifier.
			Other syntactic items are described in the text.
			A complete grammar for the <code>#pragma</code>
			directives accepted by the C++ producer is given in &pragmatoken.doc;.</para>

	<!-- TODO: merged in content -->
		<para>The simplest level of configuration is to reset the severity level
			of a particular error message using:</para>

		<programlisting language="cpp">#pragma TenDRA++ error <emphasis>string-literal on</emphasis>
#pragma TenDRA++ error <emphasis>string-literal allow</emphasis></programlisting>

		<para>The given <emphasis>string-literal</emphasis> should name an error from the
			&make_err; error catalogue.	A severity of <code>on</code>
			or <code>disallow</code> indicates that the associated diagnostic
			message should be an error, which causes the compilation to fail.
			A severity of
			<code>warning</code> indicates that the associated diagnostic message
			should be a warning, which is printed but allows the compilation to
			continue.	A severity of <code>off</code> or <code>allow</code>
			indicates that the associated error should be ignored.	Reducing the
			severity of any error from its default value, other than via one of
			the dialect directives described in this section, results in undefined
			behaviour.</para>

		<para>The next level of configuration is to reset the severity level of
			a particular compiler option using:</para>

		<programlisting language="cpp">#pragma TenDRA++ option <emphasis>string-literal on</emphasis>
#pragma TenDRA++ option <emphasis>string-literal allow</emphasis></programlisting>

		<para>The given <emphasis>string-literal</emphasis> should name an option from the option
			catalogue.	The simplest form of compiler option just sets the severity
			level of one or more error messages.	Some of these options may require
			additional processing to be applied.</para>

		<para>It is possible to link a particular error message to a particular
			compiler option using:</para>

		<programlisting language="cpp">#pragma TenDRA++ error <emphasis>string-literal</emphasis> as option <emphasis>string-literal</emphasis></programlisting>

		<para>Note that the directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ use error <emphasis>string-literal</emphasis></programlisting>

		<para>can be used to raise a given error at any point in a translation unit
			in a similar fashion to the <code>#error</code> directive.	The values
			of any parameters for this error are unspecified.</para>

		<para>The directives just described give the primitive operations on error
			messages and compiler options.	Many of the remaining directives in
			this section are merely higher level ways of expressing these primitives.</para>
	</section>

	<section id="scope">
		<title>Scoping options</title>

		<!-- TODO: tchk text: -->

		<para>A new checking scope may be started by inserting the pragma:</para>

		<programlisting language="c">#pragma TenDRA begin</programlisting>

		<para>at the outermost level. The scope runs until the matching:</para>

		<programlisting language="c">#pragma TenDRA end</programlisting>

		<para>directive, or to the end of the translation unit (the ISO C
			standard definition of a translation unit as being a source file,
			together with any headers or source files included using the
			<code>#include</code> preprocessing directive, less any source
			lines skipped by any of the conditional inclusion preprocessing
			directives, is used throughout this document).</para>

		<para>Checking scopes may be nested in the obvious way.</para>

		<para>Each new checking scope inherits its initial set of checks from
			the checking scope which immediately contains it (this includes the
			implicit main checking scope consisting of the entire source file).
			Any checks switched on or off within the scope apply only to that
			scope and any scope it contains. The set of checks applied reverts
			to its previous state at the end of a scope. Thus, for example:</para>

		<programlisting language="c">#pragma TenDRA variable analysis on
/* Variable analysis is on here */

#pragma TenDRA begin
#pragma TenDRA variable analysis off
	/* Variable analysis is off here */
#pragma TenDRA end

/* Variable analysis is on again here */</programlisting>

		<para>Once a check has been set any attempt to change its status
			within the same scope is flagged as an error. If checks need
			to be switched on and off in the same source file, they must
			be properly scoped. The built-in compilation modes have the
			entire source file as their scope.</para>

		<para>The method of applying different checking profiles to different
			parts of a program clearly needs to take into account those
			properties of C which can circumvent such scoping. Consider for
			example:</para>

		<programlisting language="c">#pragma TenDRA begin
#pragma TenDRA unknown escape allow
#define STRING "hello\!"
#pragma TenDRA end

char * f () {
	return ( STRING ) ;
}</programlisting>

		<para>The macro <code>STRING</code> is defined in an area where
			unknown escape sequences, such as <code>\!,</code> are allowed,
			but it is expanded in an area where they are not allowed (this
			is the default setting). The conventional approach to macro
			expansion would lead to the unknown escape sequence being
			flagged as an error, even though the user probably intended to
			avoid this. The checker therefore expands all macros using the
			checking profile in which they were defined, rather than the
			current checking scope.</para>

		<para>The directives describing the user's desired checking profile
			could be included directly in the program itself, ideally in some
			configuration file which is <code>#include</code>'d in all source
			files. It is however perhaps more appropriate to store the directives as a
			startup file, <emphasis>file</emphasis> say, which is passed to the checker
			using the <code>-f</code><emphasis>file</emphasis>command line option. It
			should be noted that user-defined compilation modes are defined on
			top of a built-in mode base (normally Xc, the default mode). It is
			therefore important to scope the new checking profile as described
			above.</para>

		<para>Names may be associated with checking scopes by using an
			alternative form of the begin directive:</para>

		<programlisting language="c">#pragma TenDRA begin name environment identifier</programlisting>

		<para>where identifier is any valid C identifier. Thereafter a
			statement of the form:</para>

		<programlisting language="c">#pragma TenDRA use environment identifier</programlisting>

		<para>changes the current checking environment to the environment
			associated with identifier.</para>

		<para>Sometimes it may be desirable to use different checking profiles
			for different parts of a translation unit, e.g. applying less
			strict checks to any system headers which may be included. The
			checker can be configured to apply a named checking scope,
			<emphasis>env_name</emphasis>, to any files included from a
			directory which has been named <emphasis>dir_name</emphasis>, using:</para>

		<programlisting language="c">#pragma TenDRA directory <emphasis>dir_name</emphasis> use environment <emphasis>env_name</emphasis></programlisting>

		<para>The directory name must be passed to the checker using the
			<code>-N</code> <emphasis>dir_name</emphasis> <code>:</code>
			<emphasis>dir</emphasis> <code>-I</code> <code>dir</code>
			command line option. This is equivalent to the usual
			<code>-Idir</code> option for specifying include paths, except that it
			also attaches the name dir_name to the directory.</para>

		<!-- TODO: tcpplus text: -->

		<para>Most compiler options are scoped.	A checking scope may be defined
			by enclosing a list of declarations within:</para>

		<programlisting language="cpp">#pragma TenDRA begin
....
#pragma TenDRA end</programlisting>

		<para>If the final <code>end</code> directive is omitted then the scope
			ends at the end of the translation unit.	Checking scopes may be nested
			in the obvious way.	A checking scope inherits its initial set of
			checks from its enclosing scope (this includes the implicit main checking
			scope consisting of the entire input file).	Any checks switched on
			or off within a scope apply only to the remainder of that scope and
			any scope it contains.	A particular check can only be set once in
			a given scope. The set of applied checks reverts to its previous state
			at the end of the scope.</para>

		<para>A checking scope can be named using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA begin name environment <emphasis>identifier</emphasis>
....
#pragma TenDRA end</programlisting>

		<para>Checking scope names occupy a namespace distinct from any other namespace
			within the translation unit.	A named scope defines a set of modifications
			to the current checking scope.	These modifications may be reapplied
			within a different scope using:</para>

		<programlisting language="cpp">#pragma TenDRA use environment <emphasis>identifier</emphasis></programlisting>

		<para>The default behaviour is not to allow checks set in the named checking
			scope to be reset in the current scope.	This can however be modified
			using:</para>

		<programlisting language="cpp">#pragma TenDRA use environment <emphasis>identifier</emphasis> reset <emphasis>allow</emphasis></programlisting>

		<para>Another use of a named checking scope is to associate a checking scope
			with a named include file directory.	This is done using:</para>

		<programlisting language="cpp">#pragma TenDRA directory <emphasis>identifier</emphasis> use environment <emphasis>identifier</emphasis></programlisting>

		<para>where the directory name is one introduced via a
			<code>-N</code> command-line option.
			The effect of this directive, if a <code>#include</code> directive
			is found to resolve to a file from the given directory, is as if the
			file was enclosed in directives of the form:</para>

		<programlisting language="cpp">#pragma TenDRA begin
#pragma TenDRA use environment <emphasis>identifier</emphasis> reset allow
....
#pragma TenDRA end</programlisting>

		<para>The checks applied to the expansion of a macro definition are those
			from the scope in which the macro was defined, not that in which it
			was expanded. The macro arguments are checked in the scope in which
			they are specified, that is to say, the scope in which the macro is
			expanded.	This enables macro definitions to remain localised with
			respect to checking scopes.</para>
	</section>

</chapter>

