<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuration for statements</title>

	<section id="for">
		<title>For statements</title>

		<para>In ISO C++ the scope of a variable declared in a for-init-statement
			is the body of the <code>for</code> statement; in older dialects it
			extended to the end of the enclosing block.	So:</para>

		<programlisting language="cpp">for ( int i = 0 ; i &lt; 10 ; i++ ) {
	// for statement body
}
return i ;	// OK in older dialects, error in ISO C++</programlisting>

		<para>This behaviour is controlled by the directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ for initialization block <emphasis>on</emphasis></programlisting>

		<para>a state of <code>on</code> corresponding to the ISO rules and
			<code>off</code> to the older rules.	Perhaps most useful is the
			<code>warning</code> state which implements the old rules but gives
			a warning if a variable declared in a for-init-statement is used outside
			the corresponding <code>for</code> statement body.	A program which
			does not give such warnings should compile correctly under either
			set of rules.</para>
	</section>

</chapter>

