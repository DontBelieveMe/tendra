<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuration for types</title>

	<section id="portabilitytable">
		<title>The Portability Table</title>

		<para>The portability table is used by the checker to describe the
			minimum assumptions about the representation of the integral
			types. It contains information on the minimum integer sizes and
			the minimum range of values that can be represented by each
			integer type,
			the <link linkend="char">sign of plain <code>char</code></link>,
			and whether signed types can be assumed to be symmetric
			(for example, [-127,127]) or maximum (for example, [-128,127]).
			The format for this file is documented by &tdfc2portability.5;.</para>

		<para>The minimum integer ranges are deduced from the minimum integer
			sizes as follows. Suppose <emphasis>b</emphasis> is the minimum
			number of bits that will be used to represent a certain integral
			type, then:</para>

		<itemizedlist>
			<listitem>
				<!-- TODO: mathml -->
				<para>For unsigned integer types the minimum range is [0,
					2<superscript>b</superscript>-1];</para>
			</listitem>

			<listitem>
				<para>For signed integer types if <code>signed_range</code> is
					maximum the minimum range is <code>[-2<superscript>b-1</superscript>,
					2<superscript>b-1</superscript>-1]</code>.
					Otherwise, if <emphasis>signed_range</emphasis> is symmetric the minimum range
					is <code>[-(2<superscript>b-1</superscript>-1),
					2<superscript>b-1</superscript>-1]</code>;</para>
			</listitem>

			<listitem>
				<para>For the type char which is not specified as signed or unsigned,
					if <emphasis>char_type</emphasis> is <code>signed</code> then
					<code>char</code> is treated as <code>signed</code>, if
					<emphasis>char_type</emphasis> is unsigned then <code>char</code>
					is treated as <code>unsigned</code>, and if
					<emphasis>char_type</emphasis> is <code>either</code>, the
					minimum range of <code>char</code> is the intersection of the
					minimum ranges of <code>signed char</code> and
					<code>unsigned char</code>.</para>
			</listitem>
		</itemizedlist>
	</section>

	<section>
		<title>Specifying integer literal types</title>

		<!-- TODO: really by default? isn't the built-in to have nothing? -->
		<para>By default &tdfc2; assumes that all integer ranges conform to
			the minimum ranges prescribed by the ISO C standard, i.e. char
			contains at least 8 bits, short and int contain at least 16 bits
			and long contains at least 32 bits. If the -Y32bit flag is passed
			to the checker it assumes that integers conform to the minimum
			ranges commonly found on most 32 bit machines, i.e. int contains at
			least 32 bits and int is strictly larger than short so that the
			integral promotion of unsigned short is int under the ISO C
			standard integer promotion rules.</para>

		<para>The integer literal pragmas are used to define the method of
			computing the type of an integer literal. Integer literals cannot be
			used in a program unless the class to which they belong has been
			described using an integer literal pragma. Each built-in checking mode
			includes some integer literal pragmas describing the semantics
			appropriate for that mode. If these built-in modes are inappropriate,
			then the user must describe the semantics using the pragma below:</para>

		<programlisting language="c">#pragma integer literal <emphasis>literal_class lit_class_type_list</emphasis></programlisting>

		<para>The <emphasis>literal_class</emphasis> identifies the type of literal
			integer involved. The possibilities are:</para>

		<itemizedlist>
			<listitem>
				<para><code>decimal</code></para>
			</listitem>

			<listitem>
				<para><code>octal</code></para>
			</listitem>

			<listitem>
				<para><code>hexadecimal</code></para>
			</listitem>
		</itemizedlist>

		<para>Each of these types can optionally be followed by
			<code>unsigned</code> and/or <code>long</code> to specify an
			unsigned and/or long type respectively.</para>

		<para>The values of the integer literals of any particular class are
			divided into contiguous sub-ranges specified by the
			<code>lit_class_type_list</code> which takes the form below:</para>

		<programlisting language="bnf"><emphasis>lit_class_type_list</emphasis>
	*<emphasis>int_type_spec</emphasis>
		<emphasis>integer_constant int_type_spec</emphasis> | <emphasis>lit_class_type_list</emphasis><emphasis>int_type_spec</emphasis> :
		: <emphasis>type_name</emphasis>
		* warning&opt.bnf; : <emphasis>identifier</emphasis>
		** :</programlisting>

		<para>The first integer constant, <code>i1</code> say, identifies the
			range <code>[0, i1]</code>, the second, <code>i2</code> say,
			identifies the range <code>[i1 + 1, i2]</code>. The symbol
			<code>*</code> specifies the unlimited range upwards from the last
			integer constant. Each integer constant must be strictly greater
			than its predecessor.</para>

		<para>Associated with each sub-range is an <emphasis>int_type_spec</emphasis>
			which is either a type, a procedure token identifier with an
			optional warning (see G.9) or a failure. For each sub-range:</para>

		<itemizedlist>
			<listitem>
				<para>If the <emphasis>int_type_spec</emphasis> is a type name, then it must be
					an integral type and specifies the type associated with literals in
					that sub-range.</para>
			</listitem>
			<listitem>
				<para>If the <code>int_type_spec</code> is an identifier, then the
					type of integer is computed by a procedure token of that name which
					takes the integer value as a parameter and delivers its type. The
					procedure token must have been declared previously as</para>

				<programlisting language="c">#pragma token PROC ( VARIETY ) VARIETY</programlisting>

				<para>Since the type of the integer is computed by a procedure token
					which may be implemented differently on different targets, there is
					the option of producing a warning whenever the token is
					applied.</para>
			</listitem>

			<listitem>
				<para>If the <emphasis>int_type_spec</emphasis> is <code>**</code>,
					then any integer literal lying in the associated sub-range will
					cause the checker to raise an error.</para>
			</listitem>
		</itemizedlist>

		<para>For example:</para>

		<programlisting language="c">#pragma integer literal decimal 0x7fff : int | 0x7fffffff : long | * : unsigned long</programlisting>

		<para>divides unsuffixed decimal literals into three ranges: literals
			in the range <code>[0, 0x7fff]</code> are of type <code>int</code>,
			integer literals in the range <code>[0x7fff, 0x7fffffff]</code> are
			of type <code>long</code> and the remainder are of type
			<code>unsigned long</code>.</para>

		<para>There are four pre-defined procedure tokens supplied with the
			compiler which are used in the startup files to provide the default
			specification for integer literals:</para>

		<itemizedlist>
			<listitem>
				<para><code>~lit_int</code> is the external identification of a token
					that returns the integer type according to the rules of ISO C for
					an unsuffixed decimal;</para>
			</listitem>
			<listitem>
				<para><code>~lit_hex</code> is the external identification of a token
					that returns the integer type according to the rules of ISO C for
					an unsuffixed hexadecimal;</para>
			</listitem>
			<listitem>
				<para><code>~lit_unsigned</code> is the external identification of a
					token that returns the integer type according to the rules of ISO C
					for integers suffixed by <code>U</code> only;</para>
			</listitem>
			<listitem>
				<para><code>~lit_long</code> is the external identification of a
					token that returns the integer type according to the rules of ISO C
					for integers suffixed by <code>L</code> only.</para>
			</listitem>
		</itemizedlist>
	</section>

	<section id="longlong">
		<title>Extended integral types</title>

		<para>The <code>long long</code> integral types are not part of ISO C or
			C++ by default, however support for them can be enabled using the
			directive:</para>

		<programlisting language="cpp">#pragma TenDRA longlong type <emphasis>allow</emphasis></programlisting>

		<para>This support includes allowing <code>long long</code> in type specifiers
			and allowing <code>LL</code> and <code>ll</code> as integer literal
			suffixes.</para>

		<para>There is a further directive given by the two cases:</para>

		<programlisting language="cpp">#pragma TenDRA set longlong type : long long
#pragma TenDRA set longlong type : long</programlisting>

		<para>which can be used to control the implementation of the <code>long
			long</code> types.	Either they can be mapped to the
			default representation, which is guaranteed
			to contain at least 64 bits, or they can be mapped to the corresponding
			<code>long</code> types.</para>

		<para>Because these <code>long long</code> types are not an intrinsic part
			of C++ the implementation does not integrate them into the language
			as fully as is possible.	This is to prevent the presence or otherwise
			of <code>long long</code> types affecting the semantics of code which
			does not use them.	For example, it would be possible to extend the
			rules for the types of integer literals, integer promotion types and
			arithmetic types to say that if the given value does not fit into
			the standard integral types then the extended types are tried.	This
			has not been done, although these rules could be implemented by changing
			the definitions of the standard tokens
			used to determine these types.	By default, only the rules for arithmetic
			types involving a <code>long long</code> operand and for <code>LL</code>
			integer literals mention <code>long long</code> types.</para>
	</section>

	<section id="bitfield-types">
		<title>Bitfield types</title>

		<para>The C++ rules on bitfield types differ slightly from the C rules.
			Firstly any integral or enumeration type is allowed in a bitfield,
			and secondly the bitfield width may exceed the underlying type size
			(the extra bits being treated as padding).	These properties can be
			controlled using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA extra bitfield int type <emphasis>allow</emphasis>
#pragma TenDRA bitfield overflow <emphasis>allow</emphasis></programlisting>

		<para>respectively.</para>

		<!-- TODO: merged in content -->

		<para>The ISO C standard only allows <code>signed int</code>,
			<code>unsigned int</code> and their equivalent types as type
			specifiers in bitfields. Using the default checking profile,
			&tdfc2; raises errors for other integral types used as type
			specifiers in bitfields. This behaviour may be modified using
			the pragma:</para>

		<programlisting language="c">#pragma TenDRA extra int bitfield type <emphasis>permit</emphasis></programlisting>

		<para>where <emphasis>permit</emphasis> is one of <code>allow</code>
			(no errors raised), <code>warning</code> (allow non-int bitfields
			through with a warning) or <code>disallow</code> (raise errors
			for non-int bitfields).</para>

		<para>If non-int bitfields are allowed, the bitfield is treated as if
			it had been declared with an <code>int</code> type of the same
			signedness as the given type. The use of the type <code>char</code>
			as a bitfield type still generally causes an error, since whether a
			plain <code>char</code> is treated as <code>signed</code> or
			<code>unsigned</code> is implementation-dependent. The pragma:</para>

		<programlisting language="c">#pragma TenDRA character<emphasis> set-sign</emphasis></programlisting>

		<para>where <emphasis>set-sign</emphasis> is <code>signed</code>,
			<code>unsigned</code> or <code>either</code>, can be used to specify
			the signedness of a plain <code>char</code> bitfield. If
			<emphasis>set-sign</emphasis> is <code>signed</code> or
			<code>unsigned</code>, the bitfield is treated as though it were
			declared <code>signed char</code> or <code>unsigned char</code>
			respectively. If <emphasis>set-sign</emphasis> is
			<code>either</code>, the sign of the bitfield is target-dependent
			and the use of a plain <code>char</code> bitfield causes an
			error.</para>
	</section>

	<section id="typedef">
		<title>Type declarations</title>

		<para>C does not allow multiple definitions of a <code>typedef</code> name,
			whereas C++ allows multiple consistent definitions.	This behaviour
			can be controlled using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA extra type definition <emphasis>allow</emphasis></programlisting>

		<!-- TODO: merged in content -->

		<para>In accordence with the ISO C standard, in default mode &tdfc2; does
			not allow a type to be defined more than once using a
			<code>typedef</code>. The pragma:</para>

		<programlisting language="c">#pragma TenDRA extra type definition <emphasis>permit</emphasis></programlisting>

		<para>where <emphasis>permit</emphasis> is <code>allow</code>
			(silently accepts redefinitions, provided they are consistent),
			<code>warning</code> or <code>disallow</code>.</para>
	</section>

	<section id="compatible">
		<title>Type compatibility</title>

		<para>The directive:</para>

		<programlisting language="cpp">#pragma TenDRA incompatible type qualifier <emphasis>allow</emphasis></programlisting>

		<para>allows objects to be redeclared with different cv-qualifiers (normally
			such redeclarations would be incompatible).	The composite type is
			qualified using the join of the cv-qualifiers in the various redeclarations.</para>

		<para>The directive:</para>

		<programlisting language="cpp">#pragma TenDRA compatible type : <emphasis>type-id</emphasis> == <emphasis>type-id</emphasis> : <emphasis>allow</emphasis></programlisting>

		<para>asserts that the given two types are compatible.	Currently the only
			implemented version is <code>char * == void *</code> which enables
			<code>char *</code> to be used as a generic pointer as it was in older
			dialects of C.</para>
	</section>

	<section id="complete">
		<title>Incomplete types</title>

		<para>Some dialects of C allow incomplete arrays as member types.	These
			are generally used as a place-holder at the end of a structure to
			allow for the allocation of an arbitrarily sized array.	Support for
			this feature can be enabled using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA incomplete type as object type <emphasis>allow</emphasis></programlisting>

		<!-- TODO: merged-in content -->

		<para>The ISO C standard (Section 6.1.2.5) states that an incomplete
			type e.g an undefined structure or union type, is not an object
			type and that array elements must be of object type. The default
			behaviour of the checker causes errors when incomplete types are
			used to specify array element types. The pragma:</para>

		<programlisting language="c">#pragma TenDRA incomplete type as object type <emphasis>permit</emphasis></programlisting>

		<para>can be used to alter the treatment of array declarations with
			incomplete element types. <emphasis>permit</emphasis> is one of
			<code>allow</code>, <code>disallow</code> or <code>warning</code>
			as usual.</para>
	</section>

	<section>
		<title>Built-in types</title>

		<para>The definitions of
			implementation dependent integral types which arise naturally
			within the language - the type of the difference of two pointers,
			<code>ptrdiff_t</code>, and the type of the <code>sizeof</code>
			operator, <code>size_t</code> - given in the <code>&lt;stddef.h&gt;</code>
			header can be overridden using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA set ptrdiff_t : <emphasis>type-id</emphasis>
#pragma TenDRA set size_t : <emphasis>type-id</emphasis></programlisting>

		<para>These directives are useful when targeting a specific machine on which
			the definitions of these types are known; while they may not affect
			the code generated they can cut down on spurious conversion warnings.
			Note that although these types are built into the producer they are
			not visible to the user unless an appropriate header is included (with
			the exception of the keyword <code>wchar_t</code> in ISO C++), however
			the directives:</para>

		<programlisting language="cpp">#pragma TenDRA++ type <emphasis>identifier</emphasis> for <emphasis>type-name</emphasis></programlisting>

		<para>can be used to make these types visible.	They are equivalent to a
			<code>typedef</code> declaration of <emphasis>identifier</emphasis> as the given
			built-in type, <code>ptrdiff_t</code>, <code>size_t</code> or
			<code>wchar_t</code>.</para>
	</section>

	<section>
		<title>Sign of <code>char</code></title>

		<para>Whether plain <code>char</code> is signed or unsigned is implementation
			dependent.	By default the implementation is determined by the definition
			of the <code>~char</code> token, however
			this can be overridden in the producer either by means of the
			<link linkend="portabilitytable">portability table</link> or by the directive:</para>

			<programlisting language="cpp">#pragma TenDRA character <emphasis>character-sign</emphasis></programlisting>

		<para>where <emphasis>character-sign</emphasis> can be <code>signed</code>,
			<code>unsigned</code> or <code>either</code> (the default).	Again
			this directive is useful primarily when targeting a specific machine
			on which the signedness of <code>char</code> is known.</para>
	</section>

</chapter>

