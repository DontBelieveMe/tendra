<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuration for lexical analysis</title>

	<section id="lex">
		<title>Lexical analysis</title>

		<para>During lexical analysis, a source file which is not empty should end
			in a newline character.	It is possible to relax this constraint using
			the directive:</para>

		<programlisting language="cpp">#pragma TenDRA no nline after file end <emphasis>allow</emphasis></programlisting>
	</section>

	<section id="keyword">
		<title>Keywords</title>

		<para>In several places in this section it is described how to introduce
			keywords for TenDRA language extensions.	By default, no such extra
			keywords are defined.	There are also low-level directives for defining
			and undefining keywords.	The directive:</para>

			<programlisting language="cpp">#pragma TenDRA++ keyword <emphasis>identifier</emphasis> for keyword <emphasis>identifier</emphasis></programlisting>

		<para>can be used to introduce a keyword (the first identifier) standing
			for the standard C++ keyword given by the second identifier.	The
			directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ keyword <emphasis>identifier</emphasis> for operator <emphasis>operator</emphasis></programlisting>

		<para>can similarly be used to introduce a keyword giving an alternative
			representation for the given operator or punctuator, as, for example,
			in:</para>

		<programlisting language="cpp">#pragma TenDRA++ keyword and for operator &amp;&amp;</programlisting>

		<para>Finally the directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ undef keyword <emphasis>identifier</emphasis></programlisting>

		<para>can be used to undefine a keyword.</para>
	</section>

	<section id="comment">
		<title>Nested comments</title>

		<para>C-style comments do not nest.	The directive:</para>

		<programlisting language="cpp">#pragma TenDRA nested comment analysis <emphasis>on</emphasis></programlisting>

		<para>enables a check for the characters <code>/*</code> within C-style
			comments.</para>

		<!-- TODO: merged in content -->

		<para>The occurence of the <code>/*</code> characters inside a C
			comment, i.e. text surrounded by the <code>/*</code> and
			<code>*/</code> symbols, is usually a mistake and can lead to the
			termination of a comment unexpectedly. By default such nested
			comments are processed silently, however an error or warning can be
			produced by setting:</para>

		<programlisting language="c">#pragma TenDRA nested comment analysis <emphasis>status</emphasis></programlisting>

		<para>with <emphasis>status</emphasis> as <code>on</code> or
			<code>warning</code>. If <emphasis>status</emphasis> is
			<code>off</code> the default behaviour is restored.</para>
	</section>

	<section id="lex-identifier-names">
		<title>Identifier names</title>

		<para>During lexical analysis, each character in the source file has an
			associated look-up value which is used to determine whether the character
			can be used in an identifier name, is a white space character etc.
			These values are stored in a simple look-up table.	It is possible
			to set the look-up value using:</para>

		<programlisting language="cpp">#pragma TenDRA++ character <emphasis>character-literal</emphasis> as <emphasis>character-literal</emphasis> allow</programlisting>

		<para>which sets the look-up for the first character to be the default look-up
			for the second character.	The form:</para>

		<programlisting language="cpp">#pragma TenDRA++ character <emphasis>character-literal</emphasis> disallow</programlisting>

		<para>sets the look-up of the character to be that of an invalid character.
			The forms:</para>

		<programlisting language="cpp">#pragma TenDRA++ character <emphasis>string-literal</emphasis> as <emphasis>character-literal</emphasis> allow
#pragma TenDRA++ character <emphasis>string-literal</emphasis> disallow</programlisting>

		<para>can be used to modify the look-up values for the set of characters
			given by the string literal.	For example:</para>

		<programlisting language="cpp">#pragma TenDRA character '$' as 'a' allow
#pragma TenDRA character '\r' as ' ' allow</programlisting>

		<para>allows <code>$</code> to be used in identifier names (like <code>a</code>)
			and carriage return to be a white space character.	The former is
			a common dialect feature and can also be controlled by the directive:</para>

		<programlisting language="cpp">#pragma TenDRA dollar as ident <emphasis>allow</emphasis></programlisting>

		<!-- TODO: merged in content -->

		<para>The ISO C standard (Section 6.1) states that the use of the character
			<code>$</code> in identifier names is illegal. The pragma:</para>

		<programlisting language="c">#pragma TenDRA dollar as ident allow</programlisting>

		<para>can be used to allow such identifiers, which by default are flagged
			as errors. There is also a <code>disallow</code> variant which restores
			the default behaviour.</para>
	</section>

	<section>
		<title>Identifier name length</title>

		<para>Under the ISO C standard rules on identifier name length, an
			implementation is only required to treat the first 31 characters
			of an internal name and the first 6 characters of an external name
			as significant. The TenDRA C checker provides a facility for users
			to specify the maximum number of characters allowed in an identifier
			name, to prevent unexpected results when the application is moved to
			a new implementation.</para>

		<para>The maximum number of characters allowed in an identifier name can
			be set using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA set name limit <emphasis>integer-literal</emphasis>
#pragma TenDRA++ set name limit <emphasis>integer-literal</emphasis> warning</programlisting>

		<para>This length is given by the <code>name_limit</code> implementation
			quantity <link linkend="limits">mentioned above</link>.	Identifiers which exceed this
			length raise an error or a warning, but are not truncated.</para>

		<!-- TODO: merged in content -->

		<programlisting language="c">#pragma TenDRA set name limit <emphasis>integer_constant</emphasis></programlisting>

		<para>There is currently no distinction made between external and
			internal names for length checking. Identifier name lengths are not
			checked in the default mode.</para>
	</section>

</chapter>

