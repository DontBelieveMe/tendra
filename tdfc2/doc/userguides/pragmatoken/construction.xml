<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Program construction using &tdf;</title>

	<para>Traditional program construction using the C language has two
		phases: compilation and linking.</para>

	<para>In the compilation phase the source text written in the C
		language is mapped to an object code format. This object code is
		generally not complete in itself and must be linked with other
		program segments such as definitions from the system libraries.</para>

	<para>When tokens are involved there is an extra stage in the
		construction process where undefined tokens in one program segment
		are linked with their definitions in another program segment. To
		summarise, program construction using &tdf; and the TenDRA tools has
		four basic operations:</para>

	<variablelist>
		<varlistentry>
			<term>Source file compilation to &tdf;</term>

			<listitem>
				<para>The &tdf; produced may be
					incomplete in the sense that it may contain undefined tokens;</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>&tdf; linking</term>

			<listitem>
				<para>The undefined tokens represented in &tdf; are linked
					to their definitions in other compilation modules or libraries.
					During linking, tokens with the same identifier are treated as the
					same token;</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>&tdf; translation</term>

			<listitem>
				<para>This is the conversion of &tdf; into standard
					object file format for a particular machine system. The program is
					still incomplete at this stage in the sense that it may contain
					undefined library functions;</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Object file linking</term>

			<listitem>
				<para>This corresponds directly to standard
					object file linking.</para>
			</listitem>
		</varlistentry>
	</variablelist>
</chapter>

