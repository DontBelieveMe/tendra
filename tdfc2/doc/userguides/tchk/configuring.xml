<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuring the Checker</title>

	<para>This section describes the built-in checking modes and the design
		of customised environments.</para>

	<para>There are several methods available for configuring the checker.
		Most configuration is provided by built-in "modes" which are selected
		by using the relevant <code>-X</code> command line option for &tcc.1;.
		These modes are documented by &tccmodes.5;.</para>

	<para>More detailed customisation may require special
		<code>#pragma</code> statements to be incorporated into the source
		code to be analysed (this commonly takes the form of a startup
		file). The configuration options generally act independently of one
		another and unless explicitly forbidden in the descriptions below,
		they may be combined in any way.</para>

	<section>
		<title>Individual command line checking options</title>

		<para>Some of the checks available can be controlled using a command
			line option of the form <code>-Xopt,opt,...</code>, where the various
			opt options give a comma-separated list of commands. These commands
			have the form test=status, where test is the name of the check, and
			status is either check (apply check and give an error if it fails),
			warn (apply check and give a warning if it fails) or dont (do not
			apply check). The names of checks can be found with their
			descriptions in Chapters 3 - 8; for example the check for implicit
			function declarations described in 3.4.1 may be switched on using
			<code>-X:implicit_func=check</code>.</para>

		<para>The command line options for portability checking are:</para>

		<table>
			<title>Command Line Options</title>

			<col align="left"/>
			<col align="center"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Check</th>
					<th>Reference</th>	<!-- TODO make link -->
					<th>Command Line Option</th>
				</tr>
			</thead>

			<!-- TODO normalise title case with other tables -->
			<!-- TODO check harr and not rarr -->
			<tbody>
				<tr>
					<td>Weak Prototype Analysis</td>
					<td>3.3.1</td>
					<td><code>-X:weak_proto=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Implicit Function Declaration</td>
					<td>3.4</td>
					<td><code>-X:implicit_func=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Printf String Checking</td>
					<td>3.2.2</td>
					<td><code>-X:printf=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Incompatible Void Returns</td>
					<td>3.2.2</td>
					<td><code>-X:void_ret=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Unreachable Code</td>
					<td>5.2</td>
					<td><code>-X:unreached=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Case Fall Through</td>
					<td>5.3</td>
					<td><code>-X:fall_thru=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Conversion Analysis</td>
					<td>3.2</td>
					<td><code>-X:convert_all=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td rowspan="3">Integer &harr; Integer Conversion</td>
					<td rowspan="3">3.2.1</td>
					<td><code>-X:convert_int=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td><code>-X:convert_int_implicit=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td><code>-X:convert_int_explicit=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Integer &harr; Pointer Conversion</td>
					<td>3.2.2</td>
					<td><code>-X:convert_int_ptr=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Integer &harr; Pointer Conversion</td>
					<td>3.2.3</td>
					<td><code>-X:convert_ptr=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Complete&nbsp;<code>struct</code>/<code>union</code>&nbsp;Analysis</td>
					<td>8.3</td>
					<td><code>-X:complete_struct=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Variable Analysis</td>
					<td>5.6</td>
					<td><code>-X:variable=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Discard Analysis</td>
					<td>5.8</td>
					<td><code>-X:discard_all=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Discarded Function Returns</td>
					<td>5.8.1</td>
					<td><code>-X:discard_func_ret=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Discarded Values</td>
					<td>5.8.2</td>
					<td><code>-X:discard_value=<emphasis>status</emphasis></code></td>
				</tr>

				<tr>
					<td>Unused Statics</td>
					<td>5.8.3</td>
					<td><code>-X:unused_static=<emphasis>status</emphasis></code></td>
				</tr>
			</tbody>
		</table>

		<para>where <emphasis>status</emphasis> can be <code>check</code>,
			<code>warn</code> or <code>dont</code>.</para>
	</section>

	<section>
		<title>Customising checking profiles</title>

		<para>The individual checks performed by the C static checker are
			generally controlled by <code>#pragma</code> directives. The reason
			for this is that the ISO standard places no restrictions on the syntax
			following a <code>#pragma</code> preprocessing directive, and most
			compilers/checkers can be configured to ignore any unknown
			<code>#pragma</code> directives they encounter.</para>

		<para>Most of these directives begin:</para>

		<programlisting language="c">#pragma TenDRA ...</programlisting>

		<para>and are always checked for syntactical correctness. The individual
			directives, together with the checks they control are described in
			Chapters 3 - 8. Section 2.2 describes the method of constructing a
			new checking profile from these individual checks.</para>
	</section>

	<section>
		<title>Scoping checking profiles</title>

		<para>Almost all the available checks are scoped (exceptions will be
			mentioned in the description of the check). Scopes may be controlled
			by the same <code>#pragma TenDRA begin</code>
			directive described by the &tcpplus-userguide.doc;.</para>
	</section>
</chapter>

