<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Intermodular checks</title>

	<para>All the checks discussed in earlier chapters have been concerned
		with a single source file. However, tchk also contains a linking
		phase in which it is able to perform intermodular checks (i.e.
		checks between source files). In the linking phase, the files
		generated from each translation unit processed are combined into a
		single file containing information on all external objects
		within the application, and type consistency checks are applied to
		ensure that the definitions and declarations of each object are
		consistent and external objects and functions have at most one
		definition.</para>

	<para>There are two types of file provided by &tdfc2; for analysis;
		symbol table dump files and C++ spec files.</para>

	<section>
		<title>Linking symbol table dump files</title>

		<para>The amount of information about an object stored in a dump file
			depends on the compilation mode used to produce that file. For
			example, if extra prototype checks are enabled (see section 3.3),
			the dump file contains any information inferred about a function
			from its traditional style definition or from applications of that
			function. For example, if one file contains:</para>

		<programlisting language="c">extern void f () ;
void g ()
{
	f ( "hello" ) ;
}</programlisting>

		<para>and another contained:</para>

		<programlisting language="c">void f ( n )
int n ;
{
	return ;
}</programlisting>

		<para>then the inferred prototype:</para>

		<programlisting language="c">void f WEAK ( char * ) ;</programlisting>

		<para>from the call of <code>f</code> would be included in the first
			dump file, whereas the weak prototype deduced from the definition
			of <code>f</code>:</para>

		<programlisting language="c">void f WEAK ( int ) ;</programlisting>

		<para>would be included in the second. When these two dump files are
			linked, the inconsistency is discovered and an error is
			reported.</para>
	</section>

	<section>
		<title>Linking C++ spec files</title>

		<warning>
			<para>The C++ spec linking routines have not yet been completely implemented,
					and so are disabled in the current version of the C++ producer.</para>
		</warning>

		<para>A C++ spec file is a dump of the C++ producer's internal
			representation of a translation unit.  Such files can be written
			to, and read from, disk to perform such operations as intermodule
			analysis.</para>

		<para>Note that the format of a C++ spec file is specific to the C++ producer
			and may change between releases to reflect modifications in the internal
			type system.  The C producer has a similar dump format, called a C
			spec file, however the two are incompatible.  If intermodule analysis
			between C and C++ source files is required then the &tdfcdump.5; symbol
			table dump format should be used.</para>
	</section>
</chapter>

