<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Scalar types</title>

	<section id="arith">
		<title>Arithmetic types</title>

		<para>The representations of the basic arithmetic types are target dependent,
			so, for example, an <code>int</code> may contain 16, 32, 64 or some
			other number of bits.  Thus it is necessary to introduce a token to
			stand for each of the built-in arithmetic types (including the
			<code>long long</code> types).
			Each integral type is represented by a <code>VARIETY</code> token
			as follows:</para>

		<table>
			<col align="left"/>
			<col align="left"/>
			<col align="left"/>
			<col align="center"/>
			<col align="right"/>

			<thead>
				<tr>
					<th>Type</th>
					<th>Token</th>
					<th colspan="3" align="center">Encoding</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>char</code></td>
					<td><code>~char</code></td>
					<td role="breakdown"/>
					<td role="equals"/>
					<td role="result noequals">0</td>
				</tr>

				<tr>
					<td><code>signed char</code></td>
					<td><code>~signed_char</code></td>
					<td role="breakdown">0 | 4</td>
					<td role="equals">=</td>
					<td role="result">4</td>
				</tr>

				<tr>
					<td><code>unsigned char</code></td>
					<td><code>~unsigned_char</code></td>
					<td role="breakdown">0 | 8</td>
					<td role="equals">=</td>
					<td role="result">8</td>
				</tr>

				<tr>
					<td><code>signed short</code></td>
					<td><code>~signed_short</code></td>
					<td role="breakdown">1 | 4</td>
					<td role="equals">=</td>
					<td role="result">5</td>
				</tr>

				<tr>
					<td><code>unsigned short</code></td>
					<td><code>~unsigned_short</code></td>
					<td role="breakdown">1 | 8</td>
					<td role="equals">=</td>
					<td role="result">9</td>
				</tr>

				<tr>
					<td><code>signed int</code></td>
					<td><code>~signed_int</code></td>
					<td role="breakdown">2 | 4</td>
					<td role="equals">=</td>
					<td role="result">6</td>
				</tr>

				<tr>
					<td><code>unsigned int</code></td>
					<td><code>~unsigned_int</code></td>
					<td role="breakdown">2 | 8</td>
					<td role="equals">=</td>
					<td role="result">10</td>
				</tr>

				<tr>
					<td><code>signed long</code></td>
					<td><code>~signed_long</code></td>
					<td role="breakdown">3 | 4</td>
					<td role="equals">=</td>
					<td role="result">7</td>
				</tr>

				<tr>
					<td><code>unsigned long</code></td>
					<td><code>~unsigned_long</code></td>
					<td role="breakdown">3 | 8</td>
					<td role="equals">=</td>
					<td role="result">11</td>
				</tr>

				<tr>
					<td><code>signed long long</code></td>
					<td><code>~signed_longlong</code></td>
					<td role="breakdown">3 | 4 | 16</td>
					<td role="equals">=</td>
					<td role="result">23</td>
				</tr>

				<tr>
					<td><code>unsigned long long</code></td>
					<td><code>~unsigned_longlong</code></td>
					<td role="breakdown">3 | 8 | 16</td>
					<td role="equals">=</td>
					<td role="result">27</td>
				</tr>
			</tbody>
		</table>

		<para>Similarly each floating point type is represent by a
			<code>FLOATING_VARIETY</code> token:</para>

		<table>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Type</th>
					<th>Token</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>float</code></td>
					<td><code>~float</code></td>
				</tr>

				<tr>
					<td><code>double</code></td>
					<td><code>~double</code></td>
				</tr>

				<tr>
					<td><code>long double</code></td>
					<td><code>~long_double</code></td>
				</tr>
			</tbody>
		</table>

		<para>Each integral type also has an encoding as a <code>SIGNED_NAT</code>
			as shown above.  This number is a bit pattern built up from the following
			values:</para>

		<table>
			<col align="left"/>
			<col align="center"/>

			<thead>
				<tr>
					<th>Type</th>
					<th>Encoding</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>char</code></td>
					<td>0</td>
				</tr>

				<tr>
					<td><code>short</code></td>
					<td>1</td>
				</tr>

				<tr>
					<td><code>int</code></td>
					<td>2</td>
				</tr>

				<tr>
					<td><code>long</code></td>
					<td>3</td>
				</tr>

				<tr>
					<td><code>signed</code></td>
					<td>4</td>
				</tr>

				<tr>
					<td><code>unsigned</code></td>
					<td>8</td>
				</tr>

				<tr>
					<td><code>long long</code></td>
					<td>16</td>
				</tr>
			</tbody>
		</table>

		<para>Any target dependent integral type can be represented by a
			<code>SIGNED_NAT</code> token using this encoding.  This representation,
			rather than one based on <code>VARIETY</code>s, is used for ease of
			manipulation.  The token:</para>

		<programlisting language="tdf">~convert : ( SIGNED_NAT ) -&gt; VARIETY</programlisting>

		<para>gives the mapping from the integral encoding to the representing variety.
			For example, it will map <code>6</code> to <code>~signed_int</code>.</para>

		<para>The token:</para>

		<programlisting language="tdf">~promote : ( SIGNED_NAT ) -&gt; SIGNED_NAT</programlisting>

		<para>describes how to form the promotion of an integral type according
			to the ISO C/C++ value preserving rules, and is used by the producer
			to represent target dependent promotion types.  For example, the promotion
			of <code>unsigned short</code> may be <code>int</code> or <code>unsigned
			int</code> depending on the representation of these types; that is
			to say, <code>~promote ( 9 )</code> will be <code>6</code> on some
			machines and <code>10</code> on others.  Although <code>~promote</code>
			is used by default, a program may specify another token with the same
			sort signature to be used in its place by means of the directive:</para>

		<programlisting language="cpp">#pragma TenDRA compute promote <emphasis>identifier</emphasis></programlisting>

		<para>For example, a standard token <code>~sign_promote</code> is defined
			which gives the older C sign preserving promotion rules.  In addition,
			the promotion of an individual type can be specified using:</para>

		<programlisting language="cpp">#pragma TenDRA promoted <emphasis>type-id</emphasis> : <emphasis>promoted-type-id</emphasis></programlisting>

		<para>The token:</para>

		<programlisting language="tdf">~arith_type : ( SIGNED_NAT, SIGNED_NAT ) -&gt; SIGNED_NAT</programlisting>

		<para>similarly describes how to form the usual arithmetic result type from
			two promoted integral operand types.  For example, the arithmetic
			type of <code>long</code> and <code>unsigned int</code> may be
			<code>long</code> or <code>unsigned long</code> depending on the representation
			of these types; that is to say,
			<code>~arith_type ( 7, 10 )</code> will be <code>7</code> on some
			machines and <code>11</code> on others.</para>

		<para>Any tokenised type declared using:</para>

		<programlisting language="cpp">#pragma token VARIETY v # tv</programlisting>

		<para>will be represented by a <code>SIGNED_NAT</code> token with external
			name <code>tv</code> corresponding to the encoding of <code>v</code>.
			Special cases of this are the implementation dependent integral types
			which arise naturally within the language.  The external token names
			for these types are given below:</para>

		<table>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Type</th>
					<th>Token</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>bool</code></td>
					<td><code>~cpp.bool</code></td>
				</tr>

				<tr>
					<td><code>ptrdiff_t</code></td>
					<td><code>ptrdiff_t</code></td>
				</tr>

				<tr>
					<td><code>size_t</code></td>
					<td><code>size_t</code></td>
				</tr>

				<tr>
					<td><code>wchar_t</code></td>
					<td><code>wchar_t</code></td>
				</tr>
			</tbody>
		</table>

		<para>So, for example, a <code>sizeof</code> expression has shape
			<code>~convert ( size_t )</code>.  The token <code>~cpp.bool</code>
			is defined in the default implementation, but the other tokens are
			defined according to their definitions on the target machine in the
			normal API library building mechanism.</para>
	</section>

	<section id="literal">
		<title>Integer literal types</title>

		<para>The type of an integer literal is defined
			in terms of the first in a list of possible integral types.  The first
			type in which the literal value can be represented gives the type
			of the literal.  For small literals it is possible to work out the
			type exactly, however for larger literals the result is target dependent.
			For example, the literal <code>50000</code> will have type <code>int</code>
			on machines in which <code>50000</code> fits into an <code>int</code>,
			and <code>long</code> otherwise.  This target dependent mapping is given
			by a series of tokens of the form:</para>

		<programlisting language="tdf">~lit_* : ( SIGNED_NAT ) -&gt; SIGNED_NAT</programlisting>

		<para>which map a literal value to the representation of an integral type.
			The token used depends on the list of possible types, which in turn
			depends on the base used to represent the literal and the integer
			suffix used, as given in the following table:</para>

		<table>
			<col align="left"/>
			<col align="left"/>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th>Base</th>
					<th>Suffix</th>
					<th>Token</th>
					<th>Types</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td>decimal</td>
					<td role="na">(none)</td>
					<td><code>~lit_int</code></td>
					<td><code>int, long, unsigned long</code></td>
				</tr>

				<tr>
					<td>octal</td>
					<td role="na">(none)</td>
					<td><code>~lit_hex</code></td>
					<td><code>int</code>, <code>unsigned int</code>, <code>long</code>, <code>unsigned long</code></td>
				</tr>

				<tr>
					<td>hexadecimal</td>
					<td role="na">(none)</td>
					<td><code>~lit_hex</code></td>
					<td><code>int</code>, <code>unsigned int</code>, <code>long</code>, <code>unsigned long</code></td>
				</tr>

				<tr>
					<td>any</td>
					<td><code>U</code></td>
					<td><code>~lit_unsigned</code></td>
					<td><code>unsigned int</code>, <code>unsigned long</code></td>
				</tr>

				<tr>
					<td>any</td>
					<td><code>L</code></td>
					<td><code>~lit_long</code></td>
					<td><code>long<code>, </code>unsigned long</code></td>
				</tr>

				<tr>
					<td>any</td>
					<td><code>UL</code></td>
					<td><code>~lit_ulong</code></td>
					<td><code>unsigned long</code></td>
				</tr>

				<tr>
					<td>any</td>
					<td><code>LL</code></td>
					<td><code>~lit_longlong</code></td>
					<td><code>long long</code>, <code>unsigned long long</code></td>
				</tr>

				<tr>
					<td>any</td>
					<td><code>ULL</code></td>
					<td><code>~lit_ulonglong</code></td>
					<td><code>unsigned long long</code></td>
				</tr>
			</tbody>
		</table>

		<para>Thus, for example, the shape of the integer literal <code>50000</code> is:</para>

		<programlisting language="tdf">~convert ( ~lit_int ( 50000 ) )</programlisting>
	</section>

	<section id="bitfield">
		<title>Bitfield types</title>

		<para>The sign of a plain bitfield type, declared without using
			<code>signed</code> or <code>unsigned</code>, is left unspecified
			in C and C++.  The token:</para>

		<programlisting language="tdf">~cpp.bitf_sign : ( SIGNED_NAT ) -&gt; BOOL</programlisting>

		<para>is used to give a mapping from integral types to the sign of a plain
			bitfield of that type, in a form suitable for use in the TDF
			<code>bfvar_bits</code> construct.  (Note that <code>~cpp.bitf_sign</code>
			should have been a standard C token but was omitted.)</para>
	</section>

</chapter>

