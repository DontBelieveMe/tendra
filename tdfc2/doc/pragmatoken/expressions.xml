<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="exptoks">
	<title>Expression tokens</title>

	<para>There are various properties associated with expression tokens
		which are used to determine the operations that may be performed
		upon them.</para>

	<itemizedlist>
		<listitem>
			<para>Designation is the classification of the value delivered by
				evaluating the expression. The three possible designations, implied
				by the &iso; C standard, section 6.3, are:</para>

			<variablelist>
				<varlistentry>
					<term>value</term>

					<listitem>
						<para>expression describes the computation of a value;</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>object</term>

					<listitem>
						<para>expression designates a variable which may have an
							associated type qualifier giving the access conditions;</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>function designation</term>

					<listitem>
						<para>expression designates a function.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</listitem>

		<listitem>
			<para>Type specifies the type of the expression ignoring any type
				qualification;</para>
		</listitem>

		<listitem>
			<para>Constancy is the property of being a constant expression as
				specified in the &iso; C Standard section 6.4.</para>
		</listitem>
	</itemizedlist>

	<para>The syntax for introducing expression tokens is:</para>

	<programlisting language="bnf">exp-token:
	EXP <replaceable>exp-storage</replaceable> : <replaceable>type-name</replaceable> :
	NAT

exp-storage:
	rvalue
	lvalue
	const</programlisting>

	<para>Expression tokens can be introduced using either the
		<code>EXP</code> or <code>NAT</code> token introductions.
		Expression tokens introduced using <code>NAT</code> are
		constant value designations of type <code>int</code> i.e.
		they reference constant integer expressions. All other
		expression tokens are assumed to be non-constant and are
		introduced using <code>EXP</code>.</para>

	<itemizedlist>
		<listitem>
			<para>The <code>exp-storage</code> is either lvalue or rvalue. If it
				is lvalue, then the token is an object designation without type
				qualification. If it is rvalue then the token is either a value or
				a function designation depending on whether or not its type is a
				function type.</para>
		</listitem>

		<listitem>
			<para>The <replaceable>type-name</replaceable> is the type of the expression to which
				the token refers.</para>
		</listitem>
	</itemizedlist>

	<para>All internal expression token identifiers must reside in the
		macro name space and this is consequently the default name space
		for such identifiers. Hence the optional name-space,
		<code>TAG</code>, should not be present in an <code>EXP</code>
		token introduction. Although the use of an expression token after
		it has been introduced is very similar to that of an ordinary
		identifier, as it resides in the macro name space, it has the
		additional properties listed below:</para>

	<itemizedlist>
		<listitem>
			<para>expression tokens cannot be hidden by using an inner
				scope;</para>
		</listitem>

		<listitem>
			<para>with respect to <code>#ifdef</code>, expression tokens are defined;</para>
		</listitem>

		<listitem>
			<para>the scope of expression tokens can be terminated by
				<code>#undef</code>.</para>
		</listitem>
	</itemizedlist>

	<para>In order to make use of tokenised expressions, a new symbol,
		exp-token-name , has been introduced at translation phase seven
		of the syntax analysis as defined in the &iso; C standard. When an
		expression token identifier is encountered by the preprocessor,
		an <code>exp-token-name</code> symbol is passed through to the
		syntax analyser. An <code>exp-token-name</code> provides
		information about an expression token in the same way that a
		<code>typedef-name</code> provides information about a type
		introduced using a <code>typedef</code>. This symbol can only
		occur as part of a primary-expression (&iso; C standard section
		6.3.1) and the expression resulting from the use of
		<code>exp-token-name</code> will have the type, designation
		and constancy specified in the token introduction. As an
		example, consider the pragma:</para>

	<programlisting language="c">#pragma token EXP rvalue : int : x#</programlisting>

	<para>This introduces a token for an expression which is a value
		designation of type <code>int</code> with internal and external
		name <code>x</code>.</para>

	<para>Expression tokens can either be defined using <code>#define</code> statements
		or by using externals. They can also be resolved as a result of
		applying the type-resolution or assignment-resolution operators
		(see <xref linkend="typecompat"/>). Expression token definitions are subject to the
		following constraints:</para>

	<itemizedlist>
		<listitem>
			<para>if the <code>exp-token-name</code> refers to a constant
				expression (i.e. it was introduced using the NAT token
				introduction), then the defining expression must also be a constant
				expression as expressed in the &iso; C standard, section 6.4;</para>
		</listitem>

		<listitem>
			<para>if the <code>exp-token-name</code> refers to an lvalue
				expression, then the defining expression must also designate an
				object and the type of the expression token must be resolvable to
				the type of the defining expression. All the type qualifiers of the
				defining expression must appear in the object designation of the
				token introduction;</para>
		</listitem>

		<listitem>
			<para>if the <code>exp-token-name</code> refers to an expression that
				has function designation, then the type of the expression token
				must be resolvable to the type of the defining expression.</para>
		</listitem>
	</itemizedlist>

	<para>The program below provides two examples of the violation of the
		second constraint.</para>

	<programlisting language="c">#pragma token EXP lvalue : int : i#
extern short k;
#define i 6
#define i k</programlisting>

	<para>The expression token <code>i</code> is an object designation of
		type <code>int</code>. The first violation occurs because the
		expression, <code>6</code>, does not designate an object. The
		second violation is because the type of the token expression,
		<code>i</code>, is <code>int</code> which cannot be resolved to
		the type <code>short</code>.</para>

	<para>If the <replaceable>exp-token-name</replaceable> refers to an expression that
		designates a value, then the defining expression is converted, as
		if by assignment, to the type of the expression token using the
		<replaceable>assignment-resolution</replaceable> operator
		(see <xref linkend="typecompat"/>). With all other
		designations the defining expression is left unchanged. In both
		cases the resulting expression is used as the definition of the
		expression token. This can subtly alter the semantics of a program.
		Consider the program:</para>

	<programlisting language="c">#pragma token EXP rvalue:long:li#
#define li 6
int f() {
	return sizeof(li);
}</programlisting>

	<para>The definition of the token <code>li</code> causes the
		expression, <code>6</code>, to be converted to <code>long</code>
		(this is essential to separate the use of <code>li</code> from its
		definition). The function, <code>f</code>, then returns
		<code>sizeof(long)</code>. If the token introduction was absent
		however <code>f</code> would return <code>sizeof(int)</code>.</para>

	<para>Although they look similar, expression token definitions using
		<code>#defines</code> are not quite the same as macro definitions. A macro can
		be defined by any preprocessing tokens which are then computed in
		phase 3 of translation as defined in the &iso; C standard, whereas
		tokens are defined by assignment-expressions which are computed in
		phase 7. One of the consequences of this is illustrated by the
		program below:</para>

	<programlisting language="c">#pragma token EXP rvalue:int :X#
#define X M + 3
#define M sizeof(int)
int f(int x)
{
	return (x + X);
}</programlisting>

	<para>If the token introduction of <code>X</code> is absent, the
		program above will compile as, at the time the definition of
		<code>X</code> is interpreted (when evaluating <code>x + X</code>),
		both <code>M</code> and X are in scope. When the token
		introduction is present the compilation will fail as the
		definition of <code>X</code>, being part of translation phase
		7, is interpreted when it is encountered and at this stage
		<code>M</code> is not defined. This can be rectified by reversing
		the order of the definitions of <code>X</code> and <code>M</code>
		or by bracketing the definition of <code>X</code>. i.e.</para>

	<programlisting language="c">#define X (M+3)</programlisting>

	<para>Conversely consider:</para>

	<programlisting language="c">#pragma token EXP rvalue:int:X#
#define M sizeof(int)
#define X M + 3
#undef M
int M(int x) {
	return (x + X);
}</programlisting>

	<para>The definition of <code>X</code> is computed on line 3 when
		<code>M</code> is in scope, not on line 6 where it is used. Token
		definitions can be used in this way to relieve some of the
		pressures on name spaces by undefining macros that are only used in
		token definitions. This facility should be used with care as it
		may not be a straightforward matter to convert the program back
		to a conventional C program.</para>

	<para>Expression tokens can also be defined by declaring the
		<replaceable>exp-token-name</replaceable> that references the token to be
		an object with external linkage e.g.</para>

	<programlisting language="c">#pragma token EXP lvalue:int:x#
extern int x;</programlisting>

	<para>The semantics of this program are effectively the same as the
		semantics of:</para>

	<programlisting language="c">#pragma token EXP lvalue:int:x#
extern int _x;
#define x _x</programlisting>

</chapter>

