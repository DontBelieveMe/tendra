<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Configuration for literals</title>

	<section id="int">
		<title>Integer literals</title>

		<para>The rules for finding the type of an integer literal can be described
			using directives of the form:</para>

		<programlisting language="cpp">#pragma TenDRA integer literal <emphasis>literal-spec</emphasis></programlisting>

		<para>where:</para>

		<programlisting language="bnf"><emphasis>literal-spec</emphasis> :
	<emphasis>literal-base literal-suffix&opt.bnf; literal-type-list</emphasis>

<emphasis>literal-base</emphasis> :
	octal
	decimal
	hexadecimal

<emphasis>literal-suffix</emphasis> :
	unsigned
	long
	unsigned long
	long long
	unsigned long long

<emphasis>literal-type-list</emphasis> :
	* <emphasis>literal-type-spec</emphasis>
	<emphasis>integer-literal literal-type-spec</emphasis> | <emphasis>literal-type-list</emphasis>
	? <emphasis>literal-type-spec</emphasis> | <emphasis>literal-type-list</emphasis>

<emphasis>literal-type-spec</emphasis> :
	: <emphasis>type-id</emphasis>
	* <emphasis>allow&opt.bnf;</emphasis> : <emphasis>identifier</emphasis>
	* * <emphasis>allow&opt.bnf;</emphasis> :</programlisting>

		<para>Each directive gives a literal base and suffix, describing the form
			of an integer literal, and a list of possible types for literals of
			this form. This list gives a mapping from the value of the literal
			to the type to be used to represent the literal.	There are three
			cases for the literal type; it may be a given integral type, it may
			be calculated using a given literal type token (see &tdfc2-devguide.doc;),
			or it may cause an error to be raised.	There are also
			three cases for describing a literal range; it may be given by values
			less than or equal to a given integer literal, it may be given by
			values which are guaranteed to fit into a given integral type, or
			it may be match any value.	For example:</para>

		<programlisting language="cpp">#pragma token PROC ( VARIETY c ) VARIETY l_i # ~lit_int
#pragma TenDRA integer literal decimal 32767 : int | ** : l_i</programlisting>

		<para>describes how to find the type of a decimal literal with no suffix.
			Values less that or equal to 32767 have type <code>int</code>; larger
			values have target dependent type calculated using the token
			<code>~lit_int</code>.	Introducing a <code>warning</code> into the
			directive will cause a warning to be printed if the token is used
			to calculate the value.</para>

		<para>Note that this scheme extends that implemented by the C producer,
			because of the need for more accurate information in the C++ producer.
			For example, the specification above does not fully express the ISO
			rule that the type of a decimal integer is the first of the types
			<code>int</code>, <code>long</code> and <code>unsigned long</code>
			which it fits into (it only expresses the first step).	However with
			the C++ extensions it is possible to write:</para>

		<programlisting language="cpp">#pragma token PROC ( VARIETY c ) VARIETY l_i # ~lit_int
#pragma TenDRA integer literal decimal ? : int | ? : long |\
		? : unsigned long | ** : l_i</programlisting>
	</section>

	<section id="char">
		<title>Character literals</title>

		<para>By default, a simple character literal has type <code>int</code> in
			C and type <code>char</code> in C++.	The type of such literals can
			be controlled using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA++ set character literal : <emphasis>type-id</emphasis></programlisting>

		<para>The type of a wide character literal is given by the implementation
			defined type <code>wchar_t</code>.	By default, the definition of
			this type is taken from the target machine's <code>&lt;stddef.h&gt;</code>
			C header (note that in ISO C++, <code>wchar_t</code> is actually a
			keyword, but its underlying representation must be the same as in
			C). This definition can be overridden in the producer by means of
			the directive:</para>

		<programlisting language="cpp">#pragma TenDRA set wchar_t : <emphasis>type-id</emphasis></programlisting>

		<para>for an integral type <emphasis>type-id</emphasis>.</para>
	</section>

	<section id="string">
		<title>Writeable String literals</title>

		<para>By default, character string literals have type <code>char [n]</code>
			in C and older dialects of C++, but type <code>const char [n]</code>
			in ISO C++.	Similarly wide string literals have type <code>wchar_t
			[n]</code> or <code>const wchar_t [n]</code>.	Whether string literals are
			<code>const</code> or not can be controlled using the two directives:</para>

		<programlisting language="cpp">#pragma TenDRA++ set string literal : const
#pragma TenDRA++ set string literal : no const</programlisting>

		<para>In the case where literals are <code>const</code>, the array-to-pointer
			conversion is allowed to cast away the <code>const</code> to allow
			for a degree of backwards compatibility.	The status of this deprecated
			conversion can be controlled using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA writeable string literal <emphasis>allow</emphasis></programlisting>

		<para>(yes, I know that that should be <code>writable</code>).	Note that
			this directive has a slightly different meaning in the C producer.</para>

		<!-- TODO: merged in content -->

		<para>The ISO C standard, section 6.1.4, states that <quote>if the
			program attempts to modify a string literal of either form, the
			behaviour is undefined</quote>. Assignments to string literals of
			the form:</para>

		<programlisting language="c">"abc" = '3';</programlisting>

		<para>always result in errors. Other attempts to modify members of
			string literals, e.g.</para>

		<programlisting language="c">"abc"[1] = '3';</programlisting>

		<para>are permitted in the default checking mode. This behaviour can be
			changed using:</para>

		<programlisting language="c">#pragma TenDRA writeable string literal <emphasis>permit</emphasis></programlisting>

		<para>where <emphasis>permit</emphasis> may be <code>allow</code>,
			<code>warning</code> or <code>disallow</code>.</para>
	</section>

	<section>
		<title>Concatenation of character string literals
			and wide character string literals</title>

		<para>Adjacent string literals tokens of similar types (either both character
			string literals or both wide string literals) are concatenated at
			an early stage in parser, however it is unspecified what happens if
			a character string literal token is adjacent to a wide string literal
			token.	By default this gives an error, but the directive:</para>

		<programlisting language="cpp">#pragma TenDRA unify incompatible string literal <emphasis>allow</emphasis></programlisting>

		<para>can be used to enable the strings to be concatenated to give a wide
			string literal.</para>

		<para>If a <code>'</code> or <code>&quot;</code> character does not have
			a matching closing quote on the same line then it is undefined whether
			an implementation should report an unterminated string or treat the
			quote as a single unknown character.	By default, the C++ producer
			treats this as an unterminated string, but this behaviour can be controlled
			using the directive:</para>

		<programlisting language="cpp">#pragma TenDRA unmatched quote <emphasis>allow</emphasis></programlisting>

		<!-- TODO: merged in content -->

		<para>The ISO C standard, section 6.1.4, states that if a character
			string literal is adjacent to a wide character string literal, the
			behaviour is undefined. By default, this is flagged as an error by
			the checker. If the pragma:</para>

		<programlisting language="c">#pragma TenDRA unify incompatible string literal <emphasis>permit</emphasis></programlisting>

		<para>is used, with <emphasis>permit</emphasis> set to
			<code>allow</code> or <code>warning</code> the character string
			literal is converted to a wide character string literal and the
			strings are concatenated, although in the <code>warning</code> case
			a warning is output. The <code>disallow</code> version of the pragma
			restores the default behaviour.</para>
	</section>

	<section id="escape">
		<title>Escape sequences</title>

		<para>By default, if the character following the <code>\</code> in an escape
			sequence is not one of those listed in the ISO C or C++ standards
			then an error is given.	This behaviour, which is left unspecified
			by the standards, can be controlled by the directive:</para>

		<programlisting language="cpp">#pragma TenDRA unknown escape <emphasis>allow</emphasis></programlisting>

		<para>The result is that the <code>\</code> in unknown escape sequences
			is ignored, so that <code>\z</code> is interpreted as <code>z</code>,
			for example.	Individual escape sequences can be enabled or disabled
			using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA++ escape <emphasis>character-literal</emphasis> as <emphasis>character-literal</emphasis> allow
#pragma TenDRA++ escape <emphasis>character-literal</emphasis> disallow</programlisting>

		<para>so that, for example:</para>

		<programlisting language="cpp">#pragma TenDRA++ escape 'e' as '\033' allow
#pragma TenDRA++ escape 'a' disallow</programlisting>

		<para>sets <code>\e</code> to be the ASCII escape character and disables
			the alert character <code>\a</code>.</para>

		<para>By default, if the value of a character, given for example by a
			<code>\x</code> escape sequence, does not fit into its type then an
			error is given.	This implementation dependent behaviour can however
			be controlled by the directive:</para>

		<programlisting language="cpp">#pragma TenDRA character escape overflow <emphasis>allow</emphasis></programlisting>

		<para>the value being converted to its type in the normal way.</para>

		<!-- TODO: merged in content -->

		<para>The ISO C standard specifies a small set of escape sequences in
			strings, for example <code>\n</code> as newline. Unknown escape
			sequences lead to an error in the default mode , however the
			severity of the error may be altered using:</para>

		<programlisting language="c">#pragma TenDRA unknown escape <emphasis>permit</emphasis></programlisting>

		<para>where <emphasis>permit</emphasis> is <code>allow</code> (silently
			replaces the unknown escape sequence, <emphasis>\z</emphasis> say,
			by <code>z</code>), <code>warning</code> or
			<code>disallow</code>.</para>
	</section>

</chapter>

