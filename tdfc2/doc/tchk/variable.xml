<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter>
	<title>Variable Analysis</title>

	<para>The variable analysis checks are controlled by:</para>

	<programlisting language="c">#pragma TenDRA variable analysis status</programlisting>

	<para>Where <emphasis>status</emphasis> is <code>on</code>,
		<code>warning</code> or <code>off</code> as usual. The checks are
		switched off in the default mode.</para>

	<para>There are also equivalent command line options to &tdfc2; of the
		form <code>-X:variable=</code><code>state</code>, where
		<code>state</code> can be <code>check</code>, <code>warn</code> or
		<code>dont</code>.</para>

	<para>The variable analysis is concerned with the evaluation of
		expressions and the use of local variables, including function
		arguments. Occasionally it may not be possible to statically
		perform a full analysis on an expression or variable and in these
		cases the messages produced indicate that there may be a problem.
		If a full analysis is possible a definite error or warning is
		produced. The individual checks are listed in sections 5.6.1 to
		5.6.6 and section 5.7 describes the source annotations which can be
		used to fine-tune the variable analysis.</para>

	<section id="variable">
		<title>Variable lifetime analysis</title>

		<para>The directive:</para>

		<programlisting language="cpp">#pragma TenDRA variable analysis <emphasis>on</emphasis></programlisting>

		<para>enables checks on the uses of automatic variables and function parameters.
			These checks detect:</para>

		<itemizedlist>
			<listitem>
				<para>If a variable is not used in its scope.</para>
			</listitem>

			<listitem>
				<para>If the value of a variable is used before it has been assigned to.</para>
			</listitem>

			<listitem>
				<para>If a variable is assigned to twice without an intervening use.</para>
			</listitem>

			<listitem>
				<para>If a variable is assigned to twice without an intervening sequence point.</para>
			</listitem>
		</itemizedlist>

		<para>as illustrated by the variables <code>a</code>, <code>b</code>,
			<code>c</code> and <code>d</code> respectively in:</para>

		<programlisting language="cpp">void f ()
{
	int a ;        // a never used
	int b ;
	int c = b ;    // b not initialised
	c = 0 ;        // c assigned to twice
	int d = 0 ;
	d = ++d ;      // d assigned to twice
}</programlisting>

		<para>The second, and more particularly the third, of these checks requires
			some fairly sophisticated flow analysis, so any hints which can be
			picked up from <link linkend="switch">exhaustive <code>switch</code>
			statements</link> etc. is likely to increase the accuracy of the errors
			detected.</para>

		<para>In a non-static member function the various non-static data members
			are analysed as if they were automatic variables.	It is checked that
			each member is initialised in a constructor.	A common source of initialisation
			problems in a constructor is that the base classes and members are
			initialised in the canonical order of virtual bases, non-virtual direct
			bases and members in the order of their declaration, rather than in
			the order in which their initialisers appear in the constructor definition.
			Therefore a check that the initialisers appear in the canonical order
			is also applied.</para>

		<para>It is possible to change the state of a variable during the variable
			analysis using the directives:</para>

		<programlisting language="cpp">#pragma TenDRA set <emphasis>expression</emphasis>
#pragma TenDRA discard <emphasis>expression</emphasis></programlisting>

		<para>The first asserts that the variable given by the <emphasis>expression</emphasis>
			has been assigned to; the second asserts that the variable is not
			used.	An alternative way of expressing this is by means of keywords:</para>

		<programlisting language="cpp">SET ( <emphasis>expression</emphasis> )
DISCARD ( <emphasis>expression</emphasis> )</programlisting>

		<para>introduced using the directives.</para>

		<programlisting language="cpp">#pragma TenDRA keyword <emphasis>identifier</emphasis> for set
#pragma TenDRA keyword <emphasis>identifier</emphasis> for discard variable</programlisting>

		<para>respectively.	These expressions can appear in expression statements
			and as the first argument of a comma expression.</para>

		<warning>
			<para>The variable flow analysis checks have not yet been completely implemented.
				They may not detect errors in certain circumstances and for extremely
				convoluted code may occasionally give incorrect errors.</para>
		</warning>
	</section>

	<section>
		<title>5.6.2 Modification between sequence points</title>

		<para>The ISO C standard states that if an object is modified more
			than once, or is modified and accessed other than to determine
			the new value, between two sequence points, then the behaviour
			is undefined. Thus the result of:</para>

		<programlisting language="c">var = arr[i++] + i++ ;</programlisting>

		<para>is undefined, since the value of i is being incremented twice
			between sequence points. This behaviour is detected by the
			variable analysis.</para>
	</section>

	<section>
		<title>Unused variables</title>

		<para>As part of the variable analysis, a simple test applied to
			each local variable at the end of its scope to determine
			whether it has been used in that scope. For example,
			in:</para>

		<programlisting language="c">int f ( int n )
{
	int r;
	return ( 0 );
}</programlisting>

		<para>both the function argument <code>n</code> and the local
			variable <code>r</code> are unused.</para>
	</section>

	<section>
		<title>Values set and not used</title>

		<para>This is a more complex test since it is applied to every
			instance of setting the variable. For example, in:</para>

		<programlisting language="c">int f ( int n )
{
	int r = 1;
	r = 5;
	return ( r );
}</programlisting>

		<para>the first value <code>r</code> is set to <code>1</code> and
			is not used before it is overwritten by <code>5</code> (this
			second value is used however). This test requires some flow
			analysis. For example, if the program is modified to:</para>

		<programlisting language="c">int f ( int n )
{
	int r = 1;
	if ( n == 3 ) {
		r = 5;
	}
	return ( r );
}</programlisting>

		<para>the initial value of <code>r</code> is used when
			<code>n != 3</code>, so no error is detected. However in:</para>

		<programlisting language="c">int f ( int n )
{
	int r = 1;
	if ( n == 3 ) {
		r = 5;
	} else {
		r = 6;
	}
	return ( r );
}
</programlisting>

		<para>the initial value of r is overwritten regardless of the
			result of the conditional, and hence is unused.</para>
	</section>

	<section>
		<title>Variable which has not been set is used</title>

		<para>This test also requires some flow analysis, for example
			in:</para>

		<programlisting language="c">int f ( int n )
{
	int r;
	if ( n == 3 ) {
		r = 5;
	}
	return ( r );
}</programlisting>

		<para>the use of the variable <code>r</code> as a return value is
			reported because there are paths leading to this statement in
			which <code>r</code> is not set (i.e. when <code>n != 3</code>).
			However, in:</para>

		<programlisting language="c">int f ( int n )
{
	int r;
	if ( n == 3 ) {
		r = 5;
	} else {
		r = 6;
	}
	return ( r );
}</programlisting>

		<para>r is always set before it is used, so no error is
			detected.</para>
	</section>

	<section>
		<title>Variable shadowing</title>

		<para>It is quite legal in C to have a variable in an inner scope, with
			the same name as a variable in an outer scope. These variables are
			distinct and whilst in the inner scope, the declaration in the outer
			scope is not visible - it is <quote>shadowed</quote> by the local
			variable of the same name. Confusion can arise if this was not what
			the programmer intended. The checker can therefore be configured to
			detect shadowing in three cases: a local variable shadowing a global
			variable; a local variable shadowing a local variable with a wider
			scope and a local variable shadowing a typedef name, by using:</para>

		<programlisting language="c">#pragma TenDRA variable hiding analysis <emphasis>status</emphasis></programlisting>

		<para>If <emphasis>status</emphasis> is <code>on</code> an error is
			raised when a local variable that shadows another variable is
			declared, if <code>warning</code> is used the error is replaced by
			a warning and the <code>off</code> option restores the default
			behaviour (shadowing is permitted and no errors are produced).</para>

		<!-- TODO: tcpplus content -->
		<para>The directive:</para>

		<programlisting language="cpp">#pragma TenDRA variable hiding analysis <emphasis>on</emphasis></programlisting>

		<para>can be used to enable a check for hiding of other variables and, in
			member functions, data members, by local variable declarations.</para>
	</section>

	<section>
		<title>Overriding the variable analysis</title>

		<para>Although many of the problems discovered by the variable analysis
			are genuine mistakes, some may be as the result of deliberate
			decisions by the program writer. In this case, more information
			needs to be provided to the checker to convey the programmer's
			intentions. Four constructs are provided for this purpose: the
			discard variable, the set variable, the exhaustive switch and the
			non-returning function.</para>

		<section>
			<title>5.7.1 Discarding variables</title>

			<para>Actively discarding a variable counts as a use of that
				variable in the variable analysis, and so can be used to
				suppress messages concerning unused variables and values
				assigned to variables. There are two distinct methods to
				indicate that the variable x is to be discarded. The first
				uses a pragma:</para>

			<programlisting language="c">#pragma TenDRA discard x;</programlisting>

			<para>which the checker treats as if it were a C statement, ending
				in a semicolon. Having a statement which is noticed by one
				compiler but ignored by another can lead to problems. For
				example, in:</para>

			<programlisting language="c">if ( n == 3 )
#pragma TenDRA discard x;
	puts ( "n is three" );</programlisting>

			<para>&tdfc2; believes that <code>x</code> is discarded if
				<code>n == 3</code> and the message is always printed,
				whereas other compilers will ignore the <code>#pragma</code>
				statement and think that the message is printed if
				<code>n == 3</code>. An alternative, in many ways neater,
				solution is to introduce a new keyword for discarding
				variables. For example, to introduce the keyword
				<code>DISCARD</code> for this purpose, the pragma:</para>

			<programlisting language="c">#pragma TenDRA keyword DISCARD for discard variable</programlisting>

			<para>should be used. The variable <code>x</code> can then be
				discarded by means of the statement:</para>

			<programlisting language="c">DISCARD ( x );</programlisting>

			<para>A dummy definition for <code>DISCARD</code> to use with
				normal compilers needs to be given in order to maintain
				compilability with those compilers. For example, a complete
				definition of <code>DISCARD</code> might be:</para>

			<programlisting language="c">#ifdef __TenDRA__
#pragma TenDRA keyword DISCARD for discard variable
#else
#define DISCARD(x) (( void ) 0 )
#endif</programlisting>
			<!-- XXX surely ((void)x) (though that would have side-effects);
				sizeof(x) might be better, or simply to do nothing -->

			<para>Discarding a variable changes its assignment state to unset,
				so that any subsequent uses of the variable, without an
				intervening assignment to it, lead to a <quote>variable used
				before being set</quote> error. This feature can be exploited if the same variable is used for distinct purposes in different parts of its scope, by causing the variable analysis to treat the different uses separately. For example, in:</para>

			<programlisting language="c">void f ( void )
{
	int i = 0;
	while ( i++ &lt; 10 ) {
		puts ( "hello" );
	}
	while ( i++ &lt; 10 ) {
		puts ( "goodbye" );
	}
}</programlisting>

			<para>which is intended to print both messages ten times, the two
				uses of <code>i</code> as a loop counter are independent - they
				could have been implemented with different variables. By
				discarding <code>i</code> after the first loop, the second loop
				can be analysed separately. In this way, the error of failing
				to reset <code>i</code> to <code>0</code> can be detected.</para>
		</section>

		<section>
			<title>Setting variables</title>

			<para>In addition to discarding variables, it is also possible to
				set them. In deliberately setting a variable, the programmer is
				telling the checker to assume that some value will always have
				been assigned to the variable by that point, so that any
				<quote>variable used without being set</quote> errors can be
				suppressed. This construct is particularly useful in programs
				with complex flow control, to help out the variable analysis.
				For example, in:</para>

			<programlisting language="c">void f ( int n )
{
	int r;
	if ( n != 0 ) r = n;
	if ( n &gt; 2 ) {
		printf ( "%d\n", r );
	}
}</programlisting>

			<para><code>r</code> is only used if <code>n > 2</code>, in which
				case we also have <code>n != 0</code>, so that <code>r</code>
				has already been initialised. However, in its flow analysis,
				the TenDRA C checker treats all the conditionals it meets as
				if they were independent and does not look for any such complex
				dependencies (indeed it is possible to think of examples where
				such analysis would be impossible). Instead, it needs the
				programmer to clarify the flow of the program by asserting that
				<code>r</code> will be set if the second condition is true.</para>

			<para>Programmers may assert that the variable, <code>r</code>, is
				set either by means of a pragma:</para>

			<programlisting language="c">#pragma TenDRA set r;</programlisting>

			<para>or by using, for example:</para>

			<programlisting language="c">SET ( r );</programlisting>

			<para>where SET is a keyword which has previously been introduced
				to stand for the variable setting construct using:</para>

			<programlisting language="c">#pragma TenDRA keyword SET for set</programlisting>

			<para>(cf. <code>DISCARD</code> above).</para>
		</section>

		<section>
			<title>Exhaustive switch statements</title>

			<para>A special case of a flow control construct which may be used
				to set the value of a variable is a switch statement. Consider
				the program:</para>

			<programlisting language="c">char *f ( int n )
{
	char *r;
	switch ( n ) {
		case 1 : r = "one"; break;
		case 2 : r = "two"; break;
		case 3 : r = "three"; break;
	}
	return ( r );
}</programlisting>

			<para>This leads to an error indicating that <code>r</code> is used
				but not set, because it is not set if n lies outside the three
				cases in the switch statement. However, the programmer might
				know that <code>f</code> is only ever called with these three
				values, and hence that <code>r</code> is always set before it
				is used. This information could be expressed by asserting that
				<code>r</code> is set at the end of the switch construct (see
				above), but it would be better to express the cause of this
				setting rather than just its effect. The reason why
				<code>r</code> is always set is that the switch statement is
				exhaustive - there are case statements for all the possible
				values of <code>n</code>.</para>

			<para>Programmers may assert that a switch statement is exhaustive
				by means of a pragma immediately following it. For example, in
				the above case it would take the form:</para>

			<programlisting language="c">....
switch ( n )
#pragma TenDRA exhaustive
{
	case 1 : r = "one"; break;
	....</programlisting>

			<para>Again, there is an option to introduce a keyword,
				<code>EXHAUSTIVE</code> say, for exhaustive switch statements
				using:</para>

			<programlisting language="c">#pragma TenDRA keyword EXHAUSTIVE for exhaustive</programlisting>

			<para>Using this form, the example program becomes:</para>

			<programlisting language="c">switch ( n ) EXHAUSTIVE {
	case 1 : r = "one"; break;</programlisting>

			<para>In order to maintain compatibility with existing compilers,
				a dummy definition for <code>EXHAUSTIVE</code> must be
				introduced for them to use. For example, a complete definition
				of <code>EXHAUSTIVE</code> might be:</para>

			<programlisting language="c">#ifdef __TenDRA__
#pragma TenDRA keyword EXHAUSTIVE for exhaustive
#else
#define EXHAUSTIVE
#endif</programlisting>
		</section>

		<section id="switch">
			<title>Switch statements</title>

			<para>A <code>switch</code> statement is said to be exhaustive if its control
				statement is guaranteed to take one of the values of its
				<code>case</code> labels, or if it has a <code>default</code> label.
				The TenDRA C and C++ producers allow a <code>switch</code> statement
				to be asserted to be exhaustive using the syntax:</para>

			<programlisting language="cpp">switch ( cond ) EXHAUSTIVE {
	// switch statement body
}</programlisting>

			<para>where <code>EXHAUSTIVE</code> is either the directive:</para>

			<programlisting language="cpp">#pragma TenDRA exhaustive</programlisting>

			<para>or a keyword introduced using:</para>

			<programlisting language="cpp">#pragma TenDRA keyword <emphasis>identifier</emphasis> for exhaustive</programlisting>

			<para>Knowing whether a <code>switch</code> statement is exhaustive or not
				means that checks relying on flow analysis (including variable usage
				checks) can be applied more precisely.</para>

			<para>In certain circumstances it is possible to deduce whether a
				<code>switch</code> statement is exhaustive or not.	For example,
				the directive:</para>

			<programlisting language="cpp">#pragma TenDRA enum switch analysis <emphasis>on</emphasis></programlisting>

			<para>enables a check on <code>switch</code> statements on values of enumeration
				type.	Such statements should be exhaustive, either explicitly by
				using the <code>EXHAUSTIVE</code> keyword or declaring a
				<code>default</code> label, or implicitly by having a <code>case</code>
				label for each enumerator.	Conversely, the value of each <code>case</code>
				label should equal the value of an enumerator.	For the purposes of
				this check, boolean values are treated as if they were declared using
				an enumeration type of the form:</para>

			<programlisting language="cpp">enum bool { false = 0, true = 1 } ;</programlisting>

			<para>A common source of errors in <code>switch</code> statements is the
				fall-through from one <code>case</code> or <code>default</code>
				statement to the next.	A check for this can be enabled using:</para>

			<programlisting language="cpp">#pragma TenDRA fall into case <emphasis>allow</emphasis></programlisting>

			<para><code>case</code> or <code>default</code> labels where fall-through
				from the previous statement is intentional can be marked by preceding
				them by a keyword, <code>FALL_THRU</code> say, introduced using the
				directive:</para>

			<programlisting language="cpp">#pragma TenDRA keyword <emphasis>identifier</emphasis> for fall into case</programlisting>
		</section>

		<section>
			<title>Non-returning functions</title>

			<para>Consider a modified version of the program above, in which
				calls to <code>f</code> with an argument other than
				<code>1</code>, <code>2</code> or <code>3</code> cause an error
				message to be printed:</para>

			<programlisting language="c">extern void error ( const char * );
char *f ( int n )
{
	char *r;
	switch ( n ) {
		case 1 : r = "one"; break;
		case 2 : r = "two"; break;
		case 3 : r = "three"; break;
		default : error( "Illegal value" );
	}
	return ( r );
}</programlisting>

			<para>This causes an error because, in the default case,
				<code>r</code> is not set before it is used. However,
				depending on the semantics of the function, error, the
				return statement may never be reached in this case. This is
				because the fact that a function returns void can mean one
				of two distinct things:</para>

			<itemizedlist>
				<listitem>
					<para>That the function does not return a value. This is the usual
						meaning of <code>void</code>.</para>
				</listitem>
				<listitem>
					<para>That the function never returns, for example the library
						function, <code>exit</code>, uses <code>void</code> in this
						sense.</para>
				</listitem>
			</itemizedlist>

			<para>If error never returns, then the program above is correct;
				otherwise, an unset value of <code>r</code> may be
				returned.</para>

			<para>Therefore, we need to be able to declare the fact that a
				function never returns. This is done by introducing a new type to
				stand for the non-returning meaning of <code>void</code> (some
				compilers use <code>volatile void</code> for this purpose).
				This is done by means of the pragma:</para>

			<!-- TODO make this BOTTOM instead of VOID -->
			<programlisting language="c">#pragma TenDRA type VOID for bottom</programlisting>

			<para>to introduce a type <code>VOID</code> (although any
				identifier may be used) with this meaning. The declaration of
				error can then be expressed as:</para>

			<programlisting language="c">extern VOID error ( const char * );</programlisting>

			<para>In order to maintain compatibility with existing compilers a
				definition of <code>VOID</code> needs to be supplied. For
				example:</para>

			<programlisting language="c">#ifdef __TenDRA__
#pragma TenDRA type VOID for bottom
#else
typedef void VOID;
#endif</programlisting>

			<para>The largest class of non-returning functions occurs in the
				various standard APIs - for example, <code>exit</code> and
				<code>abort</code>. The TenDRA descriptions of these APIs
				contain this information. The information that a function does
				not return is taken into account in all flow analysis contexts.
				For example, in:</para>

			<programlisting language="c">#include &lt;stdlib.h&gt;

int f ( int n )
{
	exit ( EXIT_FAILURE );
	return ( n );
}</programlisting>

			<para><code>n</code> is unused because the <code>return</code>
				statement is not reached (a fact that can also be determined by
				the unreachable code analysis in section 5.2).</para>
		</section>

		<section id="return">
			<title>Return statements</title>

			<para>In C, but not in C++, it is possible to have a <code>return</code>
				statement without an expression in a function which does not return
				<code>void</code>.  It is possible to enable this behaviour using
				the directive:</para>

			<programlisting language="cpp">#pragma TenDRA incompatible void return <emphasis>allow</emphasis></programlisting>

			<para>Note that this check includes the implicit <code>return</code> caused
				by falling off the end of a function.   The effect of such a
				<code>return</code> statement is undefined. The C++ rule that falling
				off the end of <code>main</code> is equivalent to returning a value
				of 0 overrides this check.</para>
		</section>
	</section>

</chapter>

