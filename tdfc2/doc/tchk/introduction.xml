<?xml version="1.0"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<preface id="intro">
	<title>Introduction</title>

	<para>The C program static checker was originally developed as a
		programming tool to aid the construction of portable programs using
		the Application Programming Interface (&api;) model of software
		portability; the principle underlying this approach being:</para>

	<blockquote>If a program is written to conform to an abstract
			&api; specification, then that program will be portable to any
			machine which implements the &api; specification
			correctly.</blockquote>

	<para>This approach gave the tool an unusually powerful basis for
		static checking of C programs and a large amount of development
		work has resulted in the production of the TenDRA C static checker
		(invoked as <code>tcc -ch</code>). The terms, TenDRA C checker and
		<code>tcc -ch</code> are used interchangably in this document.</para>

	<para>Responsibilities of the C static checker are:</para>

	<itemizedlist>
		<listitem>
			<para>strict interface checking. In particular, the checker can
				analyse programs against abstract &api;s to check their conformance
				to the specification. Abstract versions of most standard APIs are
				provided with the tool; alternatively users can define their own
				abstract APIs using the syntax described in Annex G;</para>
		</listitem>

		<listitem>
			<para>checking of integer sizes, overflows and implicit integer
				conversions including potential 64-bit problems, against a 16 bit
				or 32 bit architecture profile;</para>
		</listitem>

		<listitem>
			<para>strict ISO C90 standard checking, plus configurable support for
				many non-ISO dialect features;</para>
		</listitem>

		<listitem>
			<para>extensive type checking, including prototype-style checking for
				traditionally defined functions, conversion checking, type checking
				on printf and scanf style argument strings and type checking
				between translation units;</para>
		</listitem>

		<listitem>
			<para>variable analysis, including detection of unused variables, use
				of uninitialised variables, dependencies on order of evaluation in
				expressions and detection of unused function returns, computed
				values and static variables;</para>
		</listitem>

		<listitem>
			<para>detection of unused header files;</para>
		</listitem>

		<listitem>
			<para>configurable tests for detecting many other common programming
				errors;</para>
		</listitem>

		<listitem>
			<para>Complete standard &api; usage analysis. No &api; definitions are
				built in to the checker; these are provided externally.
				A complete list of &api; definitions available to &tcc; is
				documented by &tccenv.5;.</para>
		</listitem>

		<listitem>
			<para>Support for user-defined checking profiles. No checking profiles
				are built-in to the checker; these are provided externally.
				A complete list of profiles exposed as <code>-X</code> modes
				to &tcc; as startup files is documented by &tccmodes.5;.</para>
		</listitem>
	</itemizedlist>

</preface>

