<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [
	<!ENTITY identifier "<replaceable>identifier</replaceable>">
	<!ENTITY permit     "<replaceable>permit</replaceable>">
	<!ENTITY dallow     "<replaceable>dallow</replaceable>">
	<!ENTITY tokenlist  "<replaceable>token-list</replaceable>">
	<!ENTITY typeid     "<replaceable>type-id</replaceable>">
]>

<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<refentryinfo>
		<productname>tdfc2</productname>
	</refentryinfo>

	<refmeta>
		<refentrytitle>tdfc2pragma</refentrytitle>
		<manvolnum>5</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>tdfc2pragma</refname>
		<refpurpose>tdfc #pragma syntax</refpurpose>
	</refnamediv>



	<!-- TODO very much to do -->

	<refsection>
		<title><code>#pragma</code> directive syntax</title>

		<para>The following gives a summary of the syntax for the <code>#pragma</code>
			directives used for <ulink url="pragma.html">compiler configuration</ulink>
			and <ulink url="token.html">token specification</ulink>:</para>

<programlisting language="bnf">
<replaceable>pragma-directive</replaceable> :
	<ulink url="tendra"># pragma TenDRA ++<replaceable>&opt.bnf; tendra-directive</replaceable></ulink>
	<ulink url="token"># pragma <replaceable>token-directive</replaceable></ulink>

<!-- id="tendra" --><replaceable>tendra-directive</replaceable> :
	<ulink url="scope"><replaceable>scope-directive</replaceable></ulink>
	<ulink url="low"><replaceable>low-level-directive</replaceable></ulink>
	<ulink url="analysis"><replaceable>analysis-directive on</replaceable></ulink>
	<ulink url="check"><replaceable>check-directive allow</replaceable></ulink>
	<ulink url="keyword"><replaceable>keyword-directive</replaceable></ulink>
	<ulink url="type"><replaceable>type-directive</replaceable></ulink>
	<ulink url="linkage"><replaceable>linkage-directive</replaceable></ulink>
	<ulink url="misc"><replaceable>misc-directive</replaceable></ulink>
	<ulink url="token1"><replaceable>tendra-token-directive</replaceable></ulink>

<replaceable>on</replaceable> :
	on
	warning
	off

<replaceable>allow</replaceable> :
	allow
	warning
	disallow


<!-- id="scope" --><replaceable>scope-directive</replaceable> :
	<ulink url="pragma.html#scope">begin</ulink>
	<ulink url="pragma.html#scope">begin name environment &identifier;</ulink>
	<ulink url="pragma.html#scope">end</ulink>
	<ulink url="pragma.html#scope">directory &identifier; use environment &identifier;</ulink>
	<ulink url="pragma.html#scope">use environment &identifier;</ulink>
	<ulink url="pragma.html#scope">use environment &identifier; reset <replaceable>allow</replaceable></ulink>


<!-- id="low" --><replaceable>low-level-directive</replaceable> :
	<ulink url="pragma.html#low">error <replaceable>string-literal allow</replaceable></ulink>
	<ulink url="pragma.html#low">error <replaceable>string-literal on</replaceable></ulink>
	<ulink url="pragma.html#low">error <replaceable>string-literal</replaceable> as option <replaceable>string-literal</replaceable></ulink>
	<ulink url="pragma.html#low">option <replaceable>string-literal allow</replaceable></ulink>
	<ulink url="pragma.html#low">option <replaceable>string-literal on</replaceable></ulink>
	<ulink url="pragma.html#limits">option value <replaceable>string-literal integer-literal</replaceable></ulink>
	<ulink url="pragma.html#low">use error <replaceable>string-literal</replaceable></ulink>


<!-- id="analysis" --><replaceable>analysis-directive</replaceable> :
	<ulink url="pragma.html#init">complete initialization analysis</ulink>
	<ulink url="pragma.html#elab">complete struct / union analysis</ulink>
	<ulink url="pragma.html#conv">conversion analysis <replaceable>conversion-spec&opt.bnf;</replaceable></ulink>
	<ulink url="pragma.html#discard">discard analysis <replaceable>discard-spec&opt.bnf;</replaceable></ulink>
	<ulink url="pragma.html#switch">enum switch analysis</ulink>
	<ulink url="pragma.html#linkage">external function linkage</ulink>
	<ulink url="pragma.html#for">for initialization block</ulink>
	<ulink url="pragma.html#elab">ignore struct / union / enum tag</ulink>
	<ulink url="pragma.html#template">implicit export template</ulink>
	<ulink url="pragma.html#impl_func">implicit function declaration</ulink>
	<ulink url="pragma.html#exp">integer operator analysis</ulink>
	<ulink url="pragma.html#exp">integer overflow analysis</ulink>
	<ulink url="pragma.html#comment">nested comment analysis</ulink>
	<ulink url="pragma.html#exp">operator precedence analysis</ulink>
	<ulink url="pragma.html#exp">pointer operator analysis</ulink>
	<ulink url="pragma.html#throw">throw analysis</ulink>
	<ulink url="pragma.html#linkage">unify external linkage</ulink>
	<ulink url="pragma.html#variable">variable analysis</ulink>
	<ulink url="pragma.html#hide">variable hiding analysis</ulink>
	<ulink url="pragma.html#weak">weak prototype analysis</ulink>

<replaceable>conversion-spec</replaceable> :
	( int - int <replaceable>implicit-spec&opt.bnf;</replaceable> )
	( int - pointer <replaceable>implicit-spec&opt.bnf;</replaceable> )
	( pointer - int <replaceable>implicit-spec&opt.bnf;</replaceable> )
	( pointer - pointer <replaceable>implicit-spec&opt.bnf;</replaceable> )
	( int - enum implicit )
	( pointer - void * implicit )
	( void * - pointer implicit )

<replaceable>implicit-spec</replaceable> :
	implicit
	explicit

<replaceable>discard-spec</replaceable> :
	( function return )
	( static )
	( value )


<!-- id="check" --><replaceable>check-directive</replaceable> :
	<ulink url="pragma.html#overload">ambiguous overload resolution</ulink>
	<ulink url="pragma.html#if">assignment as bool</ulink>
	<ulink url="pragma.html#bitfield">bitfield overflow</ulink>
	<ulink url="pragma.html#linkage">block function static</ulink>
	<ulink url="pragma.html#catch_all">catch all</ulink>
	<ulink url="pragma.html#escape">character escape overflow</ulink>
	<ulink url="token.html#tokdef">compatible token</ulink>
	<ulink url="pragma.html#include">complete file includes</ulink>
	<ulink url="pragma.html#target-if">conditional declaration</ulink>
	<ulink url="pragma.html#lvalue">conditional lvalue</ulink>
	<ulink url="pragma.html#overload">conditional overload resolution <replaceable>overload-spec&opt.bnf;</replaceable></ulink>
	<ulink url="pragma.html#if">const conditional</ulink>
	<ulink url="pragma.html#macro">directive as macro argument</ulink>
	<ulink url="pragma.html#identifier">dollar as ident</ulink>
	<ulink url="pragma.html#elab">extra ,</ulink>
	<ulink url="pragma.html#decl_none">extra ;</ulink>
	<ulink url="pragma.html#if">extra ; after conditional</ulink>
	<ulink url="pragma.html#weak">extra ...</ulink>
	<ulink url="pragma.html#bitfield">extra bitfield int type</ulink>
	<ulink url="pragma.html#macro">extra macro definition</ulink>
	<ulink url="pragma.html#typedef">extra type definition</ulink>
	<ulink url="pragma.html#switch">fall into case</ulink>
	<ulink url="pragma.html#elab">forward enum declaration</ulink>
	<ulink url="pragma.html#conv">function pointer as pointer</ulink>
	<ulink url="pragma.html#ellipsis">ident ...</ulink>
	<ulink url="pragma.html#implicit">implicit int type <replaceable>inttype-spec&opt.bnf;</replaceable></ulink>
	<ulink url="token.html#tokdef">implicit token definition</ulink>
	<ulink url="token.html#spec">incompatible interface declaration</ulink>
	<ulink url="token.html#member">incompatible member declaration</ulink>
	<ulink url="pragma.html#linkage">incompatible linkage</ulink>
	<ulink url="pragma.html#weak">incompatible promoted function argument</ulink>
	<ulink url="pragma.html#compatible">incompatible type qualifier</ulink>
	<ulink url="pragma.html#return">incompatible void return</ulink>
	<ulink url="pragma.html#complete">incomplete type as object type</ulink>
	<ulink url="pragma.html#ppdir">indented # directive</ulink>
	<ulink url="pragma.html#ppdir">indented directive after #</ulink>
	<ulink url="pragma.html#init">initialization of struct / union ( auto )</ulink>
	<ulink url="pragma.html#longlong">longlong type</ulink>
	<ulink url="pragma.html#ppdir">no directive / nline after ident</ulink>
	<ulink url="pragma.html#empty">no external declaration</ulink>
	<ulink url="pragma.html#macro">no ident after #</ulink>
	<ulink url="pragma.html#lex">no nline after file end</ulink>
	<ulink url="token.html#tokdef">no token definition</ulink>
	<ulink url="pragma.html#overload">overload resolution</ulink>
	<ulink url="pragma.html#weak">prototype</ulink>
	<ulink url="pragma.html#weak">prototype ( weak )</ulink>
	<ulink url="token.html#exp">rvalue token as const</ulink>
	<ulink url="pragma.html#ppdir">text after directive</ulink>
	<ulink url="pragma.html#lvalue">this lvalue</ulink>
	<ulink url="pragma.html#string">unify incompatible string literal</ulink>
	<ulink url="pragma.html#ppdir">unknown directive</ulink>
	<ulink url="pragma.html#escape">unknown escape</ulink>
	<ulink url="pragma.html#ppdir">unknown pragma</ulink>
	<ulink url="pragma.html#decl_none">unknown struct / union</ulink>
	<ulink url="pragma.html#string">unmatched quote</ulink>
	<ulink url="pragma.html#reach">unreachable code</ulink>
	<ulink url="pragma.html#init">variable initialization</ulink>
	<ulink url="pragma.html#macro">weak macro equality</ulink>
	<ulink url="pragma.html#string">writeable string literal</ulink>

<replaceable>inttype-spec</replaceable> :
	for const / volatile
	for external declaration
	for function return

<replaceable>overload-spec</replaceable> :
	( complete )
	( incomplete )


<!-- id="keyword" --><replaceable>keyword-directive</replaceable> :
	<ulink url="keyword">keyword &identifier; for <replaceable>keyword-spec</replaceable></ulink>
	<ulink url="pragma.html#keyword-spec">undef keyword &identifier;</ulink>

<!-- id="keyword-spec" --><replaceable>keyword-spec</replaceable> :
	<ulink url="pragma.html#discard">discard value</ulink>
	<ulink url="pragma.html#variable">discard variable</ulink>
	<ulink url="pragma.html#switch">exhaustive</ulink>
	<ulink url="pragma.html#switch">fall into case</ulink>
	<ulink url="pragma.html#keyword">keyword &identifier;</ulink>
	<ulink url="pragma.html#keyword">operator <replaceable>operator</replaceable></ulink>
	<ulink url="pragma.html#variable">set</ulink>
	<ulink url="pragma.html#reach">set reachable</ulink>
	<ulink url="pragma.html#reach">set unreachable</ulink>
	<ulink url="pragma.html#conv">type representation</ulink>
	<ulink url="pragma.html#weak">weak</ulink>


<!-- id="type-directive" --><replaceable>type-directive</replaceable> :
	<ulink url="pragma.html#reach">bottom &identifier;</ulink>
	<ulink url="pragma.html#char">character <replaceable>character-sign</replaceable></ulink>
	<ulink url="pragma.html#identifier">character <replaceable>character-literal character-mapping</replaceable></ulink>
	<ulink url="pragma.html#identifier">character <replaceable>string-literal character-mapping</replaceable></ulink>
	<ulink url="lib.html#arith">compute promote &identifier;</ulink>
	<ulink url="pragma.html#escape">escape <replaceable>character-literal character-mapping</replaceable></ulink>
	<ulink url="pragma.html#int">integer literal <replaceable>literal-spec</replaceable></ulink>
	<ulink url="lib.html#arith">promoted &typeid; : &typeid;</ulink>
	<ulink url="pragma.html#char">set character literal : &typeid;</ulink>
	<ulink url="pragma.html#longlong">set longlong type : <replaceable>longlong-spec</replaceable></ulink>
	<ulink url="pragma.html#char">set ptrdiff_t : &typeid;</ulink>
	<ulink url="pragma.html#char">set size_t : &typeid;</ulink>
	<ulink url="pragma.html#char">set wchar_t : &typeid;</ulink>
	<ulink url="pragma.html#string">set string literal : <replaceable>string-const</replaceable></ulink>
	<ulink url="pragma.html#std">set std namespace : <replaceable>scope-name</replaceable></ulink>
	<ulink url="type-spec">type &identifier; for <replaceable>type-spec</replaceable></ulink>

<replaceable>character-sign</replaceable> :
	signed
	unsigned
	either

<replaceable>character-mapping</replaceable> :
	as <replaceable>character-literal</replaceable> allow
	disallow

<replaceable>literal-spec</replaceable> :
	<replaceable>literal-base literal-suffix&opt.bnf; literal-type-list</replaceable>

<replaceable>literal-base</replaceable> :
	decimal
	octal
	hexadecimal

<replaceable>literal-suffix</replaceable> :
	unsigned
	long
	unsigned long
	long long
	unsigned long long

<replaceable>literal-type-list</replaceable> :
	* <replaceable>literal-type-spec</replaceable>
	<replaceable>integer-literal literal-type-spec</replaceable> | <replaceable>literal-type-list</replaceable>
	? <replaceable>literal-type-spec</replaceable> | <replaceable>literal-type-list</replaceable>

<replaceable>literal-type-spec</replaceable> :
	: &typeid;
	* <replaceable>allow&opt.bnf;</replaceable> : &identifier;
	* * <replaceable>allow&opt.bnf;</replaceable> :

<replaceable>longlong-spec</replaceable> :
	long
	long long

<replaceable>string-const</replaceable> :
	const
	no const

<replaceable>scope-name</replaceable> :
	&identifier;
	::

<!-- id="type-spec" --><replaceable>type-spec</replaceable> :
	<ulink url="pragma.html#reach">bottom</ulink>
	<ulink url="pragma.html#char">ptrdiff_t</ulink>
	<ulink url="pragma.html#char">size_t</ulink>
	<ulink url="pragma.html#char">wchar_t</ulink>
	<ulink url="pragma.html#printf">... printf</ulink>
	<ulink url="pragma.html#printf">... scanf</ulink>


<!-- id="linkage" --><replaceable>linkage-directive</replaceable> :
	<ulink url="pragma.html#linkage">const linkage <replaceable>linkage</replaceable></ulink>
	<ulink url="pragma.html#linkage">external linkage <replaceable>string-literal</replaceable></ulink>
	<ulink url="pragma.html#linkage">external volatile_t</ulink>
	<ulink url="pragma.html#linkage">inline linkage <replaceable>linkage</replaceable></ulink>
	<ulink url="pragma.html#linkage">linkage resolution : <replaceable>linkage-spec</replaceable></ulink>

<replaceable>linkage</replaceable> :
	external
	internal

<replaceable>linkage-spec</replaceable> :
	( <replaceable>linkage</replaceable> ) on
	( <replaceable>linkage</replaceable> ) warning
	off


<!-- id="misc" --><replaceable>misc-directive</replaceable> :
	<ulink url="pragma.html#weak">argument &typeid; as ...</ulink>
	<ulink url="pragma.html#weak">argument &typeid; as &typeid;</ulink>
	<ulink url="pragma.html#compatible">compatible type : &typeid; == &typeid; : <replaceable>allow</replaceable></ulink>
	<ulink url="pragma.html#conv">conversion <replaceable>identifier-list</replaceable> allow</ulink>
	<ulink url="dump.html#scope">declaration block &identifier; begin</ulink>
	<ulink url="dump.html#scope">declaration block end</ulink>
	<ulink url="pragma.html#ppdir">directive <replaceable>directive-spec directive-state</replaceable></ulink>
	<ulink url="pragma.html#variable">discard <replaceable>expression</replaceable></ulink>
	<ulink url="pragma.html#switch">exhaustive</ulink>
	<ulink url="pragma.html#cast">explicit cast <replaceable>cast-spec&opt.bnf; allow</replaceable></ulink>
	<ulink url="pragma.html#include">includes depth <replaceable>integer-literal</replaceable></ulink>
	<ulink url="pragma.html#static">preserve <replaceable>preserve-list</replaceable></ulink>
	<ulink url="pragma.html#variable">set <replaceable>expression</replaceable></ulink>
	<ulink url="pragma.html#limits">set error limit <replaceable>integer-literal</replaceable></ulink>
	<ulink url="pragma.html#identifier">set name limit <replaceable>integer-literal</replaceable> warning<replaceable>&opt.bnf;</replaceable></ulink>
	<ulink url="pragma.html#discard">suspend static <replaceable>identifier-list</replaceable></ulink>

<replaceable>directive-spec</replaceable> :
	assert
	file
	ident
	import
	include_next
	unassert
	warning
	weak

<replaceable>directive-state</replaceable> :
	allow
	warning
	disallow
	( ignore ) allow
	( ignore ) warning

<replaceable>cast-operator</replaceable> :
	static_cast
	const_cast
	reinterpret_cast

<replaceable>cast-spec</replaceable> :
	as <replaceable>cast-operator</replaceable>
	<replaceable>cast-spec</replaceable> | <replaceable>cast-operator</replaceable>

<replaceable>preserve-list</replaceable> :
	<replaceable>identifier-list</replaceable>
	*

<replaceable>identifier-list</replaceable> :
	<replaceable>identifier identifier-list&opt.bnf;</replaceable>


<!-- id="token" --><replaceable>token-directive</replaceable> :
	<ulink url="token.html#spec">token <replaceable>token-spec</replaceable></ulink>
	<ulink url="token.html#tokdef">no_def &tokenlist;</ulink>
	<ulink url="token.html#tokdef">define &tokenlist;</ulink>
	<ulink url="token.html#tokdef">ignore &tokenlist;</ulink>
	<ulink url="token.html#tokdef">interface &tokenlist;</ulink>
	<ulink url="token.html#tokdef">undef token &tokenlist;</ulink>
	<ulink url="token.html#tokdef">extend interface <replaceable>header-name</replaceable></ulink>
	<ulink url="token.html#tokdef">implement interface <replaceable>header-name</replaceable></ulink>

<!-- id="token1" --><replaceable>tendra-token-directive</replaceable> :
	<ulink url="token.html#spec">token <replaceable>token-spec</replaceable></ulink>
	<ulink url="token.html#tokdef">no_def &tokenlist;</ulink>
	<ulink url="token.html#tokdef">define &tokenlist;</ulink>
	<ulink url="token.html#tokdef">reject &tokenlist;</ulink>
	<ulink url="token.html#tokdef">interface &tokenlist;</ulink>
	<ulink url="token.html#tokdef">undef token &tokenlist;</ulink>
	<ulink url="token.html#tokdef">extend <replaceable>header-name</replaceable></ulink>
	<ulink url="token.html#tokdef">implement <replaceable>header-name</replaceable></ulink>
	<ulink url="token.html#tokdef">member definition &typeid; : <replaceable>identifier member-offset</replaceable></ulink>

<replaceable>member-offset</replaceable> :
	::<replaceable>&opt.bnf; id-expression</replaceable>
	<replaceable>member-offset</replaceable> . ::<replaceable>&opt.bnf; id-expression</replaceable>
	<replaceable>member-offset</replaceable> [ <replaceable>constant-expression</replaceable> ]

&tokenlist; :
	<replaceable>token-id token-list&opt.bnf;</replaceable>
	# <replaceable>preproc-token-list</replaceable>

<replaceable>token-id</replaceable> :
	<replaceable>token-namespace&opt.bnf; identifier</replaceable>
	&typeid; . &identifier;


<replaceable>token-spec</replaceable> :
	<replaceable>token-introduction token-identification</replaceable>

<replaceable>token-introduction</replaceable> :
	<replaceable>exp-token</replaceable>
	<replaceable>statement-token</replaceable>
	<replaceable>type-token</replaceable>
	<replaceable>member-token</replaceable>
	<replaceable>procedure-token</replaceable>

<replaceable>token-identification</replaceable> :
	<replaceable>token-namespace&opt.bnf; identifier</replaceable> # <replaceable>external-identifier&opt.bnf;</replaceable>

<replaceable>token-namespace</replaceable> :
	TAG

<replaceable>external-identifier</replaceable> :
	-
	<replaceable>preproc-token-list</replaceable>

<replaceable>exp-token</replaceable> :
	EXP <replaceable>exp-storage&opt.bnf;</replaceable> : &typeid; :
	NAT
	INTEGER

<replaceable>exp-storage</replaceable> :
	lvalue
	rvalue
	const

<replaceable>statement-token</replaceable> :
	STATEMENT

<replaceable>type-token</replaceable> :
	TYPE
	VARIETY
	VARIETY signed
	VARIETY unsigned
	FLOAT
	ARITHMETIC
	SCALAR
	CLASS
	STRUCT
	UNION

<replaceable>member-token</replaceable> :
	MEMBER <replaceable>access-specifier&opt.bnf; member-type-id</replaceable> : &typeid; :

<replaceable>member-type-id</replaceable> :
	&typeid;
	&typeid; % <replaceable>constant-expression</replaceable>

<replaceable>access-specifier</replaceable> :
	public
	protected
	private

<replaceable>procedure-token</replaceable> :
	<replaceable>general-procedure</replaceable>
	<replaceable>simple-procedure</replaceable>
	<replaceable>function-procedure</replaceable>

<replaceable>general-procedure</replaceable> :
	PROC { <replaceable>bound-toks&opt.bnf;</replaceable> | <replaceable>prog-pars&opt.bnf;</replaceable> } <replaceable>token-introduction</replaceable>

<replaceable>bound-toks</replaceable> :
	<replaceable>bound-token</replaceable>
	<replaceable>bound-token</replaceable> , <replaceable>bound-toks</replaceable>

<replaceable>bound-token</replaceable> :
	<replaceable>token-introduction token-namespace&opt.bnf; identifier</replaceable>

<replaceable>prog-pars</replaceable> :
	<replaceable>program-parameter</replaceable>
	<replaceable>program-parameter</replaceable> , <replaceable>prog-pars</replaceable>

<replaceable>program-parameter</replaceable> :
	EXP &identifier;
	STATEMENT &identifier;
	TYPE &typeid;
	MEMBER &typeid; : &identifier;
	PROC &identifier;

<replaceable>simple-procedure</replaceable> :
	PROC ( <replaceable>simple-toks&opt.bnf;</replaceable> ) <replaceable>token-introduction</replaceable>

<replaceable>simple-toks</replaceable> :
	<replaceable>simple-token</replaceable>
	<replaceable>simple-token</replaceable> , <replaceable>simple-toks</replaceable>

<replaceable>simple-token</replaceable> :
	<replaceable>token-introduction token-namespace&opt.bnf; identifier&opt.bnf;</replaceable>

<replaceable>function-procedure</replaceable> :
	FUNC &typeid; :</programlisting>
	</refsection>

	<!-- TODO what follows is from tdfc; this is to be merged with the above -->
	<refsection>
		<title>C Pragma syntax</title>

	<programlisting language="bnf">
pragma_syntax:
	#pragma TenDRA <replaceable>tendra_pragma</replaceable>
	#pragma token <replaceable>token_pragma</replaceable>
	#pragma <replaceable>token_operation</replaceable>
	#pragma <replaceable>integer_pragma</replaceable>

tendra_pragma:
	begin <!-- xref linkend="13" -->
	begin <replaceable>name</replaceable> environment &identifier; 
	declaration block &identifier; begin <!-- xref linkend="6" -->
	declaration block end <!-- xref linkend="6" -->
	directory <replaceable>name</replaceable> use environment &identifier;
	use environment &identifier;
	end <!-- xref linkend="13" --><replaceable>analysis_spec</replaceable><replaceable>function_pars</replaceable> <!-- xref linkend="32" -->
	keyword &identifier; for <replaceable>keyword_spec</replaceable>
	type &identifier; for <replaceable>type_spec</replaceable><replaceable>check_pragma</replaceable><replaceable>variable_pragma</replaceable><replaceable>dialect_pragma</replaceable>

analysis_spec:
	complete struct/union analysis <replaceable>state</replaceable> <!-- xref linkend="4" -->
	conversion <replaceable>conv_list</replaceable> allow <!-- xref linkend="2" -->
	conversion analysis <replaceable>conversion_spec</replaceable> <!-- xref linkend="2" -->
	discard analysis <replaceable>discard_spec</replaceable> <!-- xref linkend="36" -->
	enum switch analysis <replaceable>state</replaceable> <!-- xref linkend="2" -->
	fall into case &permit; <!-- xref linkend="6" -->
	function pointer as pointer &permit; <!-- xref linkend="11" -->
	integer operator analysis <replaceable>state</replaceable> <!-- xref linkend="18" -->
	integer overflow analysis <replaceable>state</replaceable> <!-- xref linkend="14" -->
	nested comment analysis <replaceable>state</replaceable> <!-- xref linkend="45" -->
	operator precedence analysis <replaceable>state</replaceable> <!-- xref linkend="15" -->
	unreachable code &permit; <!-- xref linkend="2" -->
	variable analysis <replaceable>state</replaceable> <!-- xref linkend="2" -->
	variable hiding analysis <replaceable>state</replaceable> <!-- xref linkend="6" -->
	weak prototype analysis <replaceable>state</replaceable> <!-- xref linkend="20" -->

conversion_spec:
	<replaceable>empty</replaceable>
	( int-int ) <!-- xref linkend="5" -->
	( int-int explicit ) <!-- xref linkend="5" -->
	( int-int implicit ) <!-- xref linkend="5" -->
	( int-enum implicit) <!-- xref linkend="5" -->
	(enum-int implicit) <!-- xref linkend="5" -->
	( int-pointer ) <!-- xref linkend="8" -->
	( int-pointer explicit ) <!-- xref linkend="8" -->
	(int-pointer implicit ) <!-- xref linkend="8" -->
	( pointer-int ) <!-- xref linkend="8" -->
	( pointer-int explicit ) <!-- xref linkend="8" -->
	( pointer-int implicit ) <!-- xref linkend="8" -->
	( pointer-pointer ) <!-- xref linkend="11" -->
	( pointer-pointer explicit ) <!-- xref linkend="11" -->
	( pointer-pointer implicit ) <!-- xref linkend="11" -->

discard_spec:
	<replaceable>empty</replaceable>
	( function return ) <!-- xref linkend="38" -->
	( static ) <!-- xref linkend="42" -->
	( value ) <!-- xref linkend="40" -->

function_pars:
	<replaceable>argument</replaceable> <replaceable>type_name</replaceable> as
	<replaceable>type_name</replaceable> <!-- xref linkend="32" -->
	argument <replaceable>type_name</replaceable> as ... <!-- xref linkend="32" -->
	extra ... &permit; <!-- xref linkend="32" -->

keyword_spec:
	discard value <!-- xref linkend="44" -->
	discard variable <!-- xref linkend="26" -->
	exhaustive <!-- xref linkend="32" -->
	fall into case <!-- xref linkend="6" -->
	set <!-- xref linkend="29" -->
	set reachable <!-- xref linkend="2" -->
	set unreachable <!-- xref linkend="2" -->
	type representation <!-- xref linkend="4" -->
	weak <!-- xref linkend="20" -->

type_spec:
	bottom <!-- xref linkend="34" -->
	... printf <!-- xref linkend="23" -->
	... scanf <!-- xref linkend="23" -->

check_pragma:
	implicit function declaration <replaceable>state</replaceable> <!-- xref linkend="30" -->
	incompatible interface declaration &permit; <!-- xref linkend="1" -->
	incompatible void return &permit; <!-- xref linkend="25" -->

variable_pragma:
	discard &identifier;<replaceable>separator</replaceable> <!-- xref linkend="26" -->
	preserve <replaceable>identifier_list</replaceable> <!-- xref linkend="46" -->
	set identifier <replaceable>separator</replaceable> <!-- xref linkend="29" -->
	suspend static <replaceable>identifier_list</replaceable> <!-- xref linkend="46" -->
	exhaustive <!-- xref linkend="32" -->

separator:
	;
	,

identifier_list:
	&identifier;
	&identifier;<replaceable>identifier_list</replaceable>

dialect_pragma:
	++ <!-- xref linkend="56" -->
	assignment as bool &permit; <!-- xref linkend="11" -->
	bitfield overflow &permit; <!-- xref linkend="14" -->
	block function static &permit; <!-- xref linkend="15" -->
	character <replaceable>set_sign</replaceable> <!-- xref linkend="9" -->
	character escape overflow &permit; <!-- xref linkend="14" -->
	compatible type : char * == void * : &permit; <!-- xref linkend="11" -->
	conditional lvalue &dallow; <!-- xref linkend="29" -->
	const conditional &permit; <!-- xref linkend="13" -->
	dollar as ident &dallow; <!-- xref linkend="39" -->
	directive <replaceable>pp_directive pp_spec</replaceable> <!-- xref linkend="1" -->
	directive as macro argument &permit; <!-- xref linkend="11" -->
	external volatile_t <!-- xref linkend="23" -->
	extra ; &permit; <!-- xref linkend="54" -->
	extra ; after conditional &permit; <!-- xref linkend="9" -->
	extra , &permit; <!-- xref linkend="52" -->
	extra bitfield int type &permit; <!-- xref linkend="9" -->
	extra macro definition &dallow; <!-- xref linkend="9" -->
	extra type definition &permit; <!-- xref linkend="13" -->
	forward enum declaration &dallow; <!-- xref linkend="19" -->
	floating point equality &permit; <!-- xref linkend="8" -->
	ident ... &permit; <!-- xref linkend="27" -->
	ignore struct/union/enum tag <replaceable>status</replaceable> <!-- xref linkend="31" -->
	implicit int type for external declaration &permit; <!-- xref linkend="7" -->
	implicit int type for function return &permit; <!-- xref linkend="7" -->
	includes depth <replaceable>integral_constant</replaceable> <!-- xref linkend="17" -->
	incompatible linkage &permit; <!-- xref linkend="5" -->
	incompatible promoted function argument &dallow; <!-- xref linkend="37" -->
	incompatible type qualifier &dallow; <!-- xref linkend="39" -->
	incomplete type as object type &permit; <!-- xref linkend="17" -->
	indented # directive &permit; <!-- xref linkend="7" -->
	initialization of struct/union (auto) &permit; <!-- xref linkend="33" -->
	linkage resolution : <replaceable>linkage_spec</replaceable> <!-- xref linkend="1" -->
	longlong type &permit; <!-- xref linkend="24" -->
	no directive/nline after ident &permit; <!-- xref linkend="21" -->
	no external declaration &permit; <!-- xref linkend="50" -->
	no ident after # &permit; <!-- xref linkend="11" -->
	no nline after file end &permit; <!-- xref linkend="23" -->
	prototype &permit; <!-- xref linkend="17" -->
	prototype (weak) &permit; <!-- xref linkend="20" -->
	set longlong type : <replaceable>type_name</replaceable> <!-- xref linkend="24" -->
	set name limit <replaceable>integer_constant</replaceable> <!-- xref linkend="25" -->
	set size_t : <replaceable>type_name </replaceable> <!-- xref linkend="10" -->
	text after directive &permit; <!-- xref linkend="19" -->
	unify external linkage <replaceable>status</replaceable> <!-- xref linkend="1" -->
	unify incompatible string literal &permit; <!-- xref linkend="43" -->
	unknown escape &permit; <!-- xref linkend="36" -->
	unknown pragma &permit; <!-- xref linkend="1" -->
	unknown struct/union &dallow; <!-- xref linkend="21" -->
	unknown directive &permit; <!-- xref linkend="1" -->
	unmatched quote &permit; <!-- xref linkend="15" -->
	variable initialization &dallow; <!-- xref linkend="35" -->
	weak macro equality &permit; <!-- xref linkend="9" -->
	writeable string literal &permit; <!-- xref linkend="41" -->

set_sign:
	signed
	unsign
	either

pp_directive:
	file
	ident
	assert
	unassert
	weak

pp_spec:
	allow
	warning
	(ignore) allow
	(ignore) warning

linkage_spec:
	(internal) on
	(internal) warning
	(external) on
	(external) warning
	off

state:
	on
	warning
	off

permit:
	allow
	warning
	disallow

dallow:
	allow
	disallow

token_pragma:
	ARITHMETIC <!-- xref linkend="13" -->
	DEFINE MEMBER
	EXP <!-- xref linkend="3" -->
	FUNC <!-- xref linkend="24" -->
	MEMBER <!-- xref linkend="19" -->
	NAT <!-- xref linkend="3" -->
	PROC <!-- xref linkend="22" -->
	STATEMENT <!-- xref linkend="6" -->
	STRUCT <!-- xref linkend="16" -->
	TYPE <!-- xref linkend="9" -->
	UNION <!-- xref linkend="16" -->
	VARIETY <!-- xref linkend="11" -->

token_operation:
	define
	no_def
	extend
	ignore
	implement
	interface
	promote <!-- xref linkend="4" -->

integer_pragma:
	integer literal <replaceable>lit_class_type_list</replaceable> <!-- xref linkend="2" -->

lit_class_type_list:
	*<replaceable>int_type_spec</replaceable>
	integer_constant <replaceable>int_type_spec</replaceable> | <replaceable>lit_class_type_list</replaceable>

int_type_spec:
	<replaceable>type_name</replaceable>
	*warning&opt.bnf; : &identifier;
	** :</programlisting>
	</refsection>
</refentry>

