<?xml version="1.0"?>
<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [
	<!ENTITY D1.opt "<option>-D</option>&nbsp;&macro.arg;">
	<!ENTITY D2.opt "<option>-D</option>&nbsp;&macro.arg;&equal.lit;&tokens.arg;">

	<!ENTITY A.opt "<option>-A</option>&nbsp;&predicate.arg;&open.lit;&tokens.arg;&close.lit;">
	<!ENTITY C.opt "<option>-C</option>&nbsp;&file.arg;">
	<!ENTITY E.opt "<option>-E</option>">
	<!ENTITY F.opt "<option>-F</option>&nbsp;&file.arg;">
	<!ENTITY H.opt "<option>-H</option>">
	<!ENTITY I.opt "<option>-I</option>&nbsp;&dir.arg;">
	<!ENTITY N.opt "<option>-N</option>&nbsp;&name.arg;&colon.lit;&dir.arg;">
	<!ENTITY S.opt "<option>-S</option>">
	<!ENTITY U.opt "<option>-U</option>&nbsp;&macro.arg;">
	<!ENTITY V.opt "<option>-V</option>">
	<!ENTITY W.opt "<option>-W</option>&nbsp;&opt.arg;">
	<!ENTITY X.opt "<option>-X</option>">
	<!ENTITY Z.opt "<option>-Z</option>&nbsp;&num.arg;">

	<!ENTITY a.opt "<option>-a</option>">
	<!ENTITY c.opt "<option>-c</option>">
	<!ENTITY d.opt "<option>-d</option>&nbsp;&opt.arg;&equal.lit;&dump-file.arg;">
	<!ENTITY e.opt "<option>-e</option>&nbsp;&file.arg;">
	<!ENTITY f.opt "<option>-f</option>&nbsp;&file.arg;">
	<!ENTITY g.opt "<option>-g</option>">
	<!ENTITY h.opt "<option>-h</option>">
	<!ENTITY j.opt "<option>-j</option>&nbsp;&opt.arg;">
	<!ENTITY m.opt "<option>-m</option>&nbsp;&opt.arg;">
	<!ENTITY n.opt "<option>-n</option>&nbsp;&port-table.arg;">
	<!ENTITY o.opt "<option>-o</option>&nbsp;&out-file.arg;">
	<!ENTITY q.opt "<option>-q</option>">
	<!ENTITY s.opt "<option>-s</option>&nbsp;&spec-file.arg;&k.ext;/&kk.ext;">
	<!ENTITY t.opt "<option>-t</option>">
	<!ENTITY u.opt "<option>-u</option>&nbsp;&name.arg;&nbsp;&ellipsis.lit;&nbsp;&name.arg;">
	<!ENTITY v.opt "<option>-v</option>">
	<!ENTITY w.opt "<option>-w</option>">
	<!ENTITY z.opt "<option>-z</option>">

	<!ENTITY tdfc2.x   "<command>tdfc2</command>">
	<!ENTITY tcpplus.x "<command>tcpplus</command>">

	<!ENTITY both      "&tdfc2.x; and &tcpplus.x;">
	<!ENTITY either    "&tdfc2.x; or  &tcpplus.x;">

	<!ENTITY in-file.c-or-cc "<replaceable>input-file</replaceable>&c.ext;/&cc.ext;">
	<!ENTITY in-file.k-or-kk "<replaceable>input-file</replaceable>&k.ext;/&kk.ext;">
	<!ENTITY out-file.i      "<replaceable>output-file</replaceable>&i.ext;">
	<!ENTITY out-file.j      "<replaceable>output-file</replaceable>&j.ext;">
]>

<!-- $Id$ -->
<refentry>
<!--
        Copyright (c) 2002-2007 The TenDRA Project <http://www.tendra.org/>.
        All rights reserved.

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:

        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of The TenDRA Project nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific, prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
        IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
        OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<!--
			 Crown Copyright (c) 1997

	This TenDRA(r) Manual Page is subject to Copyright
	owned by the United Kingdom Secretary of State for Defence
	acting through the Defence Evaluation and Research Agency
	(DERA).	It is made available to Recipients with a
	royalty\-free licence for its use, reproduction, transfer
	to other parties and amendment for any purpose not excluding
	product development provided that any such use et cetera
	shall be deemed to be acceptance of the following conditions:\-

			(1) Its Recipients shall ensure that this Notice is
			reproduced upon any copies or amended versions of it;

			(2) Any amended version of it shall be clearly marked to
			show both the nature of and the organisation responsible
			for the relevant amendment or amendments;

			(3) Its onward transfer from a recipient to another
			party shall be deemed to be that party's acceptance of
			these conditions;

			(4) DERA gives no warranty or assurance as to its
			quality or suitability for any purpose and DERA accepts
			no liability whatsoever in relation to any use to which
			it may be put.
-->

	<!-- TODO: possibly merge this into tcppplus.1.
		combine using XSLT, and generate both pages (and also tchk?) -->

	<refmeta>
		<refentrytitle>tdfc2</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>tdfc2</refname>
		<refname>tcpplus</refname>
		<refpurpose>DRA C/C++ to TDF producers</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<cmdsynopsis>
			<command>tdfc2/tcpplus</command>

			<arg choice="opt">&s.opt;</arg>

			<sbr/>

			<arg choice="opt"><option>--</option></arg>

			<arg choice="opt" rep="repeat">&in-file.c-or-cc;</arg>
			<arg choice="opt">&out-file.j;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tdfc2/tcpplus</command>

			<arg choice="opt">&E.opt;</arg>

			<sbr/>

			<arg choice="opt"><option>--</option></arg>

			<arg choice="opt" rep="repeat">&in-file.c-or-cc;</arg>
			<arg choice="opt">&out-file.i;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tdfc2/tcpplus</command>

			<arg choice="opt">&S.opt;</arg>
			<arg choice="opt">&s.opt;</arg>

			<sbr/>

			<arg choice="opt"><option>--</option></arg>

			<arg choice="opt" rep="repeat">&in-file.k-or-kk;</arg>
			<arg choice="opt">&out-file.j;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>tdfc2/tcpplus</command>

			<group choice="req">
				<arg choice="plain">&h.opt;</arg>
				<arg choice="plain">&v.opt;</arg>
			</group>
		</cmdsynopsis>

		<para>Most options are common to all modes.
			For brevity, these are not repeated above:</para>

		<!-- TODO: are things like -D relevant for spec file linking? -->
		<cmdsynopsis>
			<command>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</command>

			<arg choice="opt">&A.opt;</arg>
			<arg choice="opt">&C.opt;</arg>
			<arg choice="opt">&D1.opt;</arg>
			<arg choice="opt">&D2.opt;</arg>
			<arg choice="opt">&F.opt;</arg>

			<sbr/>

			<arg choice="opt">&H.opt;</arg>
			<arg choice="opt">&I.opt;</arg>
			<arg choice="opt">&N.opt;</arg>
			<arg choice="opt">&U.opt;</arg>
			<arg choice="opt">&V.opt;</arg>
			<arg choice="opt">&W.opt;</arg>
			<arg choice="opt">&X.opt;</arg>
			<arg choice="opt">&Z.opt;</arg>

			<sbr/>

			<arg choice="opt">&a.opt;</arg>
			<arg choice="opt">&c.opt;</arg>
			<arg choice="opt">&d.opt;</arg>
			<arg choice="opt">&e.opt;</arg>
			<arg choice="opt">&f.opt;</arg>
			<arg choice="opt">&g.opt;</arg>
			<arg choice="opt">&j.opt;</arg>
			<arg choice="opt">&m.opt;</arg>

			<sbr/>

			<arg choice="opt">&n.opt;</arg>
			<arg choice="opt">&o.opt;</arg>
			<arg choice="opt">&q.opt;</arg>
			<arg choice="opt">&t.opt;</arg>
			<arg choice="opt">&u.opt;</arg>
			<arg choice="opt">&w.opt;</arg>
			<arg choice="opt">&z.opt;</arg>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>&both; have three modes which determine the form
			of their input and output files.</para>

		<para>The default mode is compilation, in which an input source file,
			&in-file.c-or-cc;, is translated into a &tdf; capsule, &out-file.j;.
			&tdfc2.x; translates C source, and &tcpplus.x; translates C++ source.
			The output file can alternatively be specified using the
			<option>-o</option> option.
			If the output file name is omitted or is &hyphen.lit;,
			standard output is used.
			In general there can be any number of input files.
			If the input file name is omitted or is &hyphen.lit;,
			standard input is used.</para>

		<para>In preprocessing mode, specified using the &E.opt; option,
			the single input source file, &in-file.c-or-cc;, is preprocessed
			to an output file, &out-file.j;.
			Note that the preprocessor is built into &both;, rather than,
			as with most other compilers, being a separate program.</para>

		<para>The final mode is spec linking, invoked using the &S.opt; option,
			in which any number of spec input files, &in-file.k-or-kk;,
			are linked and any code generated as a result
			(for example, template instantiations)
			is written to the output &tdf; capsule, &out-file.j;.</para>

		<!-- TODO: are spec output file always C++ only? -->
		<para>In either compilation or spec linking mode, a <!-- C++ -->spec file
			can be generated in addition to the &tdf; capsule, using the
			<option>-s</option> option.
			The generated spec file contains information enabling intermodule
			analysis to be performed.</para>

		<para>In any mode a &tdfcdump.5; symbol table dump output file can
			be generated using the <option>-d</option> option.
			This outputs usage and error information suitable for processing
			by other tools, output as a symbol table dump file.
			See &tdfcdump.5; for the dump file format.</para>
	</refsection>

	<refsection>
		<title>Invocation</title>

		<para>While it is possible to use &both; as stand-alone
			programs, it is recommended that they should be invoked via &tcc; or &tchk;.
			The &tcc-userguide.doc; should be consulted for more details.</para>

		<para>The command-line options can appear in any order and can be
			interspersed with the input and output files,
			except following a <option>--</option> option..
			All the multi-part options can be given either as one or two
			command-line arguments, so that <option>-I</option>&dir.arg; and
			<option>-I</option>&nbsp;&dir.arg; are equivalent.</para>

		<para>Most of the command-line option handling for &both;
			is done by &tcc; and &tchk;, however when invoking &tcc; or &tchk;,
			options may be passed directly to
			&tdfc2.x;   using <option>-W<literal>c</literal>,</option>&opt.arg; and to
			&tcpplus.x; using <option>-W<literal>x</literal>,</option>&opt.arg;.
			Similarly <option>-W<literal>g</literal>,</option>&opt.arg; and
			<option>-W<literal>S</literal>,</option>&opt.arg; can be used to
			pass options to the C++ preprocessor and the C++ spec linker
			(both of which are actually &either; invoked
			with different options) respectively.</para>

		<para>Both &tcc; and &tchk; require the <option>-Y</option><literal>c++</literal>
			command-line option in order to enable their C++ capabilities.
			Files with a &C.ext; suffix are recognised as C++ source files and
			passed to &tcpplus.x; for processing
			It is possible to change the suffix used for C++ source files; for
			example <option>-s</option><literal>C:cc</literal> causes &cc.ext;
			files to be recognised as C++ source files.
			An interesting variation is <option>-s</option><literal>C:c</literal>
			which causes C source files to be processed by the C++ producer.
			Similarly &I.ext; files are recognised as preprocessed C++ source
			files and &K.ext; files are recognised as C++ spec files.</para>
	</refsection>

	<refsection>
		<title>Options</title>

		<variablelist>
			<varlistentry>
				<term>&A.opt;</term>

				<listitem>
					<para>Asserts that the given predicate is true.
						That is to say:</para>

					<programlisting language="cpp">#assert &predicate.arg; ( &tokens.arg; )</programlisting>

					<para>The special case <option>-A-</option> undefines all the
						built-in predicates (of which there are none).
						Use of this option automatically enables support for the
						&tdfcpragma.5; <code>#assert</code> and
						<code>#unassert</code> directives.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&C.opt;</term>

				<listitem>
					<para>Load the given file as as a character set map.
						See &charset.5; for the syntax of this file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&D1.opt;</term>
				<term>&D2.opt;</term>

				<listitem>
					<para>Defines the given macro to be 1 in the first case,
						or the given sequence of preprocessing tokens in the
						second case. That is to say, respectively:</para>

					<programlisting language="cpp">#define &macro.arg; 1
#define &macro.arg; &tokens.arg;</programlisting>

					<para>In fact <option>-D</option> and <option>-U</option>
						options to &tcc; are not passed as <option>-D</option>
						and <option>-U</option> options to &either;.
						Instead a start-up file
						containing the equivalent <code>#define</code> and
						<code>#undef</code> directives is used.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&E.opt;</term>

				<listitem>
					<para>Enables preprocessing mode in which the input C
						source file is preprocessed into the output file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&F.opt;</term>

				<listitem>
					<para>Causes a list of options to be read from &file.arg;.
						Other than empty lines and lines beginning with <code>#</code>,
						each line in the file is treated as if it had been specified
						as a separate command-line option.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&H.opt;</term>

				<listitem>
					<para>Enables verbose inclusion mode in which warnings
						are printed at the start and the end of each included
						source file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&I.opt;</term>

				<listitem>
					<para>Adds the given directory to the list searched
						for included source files.
						No such directories are built in.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&N.opt;</term>

				<listitem>
					<para>Is identical to &I.opt;&dir.arg; except that it also
						associates the given identifier with the
						directory.
						The directory name can be used to specify a &tdfcpragma.5;
						compilation profile to be used on
						files included from this directory.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&S.opt;</term>

				<listitem>
					<para>Enables spec linker mode in which any number of
						input spec files are linked into a single
						output spec file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&U.opt;</term>

				<listitem>
					<para>Undefines the given macro.</para>

					<para>The special case <option>-U-</option> undefines all the
						built-in macros.
						These are the standard macros
						<code>__FILE__</code>,
						<code>__LINE__</code>,
						<code>__TIME__</code>,
						<code>__DATE__</code>,
						<code>__STDC__</code> and
						<code>__STDC_VERSION__</code>,
						and also <code>__cplusplus</code> for &tcpplus.x; only.

						<!-- XXX: why? remove this macro -->
						Additionally, the macro <code>__tcpplus</code> is undefined;
						by default this is <code>0</code> for &tdfc2.x;
						and <code>1</code> for &tcpplus.x;.</para>

					<para>The actual value of <code>__cplusplus</code> gives the date of the
						draft ISO C++ standard on which the current version of the producer
						is based. The value given above gives the expected date of the final
						C++ standard.</para>
					<!-- TODO: update; 199707L according to http://predef.sourceforge.net/prestd.html -->
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&V.opt;</term>

				<listitem>
					<para>Print the name of each function to standard output as it is compiled.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&W.opt;</term>

				<listitem>
					<para>Give a warning in the circumstances described by &opt.arg;.
						This sets the given compiler option thus:</para>

					<programlisting language="cpp">#pragma TenDRA option &quot;&opt.arg;&quot; warning</programlisting>

					<para>The special case
						<option>-W</option><literal>all</literal> enables a wide
						range of warnings.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&X.opt;</term>

				<!-- TODO link "current implementation" to lib.html -->
				<listitem>
					<para>Disables exception handling.
						The current implementation can be a large run-time overhead
						if not required.
						The effect of linking any module compiled with this option
						with a module which throws an exception is undefined.
						This is equivalent to
						<option>-j</option><literal>-e</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&Z.opt;</term>

				<listitem>
					<para>Sets the maximum number of errors printed
						before bailing out to be &num.arg;.
						The default is 32.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&a.opt;</term>

				<listitem>
					<para>Apply complete program analysis to input files.
						That is, assume that no other translation units need
						to be linked in order for the program to execute.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&c.opt;</term>

				<listitem>
					<para>Disables &tdf; output.
						The output file will still be a valid &tdf; capsule,
						only it will contain no information.
						This is equivalent to
						<option>-j</option><literal>-c</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&d.opt;</term>

				<listitem>
					<para>Dump information about the input source file into
						&dump-file.arg;.
						&opt.arg; is a set of characters describing the
						information to be dumped, as follows:</para>

					<table>
						<col align="center"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>a</code> (<quote>all</quote>)</td>
								<td>equivalent to <code>ehlmu</code></td>
							</tr>
							<tr>
								<td><code>c</code></td>
								<td>dump string literals</td>
							</tr>
							<tr>
								<td><code>e</code></td>
								<td>dump error messages</td>
							</tr>
							<tr>
								<td><code>h</code></td>
								<td>dump header information</td>
							</tr>
							<tr>
								<td><code>k</code></td>
								<td>dump keyword identifiers</td>
							</tr>
							<tr>
								<td><code>l</code></td>
								<td>dump local variables</td>
							</tr>
							<tr>
								<td><code>m</code></td>
								<td>dump macro identifiers</td>
							</tr>
							<tr>
								<td><code>s</code></td>
								<td>dump scope information</td>
							</tr>
							<tr>
								<td><code>u</code></td>
								<td>dump identifier usage information</td>
							</tr>
						</tbody>
					</table>

					<para>These correspond to the
						&tcc; <option>-sym</option> options.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&e.opt;</term>
				<term>&f.opt;</term>

				<listitem>
					<para>Specifies the given file as a <quote>start-up</quote>
						or <quote>end-up</quote> file respectivelyfile.
						This is equivalent to adding:</para>

					<programlisting language="cpp">#include &quot;&file.arg;&quot;</programlisting>

					<para>at the start or end of the input source file.</para>

					<para>More than one start-up and end-up file may be given;
						they are processed in the order given.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&g.opt;</term>

				<listitem>
					<para>Specifies that the output &tdf; capsule should also
						contain information to allow for the generation of run-time
						debugging directives.
						This is equivalent to
						<option>-j</option><literal>g</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&h.opt;</term>

				<listitem>
					<para>Causes &tdfc2.x; to print a full list of its available
						command-line options.
						This includes a number not documented here which are
						unlikely to prove useful to the normal user.</para>
				</listitem>
				<!-- TODO document them! -->
			</varlistentry>

			<varlistentry>
				<term>&j.opt;</term>

				<listitem>
					<para>Sets the &tdf; output options given by &opt.arg;.
						This consists of a sequence of characters describing
						the options to be enabled or disabled.
						By default, or following a <code>+</code>, the options
						are enabled; following a <code>-</code> they are disabled.
						The available options are:</para>

					<table>
						<col align="center"/>
						<col align="center"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Default</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>a</code></td>
								<td>off</td>
								<td>output external names for local objects</td>
							</tr>
							<tr>
								<td><code>b</code></td>
								<td>off</td>
								<td>work around old installer bugs</td>
							</tr>
							<tr>
								<td><code>c</code></td>
								<td>on</td>
								<td>output &tdf; capsule</td>
							</tr>
							<tr>
								<td><code>d</code></td>
								<td>off</td>
								<td>output termination function</td>
							</tr>
							<tr>
								<td><code>e</code></td>
								<td>on</td>
								<td>output exceptions</td>
							</tr>
							<tr>
								<td><code>f</code></td>
								<td>on</td>
								<td>mangle template function signatures</td>
							</tr>
							<tr>
								<td><code>g</code></td>
								<td>off</td>
								<td>output debugging information</td>
							</tr>
							<tr>
								<td><code>i</code></td>
								<td>off</td>
								<td>output dynamic initialisers as a function</td>
							</tr>
							<tr>
								<td><code>n</code></td>
								<td>on</td>
								<td>mangle object names</td>
							</tr>
							<tr>
								<td><code>o</code></td>
								<td>off</td>
								<td>order class data members by access</td>
							</tr>
							<tr>
								<td><code>p</code></td>
								<td>on</td>
								<td>output partial destructors</td>
							</tr>
							<tr>
								<td><code>r</code></td>
								<td>on</td>
								<td>output run-time type information</td>
							</tr>
							<tr>
								<td><code>s</code></td>
								<td>on</td>
								<td>output shared string literals</td>
							</tr>
							<tr>
								<td><code>t</code></td>
								<td>off</td>
								<td>output token declarations</td>
							</tr>
							<tr>
								<td><code>u</code></td>
								<td>on</td>
								<td>output unused static variables</td>
							</tr>
							<tr>
								<td><code>v</code></td>
								<td>off</td>
								<td>output local virtual function tables</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&m.opt;</term>

				<listitem>
					<para>Sets the error formatting options given by &opt.arg;.
						This consists of a sequence of characters describing
						the options to be enabled or disabled.
						By default, or following a <code>+</code>, the options
						are enabled; following a <code>-</code> they are
						disabled.
						The available options are:</para>

					<table>
						<col align="center"/>
						<col align="center"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Key</th>
								<th>Default</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
						<tr>
							<td><code>c</code></td>
							<td>off</td>
							<td>show source code with error</td>
						</tr>
						<tr>
							<td><code>e</code></td>
							<td>off</td>
							<td>show error name</td>
						</tr>
						<tr>
							<td><code>f</code></td>
							<td>on</td>
							<td>reliable <code>fseek</code> function</td>
						</tr>
						<tr>
							<td><code>g</code></td>
							<td>off</td>
							<td>record statement locations</td>
						</tr>
						<tr>
							<td><code>i</code></td>
							<td>on</td>
							<td>reliable <code>stat</code> function</td>
						</tr>
						<tr>
							<td><code>k</code></td>
							<td>off</td>
							<td>enable C++ spec output</td>
						</tr>
						<tr>
							<td><code>l</code></td>
							<td>off</td>
							<td>output full error location</td>
						</tr>
						<tr>
							<td><code>s</code></td>
							<td>on</td>
							<td>output ISO section number</td>
						</tr>
						<tr>
							<td><code>t</code></td>
							<td>off</td>
							<td>use <code>typedef</code> names in errors</td>
						</tr>
						<tr>
							<td><code>w</code></td>
							<td>off</td>
							<td>disable warnings</td>
						</tr>
						<tr>
							<td><code>z</code></td>
							<td>off</td>
							<td>continue after error</td>
						</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&n.opt;</term>

				<!-- TODO link to user guide to discuss portability tables; they ought to be in a .5 manpage, too -->
				<listitem>
					<para>Specifies that the given portability table should be
						used to specify the basic configuration parameters.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&o.opt;</term>

				<listitem>
					<para>An alternative method of specifying the output file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&q.opt;</term>

				<listitem>
					<para>Quit immediately without processing input files.
						This is useful primarily in version and command line queries.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s.opt;</term>

				<listitem>
					<para>Write a spec file describing the
						input source file to &spec-file.arg;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&t.opt;</term>

				<listitem>
					<para>Include token declarations in the output &tdf; capsule.
						While these are strictly unnecessary, they help when
						pretty-printing the output.
						This is equivalent to
						<option>-j</option><literal>t</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&u.opt;</term>

				<listitem>
					<para>Print the unmangled forms of the given mangled
						identifier names. The form:</para>

					<screen>tcpplus -u &name.arg; .... &name.arg;</screen>

					<para>can be used to print the unmangled forms of a
						list of mangled identifier
						names to standard output.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&v.opt;</term>

				<listitem>
					<para>Print the producer version number to
						standard error, along with the versions of
						the source language and &tdf; supported.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&w.opt;</term>

				<listitem>
					<para>Disables all warning messages.
						This is equivalent to
						<option>-m</option><literal>w</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&z.opt;</term>

				<listitem>
					<para>Forces &both; to produce an output file even if
						compilation errors occur.
						The effect of installing a &tdf; capsule produced using
						this option is undefined.
						This is equivalent to
						<option>-m</option><literal>z</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><option>--</option></term>

				<listitem>
					<para>Marks the last option.
						Any subsequent arguments are interpreted as input and
						output files even if they resemble command-line options.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&tcc;, &tchk;, &tdfcdump.5;, &tdfcpragma.5;, &charset.5;.</para>

		<para>&tcc-userguide.doc;.</para>
	</refsection>
</refentry>

