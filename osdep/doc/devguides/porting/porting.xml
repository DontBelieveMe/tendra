<?xml version="1.0" standalone="no"?>
<!DOCTYPE book SYSTEM "minidocbook.dtd">

<!--
	$Id$
-->

<book xmlns:xi="http://www.w3.org/2001/XInclude">
	<bookinfo>
		<title>Porting TenDRA to Different Operating Systems</title>

		<authorgroup>
			<author>
				<firstname>Katherine</firstname>
				<surname>Flavel</surname>
				<affiliation><orgname>The TenDRA Project</orgname></affiliation>
			</author>
		</authorgroup>

		<pubdate>2009</pubdate>

		<copyright>
			<year>2009</year>

			<holder>The TenDRA Project</holder>
		</copyright>
	</bookinfo>

	<preface>
		<title>Introduction</title>

		<para>This guide presents the process of porting the various parts of
			TenDRA to a new operating system.</para>

		<para>Most of the code is portable, however, there are neccessarily
			some machine-specific areas. We have attempted to cover the
			common situations which will be encountered, and also to document
			some of the more unusual situations found through experience.
			These situations are documented here largely to highlight the
			existence of their techniques so that code may be more easily found
			and used for future reference.</para>

		<para>The process of discovery is ongoing, and this document is
			intended to be updated with the results of future explorations
			as new situations are encountered.</para>
	</preface>

	<chapter>
		<title>The build system</title>

		<para>The <application>makedefs</application> script identifies which
			of the supported Operating Systems is being used, and passes this
			information through to the build system as a normalised set of
			environment variables. Keeping the names and version numbers
			normalised to an internal scheme removes special cases elsewhere
			in the system. For example:</para>

		<programlisting language="make">OSFAM=       netbsd
OSVER=       NETBSD5
BLDARCH=     80x86
BLDARCHBITS= 32
EXECFORMAT=  elf</programlisting>

		<para>Update the <application>makedefs</application> script<!-- TODO: link to source? -->
			so that it is aware of the new platform, and can produce these
			variables. Take care to keep the form consistent with the existing
			platforms. In almost all cases these are identified simply by
			inspecting output from <application>uname</application><!-- TODO: manpage link -->.</para>

		<para>If the <application>makedefs</application> script needs updating,
			it will have complained that the platform is unrecognised.</para>
	</chapter>

	<xi:include href="machines.xml"/>

	<chapter>
		<title>Machine-Specific Tokens</title>

		<para>tokens/ is for os-machine specific definitions of
			implementation-defined things?  like INT_MAX, sizeof(int), etc
			(write these in TDFese) these are defined in tpl, which is just a
			more convenient-to-write TDF. They could just as well be written
			in TDF directly.  you *could* also use tokens/ to write
			machine-specific optimised routines</para>

		<para>i guess you need to add stuff to src/lib/machines/$os/$arch/tokens, but i
			don't understand those yet. they're machine-specific implementations of abstract
			TDF tokens, written in TPL?</para>
	</chapter>

	<chapter>
		<title>Installers</title>

		<para>asm stuff:</para>

		<para>add installers/$arch/$os - this provides trans(1). i know nothing
			about this (probably) not required if you're just adding a new
			version of an OS and that OS is backwards-compatible to older binaries</para>

		<para>TODO: talk about different assembler dialects</para>
	</chapter>

	<appendix>
		<title>See Also</title>	<!-- TODO: bibliography? -->

		<para>see http://predef.sourceforge.net/preos.html#sec26 for handy macros per OS
			feature-requirement macros are especially relevant to startup headers.</para>

		<para>see also: tspec guide
			"adding new APIs with tspec"
			papers/porting
			orientation guide</para>
	</appendix>

	<appendix>
		<title>Examples of &api; Workarounds</title>

		<para>Examples of machine-specific API implementation workarounds</para>

		<para>TODO: some recosisable frequently-occuring patterns here
			example of __BUILDING_LIBS
			example of __BUILDING_TDF_API_...</para>
	</appendix>

</book>

